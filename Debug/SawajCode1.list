
SawajCode1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c468  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  0800c648  0800c648  0000d648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd00  0800cd00  0000e094  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cd00  0800cd00  0000dd00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd08  0800cd08  0000e094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd08  0800cd08  0000dd08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cd0c  0800cd0c  0000dd0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  0800cd10  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  20000098  0800cda4  0000e098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  0800cda4  0000e6b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001633f  00000000  00000000  0000e0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fb4  00000000  00000000  00024403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  000273b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f1c  00000000  00000000  00028708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b05  00000000  00000000  00029624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189e4  00000000  00000000  0004e129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0ff1  00000000  00000000  00066b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147afe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006538  00000000  00000000  00147b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0014e07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000098 	.word	0x20000098
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c630 	.word	0x0800c630

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000009c 	.word	0x2000009c
 800021c:	0800c630 	.word	0x0800c630

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <CytronMotor_Init>:
#include "Cytron.h"


/*Function to initalize motor*/
void CytronMotor_Init(CytronMotor_t *motor, TIM_HandleTypeDef *htim, uint32_t channel, GPIO_TypeDef *dirPort, uint16_t dirPin)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
 8000fc0:	603b      	str	r3, [r7, #0]
	motor->htim =htim; //Assign Timer
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	601a      	str	r2, [r3, #0]
	motor->channel=channel; //Assign channel
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	605a      	str	r2, [r3, #4]
	motor->dirPort = dirPort; //Assign Port
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	609a      	str	r2, [r3, #8]
	motor->dirPin = dirPin; //Assign Pin
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	8b3a      	ldrh	r2, [r7, #24]
 8000fd8:	819a      	strh	r2, [r3, #12]

	HAL_GPIO_WritePin(motor->dirPort, motor->dirPin, GPIO_PIN_RESET);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	6898      	ldr	r0, [r3, #8]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	899b      	ldrh	r3, [r3, #12]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f003 fb31 	bl	800464c <HAL_GPIO_WritePin>
	if (HAL_TIM_PWM_Start(motor->htim, motor->channel) != HAL_OK) {
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	f005 fa85 	bl	8006504 <HAL_TIM_PWM_Start>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <CytronMotor_Init+0x50>
	    Error_Handler();
 8001000:	f002 fa80 	bl	8003504 <Error_Handler>
	}
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <CytronMotor_Speed>:
/* Function to set speed*/
void CytronMotor_Speed(CytronMotor_t *motor, int speed)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
	if(speed>0)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	dd08      	ble.n	800102e <CytronMotor_Speed+0x22>
	{
		HAL_GPIO_WritePin(motor->dirPort,motor->dirPin, GPIO_PIN_SET);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6898      	ldr	r0, [r3, #8]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	899b      	ldrh	r3, [r3, #12]
 8001024:	2201      	movs	r2, #1
 8001026:	4619      	mov	r1, r3
 8001028:	f003 fb10 	bl	800464c <HAL_GPIO_WritePin>
 800102c:	e00a      	b.n	8001044 <CytronMotor_Speed+0x38>
	}
	else
	{
		HAL_GPIO_WritePin(motor->dirPort,motor->dirPin, GPIO_PIN_RESET);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6898      	ldr	r0, [r3, #8]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	899b      	ldrh	r3, [r3, #12]
 8001036:	2200      	movs	r2, #0
 8001038:	4619      	mov	r1, r3
 800103a:	f003 fb07 	bl	800464c <HAL_GPIO_WritePin>
	speed=-speed;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	425b      	negs	r3, r3
 8001042:	603b      	str	r3, [r7, #0]
	}
	if(speed>1000) speed=1000;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800104a:	dd02      	ble.n	8001052 <CytronMotor_Speed+0x46>
 800104c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001050:	603b      	str	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(motor->htim,motor->channel,speed);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d105      	bne.n	8001066 <CytronMotor_Speed+0x5a>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001064:	e02c      	b.n	80010c0 <CytronMotor_Speed+0xb4>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->channel,speed);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b04      	cmp	r3, #4
 800106c:	d105      	bne.n	800107a <CytronMotor_Speed+0x6e>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001078:	e022      	b.n	80010c0 <CytronMotor_Speed+0xb4>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->channel,speed);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b08      	cmp	r3, #8
 8001080:	d105      	bne.n	800108e <CytronMotor_Speed+0x82>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800108c:	e018      	b.n	80010c0 <CytronMotor_Speed+0xb4>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->channel,speed);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b0c      	cmp	r3, #12
 8001094:	d105      	bne.n	80010a2 <CytronMotor_Speed+0x96>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80010a0:	e00e      	b.n	80010c0 <CytronMotor_Speed+0xb4>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->channel,speed);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b10      	cmp	r3, #16
 80010a8:	d105      	bne.n	80010b6 <CytronMotor_Speed+0xaa>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80010b4:	e004      	b.n	80010c0 <CytronMotor_Speed+0xb4>
	__HAL_TIM_SET_COMPARE(motor->htim,motor->channel,speed);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <mapValue>:

float minaxis = 3.4;
float majaxis = 3.9;
float theta = 0.0;

float mapValue(float value, float in_min, float in_max, float out_min, float out_max) {
 80010c8:	b480      	push	{r7}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	ed87 0a05 	vstr	s0, [r7, #20]
 80010d2:	edc7 0a04 	vstr	s1, [r7, #16]
 80010d6:	ed87 1a03 	vstr	s2, [r7, #12]
 80010da:	edc7 1a02 	vstr	s3, [r7, #8]
 80010de:	ed87 2a01 	vstr	s4, [r7, #4]
    return (value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80010e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80010e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80010ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010ee:	edd7 6a01 	vldr	s13, [r7, #4]
 80010f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80010f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80010fa:	ee67 6a27 	vmul.f32	s13, s14, s15
 80010fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001102:	edd7 7a04 	vldr	s15, [r7, #16]
 8001106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800110a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800110e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001112:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001116:	eeb0 0a67 	vmov.f32	s0, s15
 800111a:	371c      	adds	r7, #28
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	0000      	movs	r0, r0
	...

08001128 <calculateWheelSpeeds>:

void calculateWheelSpeeds(int x, int y, int *m1, int *m2, int *m3, float *r1, float *degree) {
 8001128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800112c:	b08e      	sub	sp, #56	@ 0x38
 800112e:	af00      	add	r7, sp, #0
 8001130:	6178      	str	r0, [r7, #20]
 8001132:	6139      	str	r1, [r7, #16]
 8001134:	60fa      	str	r2, [r7, #12]
 8001136:	60bb      	str	r3, [r7, #8]
    float x1 = mapValue(x, 2000, 1000, -4, 4);
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	ee07 3a90 	vmov	s15, r3
 800113e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001142:	eeb1 2a00 	vmov.f32	s4, #16	@ 0x40800000  4.0
 8001146:	eef9 1a00 	vmov.f32	s3, #144	@ 0xc0800000 -4.0
 800114a:	ed9f 1ac1 	vldr	s2, [pc, #772]	@ 8001450 <calculateWheelSpeeds+0x328>
 800114e:	eddf 0ac1 	vldr	s1, [pc, #772]	@ 8001454 <calculateWheelSpeeds+0x32c>
 8001152:	eeb0 0a67 	vmov.f32	s0, s15
 8001156:	f7ff ffb7 	bl	80010c8 <mapValue>
 800115a:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
    float y1 = mapValue(y, 2000, 1000, -4, 4);
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001168:	eeb1 2a00 	vmov.f32	s4, #16	@ 0x40800000  4.0
 800116c:	eef9 1a00 	vmov.f32	s3, #144	@ 0xc0800000 -4.0
 8001170:	ed9f 1ab7 	vldr	s2, [pc, #732]	@ 8001450 <calculateWheelSpeeds+0x328>
 8001174:	eddf 0ab7 	vldr	s1, [pc, #732]	@ 8001454 <calculateWheelSpeeds+0x32c>
 8001178:	eeb0 0a67 	vmov.f32	s0, s15
 800117c:	f7ff ffa4 	bl	80010c8 <mapValue>
 8001180:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
    theta = (*degree * 3.1415) / 180.0;
 8001184:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f9fd 	bl	8000588 <__aeabi_f2d>
 800118e:	a3ae      	add	r3, pc, #696	@ (adr r3, 8001448 <calculateWheelSpeeds+0x320>)
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	f7ff fa50 	bl	8000638 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	4bac      	ldr	r3, [pc, #688]	@ (8001458 <calculateWheelSpeeds+0x330>)
 80011a6:	f7ff fb71 	bl	800088c <__aeabi_ddiv>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fd19 	bl	8000be8 <__aeabi_d2f>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4aa8      	ldr	r2, [pc, #672]	@ (800145c <calculateWheelSpeeds+0x334>)
 80011ba:	6013      	str	r3, [r2, #0]

    float wheel1, wheel2, wheel3;

    float ellipse_check =
        (x1 * cos(theta) - y1 * sin(theta)) * (x1 * cos(theta) - y1 * sin(theta)) / (minaxis * minaxis) +
 80011bc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80011be:	f7ff f9e3 	bl	8000588 <__aeabi_f2d>
 80011c2:	4604      	mov	r4, r0
 80011c4:	460d      	mov	r5, r1
 80011c6:	4ba5      	ldr	r3, [pc, #660]	@ (800145c <calculateWheelSpeeds+0x334>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f9dc 	bl	8000588 <__aeabi_f2d>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	ec43 2b10 	vmov	d0, r2, r3
 80011d8:	f008 ffde 	bl	800a198 <cos>
 80011dc:	ec53 2b10 	vmov	r2, r3, d0
 80011e0:	4620      	mov	r0, r4
 80011e2:	4629      	mov	r1, r5
 80011e4:	f7ff fa28 	bl	8000638 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4690      	mov	r8, r2
 80011ee:	4699      	mov	r9, r3
 80011f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80011f2:	f7ff f9c9 	bl	8000588 <__aeabi_f2d>
 80011f6:	4604      	mov	r4, r0
 80011f8:	460d      	mov	r5, r1
 80011fa:	4b98      	ldr	r3, [pc, #608]	@ (800145c <calculateWheelSpeeds+0x334>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f9c2 	bl	8000588 <__aeabi_f2d>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	ec43 2b10 	vmov	d0, r2, r3
 800120c:	f009 f818 	bl	800a240 <sin>
 8001210:	ec53 2b10 	vmov	r2, r3, d0
 8001214:	4620      	mov	r0, r4
 8001216:	4629      	mov	r1, r5
 8001218:	f7ff fa0e 	bl	8000638 <__aeabi_dmul>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4640      	mov	r0, r8
 8001222:	4649      	mov	r1, r9
 8001224:	f7ff f850 	bl	80002c8 <__aeabi_dsub>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4690      	mov	r8, r2
 800122e:	4699      	mov	r9, r3
 8001230:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001232:	f7ff f9a9 	bl	8000588 <__aeabi_f2d>
 8001236:	4604      	mov	r4, r0
 8001238:	460d      	mov	r5, r1
 800123a:	4b88      	ldr	r3, [pc, #544]	@ (800145c <calculateWheelSpeeds+0x334>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f9a2 	bl	8000588 <__aeabi_f2d>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	ec43 2b10 	vmov	d0, r2, r3
 800124c:	f008 ffa4 	bl	800a198 <cos>
 8001250:	ec53 2b10 	vmov	r2, r3, d0
 8001254:	4620      	mov	r0, r4
 8001256:	4629      	mov	r1, r5
 8001258:	f7ff f9ee 	bl	8000638 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4692      	mov	sl, r2
 8001262:	469b      	mov	fp, r3
 8001264:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001266:	f7ff f98f 	bl	8000588 <__aeabi_f2d>
 800126a:	4604      	mov	r4, r0
 800126c:	460d      	mov	r5, r1
 800126e:	4b7b      	ldr	r3, [pc, #492]	@ (800145c <calculateWheelSpeeds+0x334>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f988 	bl	8000588 <__aeabi_f2d>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	ec43 2b10 	vmov	d0, r2, r3
 8001280:	f008 ffde 	bl	800a240 <sin>
 8001284:	ec53 2b10 	vmov	r2, r3, d0
 8001288:	4620      	mov	r0, r4
 800128a:	4629      	mov	r1, r5
 800128c:	f7ff f9d4 	bl	8000638 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4650      	mov	r0, sl
 8001296:	4659      	mov	r1, fp
 8001298:	f7ff f816 	bl	80002c8 <__aeabi_dsub>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4640      	mov	r0, r8
 80012a2:	4649      	mov	r1, r9
 80012a4:	f7ff f9c8 	bl	8000638 <__aeabi_dmul>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4614      	mov	r4, r2
 80012ae:	461d      	mov	r5, r3
 80012b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001460 <calculateWheelSpeeds+0x338>)
 80012b2:	ed93 7a00 	vldr	s14, [r3]
 80012b6:	4b6a      	ldr	r3, [pc, #424]	@ (8001460 <calculateWheelSpeeds+0x338>)
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c0:	ee17 0a90 	vmov	r0, s15
 80012c4:	f7ff f960 	bl	8000588 <__aeabi_f2d>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7ff fadc 	bl	800088c <__aeabi_ddiv>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4690      	mov	r8, r2
 80012da:	4699      	mov	r9, r3
        (x1 * sin(theta) + y1 * cos(theta)) * (x1 * sin(theta) + y1 * cos(theta)) / (majaxis * majaxis);
 80012dc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80012de:	f7ff f953 	bl	8000588 <__aeabi_f2d>
 80012e2:	4604      	mov	r4, r0
 80012e4:	460d      	mov	r5, r1
 80012e6:	4b5d      	ldr	r3, [pc, #372]	@ (800145c <calculateWheelSpeeds+0x334>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f94c 	bl	8000588 <__aeabi_f2d>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	ec43 2b10 	vmov	d0, r2, r3
 80012f8:	f008 ffa2 	bl	800a240 <sin>
 80012fc:	ec53 2b10 	vmov	r2, r3, d0
 8001300:	4620      	mov	r0, r4
 8001302:	4629      	mov	r1, r5
 8001304:	f7ff f998 	bl	8000638 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4692      	mov	sl, r2
 800130e:	469b      	mov	fp, r3
 8001310:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001312:	f7ff f939 	bl	8000588 <__aeabi_f2d>
 8001316:	4604      	mov	r4, r0
 8001318:	460d      	mov	r5, r1
 800131a:	4b50      	ldr	r3, [pc, #320]	@ (800145c <calculateWheelSpeeds+0x334>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f932 	bl	8000588 <__aeabi_f2d>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	ec43 2b10 	vmov	d0, r2, r3
 800132c:	f008 ff34 	bl	800a198 <cos>
 8001330:	ec53 2b10 	vmov	r2, r3, d0
 8001334:	4620      	mov	r0, r4
 8001336:	4629      	mov	r1, r5
 8001338:	f7ff f97e 	bl	8000638 <__aeabi_dmul>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4650      	mov	r0, sl
 8001342:	4659      	mov	r1, fp
 8001344:	f7fe ffc2 	bl	80002cc <__adddf3>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4692      	mov	sl, r2
 800134e:	469b      	mov	fp, r3
 8001350:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001352:	f7ff f919 	bl	8000588 <__aeabi_f2d>
 8001356:	4604      	mov	r4, r0
 8001358:	460d      	mov	r5, r1
 800135a:	4b40      	ldr	r3, [pc, #256]	@ (800145c <calculateWheelSpeeds+0x334>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f912 	bl	8000588 <__aeabi_f2d>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	ec43 2b10 	vmov	d0, r2, r3
 800136c:	f008 ff68 	bl	800a240 <sin>
 8001370:	ec53 2b10 	vmov	r2, r3, d0
 8001374:	4620      	mov	r0, r4
 8001376:	4629      	mov	r1, r5
 8001378:	f7ff f95e 	bl	8000638 <__aeabi_dmul>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	e9c7 2300 	strd	r2, r3, [r7]
 8001384:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001386:	f7ff f8ff 	bl	8000588 <__aeabi_f2d>
 800138a:	4604      	mov	r4, r0
 800138c:	460d      	mov	r5, r1
 800138e:	4b33      	ldr	r3, [pc, #204]	@ (800145c <calculateWheelSpeeds+0x334>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff f8f8 	bl	8000588 <__aeabi_f2d>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	ec43 2b10 	vmov	d0, r2, r3
 80013a0:	f008 fefa 	bl	800a198 <cos>
 80013a4:	ec53 2b10 	vmov	r2, r3, d0
 80013a8:	4620      	mov	r0, r4
 80013aa:	4629      	mov	r1, r5
 80013ac:	f7ff f944 	bl	8000638 <__aeabi_dmul>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013b8:	f7fe ff88 	bl	80002cc <__adddf3>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4650      	mov	r0, sl
 80013c2:	4659      	mov	r1, fp
 80013c4:	f7ff f938 	bl	8000638 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4614      	mov	r4, r2
 80013ce:	461d      	mov	r5, r3
 80013d0:	4b24      	ldr	r3, [pc, #144]	@ (8001464 <calculateWheelSpeeds+0x33c>)
 80013d2:	ed93 7a00 	vldr	s14, [r3]
 80013d6:	4b23      	ldr	r3, [pc, #140]	@ (8001464 <calculateWheelSpeeds+0x33c>)
 80013d8:	edd3 7a00 	vldr	s15, [r3]
 80013dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e0:	ee17 0a90 	vmov	r0, s15
 80013e4:	f7ff f8d0 	bl	8000588 <__aeabi_f2d>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4620      	mov	r0, r4
 80013ee:	4629      	mov	r1, r5
 80013f0:	f7ff fa4c 	bl	800088c <__aeabi_ddiv>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
        (x1 * cos(theta) - y1 * sin(theta)) * (x1 * cos(theta) - y1 * sin(theta)) / (minaxis * minaxis) +
 80013f8:	4640      	mov	r0, r8
 80013fa:	4649      	mov	r1, r9
 80013fc:	f7fe ff66 	bl	80002cc <__adddf3>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
    float ellipse_check =
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	f7ff fbee 	bl	8000be8 <__aeabi_d2f>
 800140c:	4603      	mov	r3, r0
 800140e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (-0.02f < ellipse_check && ellipse_check < 0.02f) {
 8001410:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001414:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001468 <calculateWheelSpeeds+0x340>
 8001418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001420:	dd26      	ble.n	8001470 <calculateWheelSpeeds+0x348>
 8001422:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001426:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800146c <calculateWheelSpeeds+0x344>
 800142a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800142e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001432:	d51d      	bpl.n	8001470 <calculateWheelSpeeds+0x348>
        wheel1 = wheel2 = wheel3 = 0;
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	62bb      	str	r3, [r7, #40]	@ 0x28
 800143a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
 800143e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001440:	623b      	str	r3, [r7, #32]
 8001442:	e0ad      	b.n	80015a0 <calculateWheelSpeeds+0x478>
 8001444:	f3af 8000 	nop.w
 8001448:	c083126f 	.word	0xc083126f
 800144c:	400921ca 	.word	0x400921ca
 8001450:	447a0000 	.word	0x447a0000
 8001454:	44fa0000 	.word	0x44fa0000
 8001458:	40668000 	.word	0x40668000
 800145c:	200000b4 	.word	0x200000b4
 8001460:	20000000 	.word	0x20000000
 8001464:	20000004 	.word	0x20000004
 8001468:	bca3d70a 	.word	0xbca3d70a
 800146c:	3ca3d70a 	.word	0x3ca3d70a
    } else {
        if (!((-3.4 < x1 && x1 < 3.4) && (-3.4 < y1 && y1 < 3.4))) {
 8001470:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001472:	f7ff f889 	bl	8000588 <__aeabi_f2d>
 8001476:	2301      	movs	r3, #1
 8001478:	461c      	mov	r4, r3
 800147a:	f20f 43a0 	addw	r3, pc, #1184	@ 0x4a0
 800147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001482:	f7ff fb69 	bl	8000b58 <__aeabi_dcmpgt>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <calculateWheelSpeeds+0x368>
 800148c:	2300      	movs	r3, #0
 800148e:	461c      	mov	r4, r3
 8001490:	b2e3      	uxtb	r3, r4
 8001492:	f083 0301 	eor.w	r3, r3, #1
 8001496:	b2db      	uxtb	r3, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	d141      	bne.n	8001520 <calculateWheelSpeeds+0x3f8>
 800149c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800149e:	f7ff f873 	bl	8000588 <__aeabi_f2d>
 80014a2:	2301      	movs	r3, #1
 80014a4:	461c      	mov	r4, r3
 80014a6:	f20f 437c 	addw	r3, pc, #1148	@ 0x47c
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	f7ff fb35 	bl	8000b1c <__aeabi_dcmplt>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <calculateWheelSpeeds+0x394>
 80014b8:	2300      	movs	r3, #0
 80014ba:	461c      	mov	r4, r3
 80014bc:	b2e3      	uxtb	r3, r4
 80014be:	f083 0301 	eor.w	r3, r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d12b      	bne.n	8001520 <calculateWheelSpeeds+0x3f8>
 80014c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80014ca:	f7ff f85d 	bl	8000588 <__aeabi_f2d>
 80014ce:	2301      	movs	r3, #1
 80014d0:	461c      	mov	r4, r3
 80014d2:	f20f 4348 	addw	r3, pc, #1096	@ 0x448
 80014d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014da:	f7ff fb3d 	bl	8000b58 <__aeabi_dcmpgt>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <calculateWheelSpeeds+0x3c0>
 80014e4:	2300      	movs	r3, #0
 80014e6:	461c      	mov	r4, r3
 80014e8:	b2e3      	uxtb	r3, r4
 80014ea:	f083 0301 	eor.w	r3, r3, #1
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d115      	bne.n	8001520 <calculateWheelSpeeds+0x3f8>
 80014f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80014f6:	f7ff f847 	bl	8000588 <__aeabi_f2d>
 80014fa:	2301      	movs	r3, #1
 80014fc:	461c      	mov	r4, r3
 80014fe:	f20f 4324 	addw	r3, pc, #1060	@ 0x424
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7ff fb09 	bl	8000b1c <__aeabi_dcmplt>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <calculateWheelSpeeds+0x3ec>
 8001510:	2300      	movs	r3, #0
 8001512:	461c      	mov	r4, r3
 8001514:	b2e3      	uxtb	r3, r4
 8001516:	f083 0301 	eor.w	r3, r3, #1
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d03f      	beq.n	80015a0 <calculateWheelSpeeds+0x478>
            float scale = 1.0 / ellipse_check;
 8001520:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001524:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800152c:	edc7 7a07 	vstr	s15, [r7, #28]
            x1 *= sqrt(scale);
 8001530:	69f8      	ldr	r0, [r7, #28]
 8001532:	f7ff f829 	bl	8000588 <__aeabi_f2d>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	ec43 2b10 	vmov	d0, r2, r3
 800153e:	f008 fdff 	bl	800a140 <sqrt>
 8001542:	ec55 4b10 	vmov	r4, r5, d0
 8001546:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001548:	f7ff f81e 	bl	8000588 <__aeabi_f2d>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4620      	mov	r0, r4
 8001552:	4629      	mov	r1, r5
 8001554:	f7ff f870 	bl	8000638 <__aeabi_dmul>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f7ff fb42 	bl	8000be8 <__aeabi_d2f>
 8001564:	4603      	mov	r3, r0
 8001566:	637b      	str	r3, [r7, #52]	@ 0x34
            y1 *= sqrt(scale);
 8001568:	69f8      	ldr	r0, [r7, #28]
 800156a:	f7ff f80d 	bl	8000588 <__aeabi_f2d>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	ec43 2b10 	vmov	d0, r2, r3
 8001576:	f008 fde3 	bl	800a140 <sqrt>
 800157a:	ec55 4b10 	vmov	r4, r5, d0
 800157e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001580:	f7ff f802 	bl	8000588 <__aeabi_f2d>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4620      	mov	r0, r4
 800158a:	4629      	mov	r1, r5
 800158c:	f7ff f854 	bl	8000638 <__aeabi_dmul>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4610      	mov	r0, r2
 8001596:	4619      	mov	r1, r3
 8001598:	f7ff fb26 	bl	8000be8 <__aeabi_d2f>
 800159c:	4603      	mov	r3, r0
 800159e:	633b      	str	r3, [r7, #48]	@ 0x30
        }
    }

    wheel1 = (((-6.5789 * cos(theta)) - (11.3951 * sin(theta))) * x1) +
 80015a0:	4bdd      	ldr	r3, [pc, #884]	@ (8001918 <calculateWheelSpeeds+0x7f0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ffef 	bl	8000588 <__aeabi_f2d>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	ec43 2b10 	vmov	d0, r2, r3
 80015b2:	f008 fdf1 	bl	800a198 <cos>
 80015b6:	ec51 0b10 	vmov	r0, r1, d0
 80015ba:	a3cb      	add	r3, pc, #812	@ (adr r3, 80018e8 <calculateWheelSpeeds+0x7c0>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7ff f83a 	bl	8000638 <__aeabi_dmul>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4614      	mov	r4, r2
 80015ca:	461d      	mov	r5, r3
 80015cc:	4bd2      	ldr	r3, [pc, #840]	@ (8001918 <calculateWheelSpeeds+0x7f0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ffd9 	bl	8000588 <__aeabi_f2d>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	ec43 2b10 	vmov	d0, r2, r3
 80015de:	f008 fe2f 	bl	800a240 <sin>
 80015e2:	ec51 0b10 	vmov	r0, r1, d0
 80015e6:	a3c2      	add	r3, pc, #776	@ (adr r3, 80018f0 <calculateWheelSpeeds+0x7c8>)
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	f7ff f824 	bl	8000638 <__aeabi_dmul>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4620      	mov	r0, r4
 80015f6:	4629      	mov	r1, r5
 80015f8:	f7fe fe66 	bl	80002c8 <__aeabi_dsub>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4614      	mov	r4, r2
 8001602:	461d      	mov	r5, r3
 8001604:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001606:	f7fe ffbf 	bl	8000588 <__aeabi_f2d>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4620      	mov	r0, r4
 8001610:	4629      	mov	r1, r5
 8001612:	f7ff f811 	bl	8000638 <__aeabi_dmul>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4614      	mov	r4, r2
 800161c:	461d      	mov	r5, r3
             (((-6.5789 * sin(theta)) + (11.3951 * cos(theta))) * y1) + (4.1092 * *r1);
 800161e:	4bbe      	ldr	r3, [pc, #760]	@ (8001918 <calculateWheelSpeeds+0x7f0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ffb0 	bl	8000588 <__aeabi_f2d>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	ec43 2b10 	vmov	d0, r2, r3
 8001630:	f008 fe06 	bl	800a240 <sin>
 8001634:	ec51 0b10 	vmov	r0, r1, d0
 8001638:	a3ab      	add	r3, pc, #684	@ (adr r3, 80018e8 <calculateWheelSpeeds+0x7c0>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7fe fffb 	bl	8000638 <__aeabi_dmul>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4690      	mov	r8, r2
 8001648:	4699      	mov	r9, r3
 800164a:	4bb3      	ldr	r3, [pc, #716]	@ (8001918 <calculateWheelSpeeds+0x7f0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe ff9a 	bl	8000588 <__aeabi_f2d>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	ec43 2b10 	vmov	d0, r2, r3
 800165c:	f008 fd9c 	bl	800a198 <cos>
 8001660:	ec51 0b10 	vmov	r0, r1, d0
 8001664:	a3a2      	add	r3, pc, #648	@ (adr r3, 80018f0 <calculateWheelSpeeds+0x7c8>)
 8001666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166a:	f7fe ffe5 	bl	8000638 <__aeabi_dmul>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4640      	mov	r0, r8
 8001674:	4649      	mov	r1, r9
 8001676:	f7fe fe29 	bl	80002cc <__adddf3>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4690      	mov	r8, r2
 8001680:	4699      	mov	r9, r3
 8001682:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001684:	f7fe ff80 	bl	8000588 <__aeabi_f2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4640      	mov	r0, r8
 800168e:	4649      	mov	r1, r9
 8001690:	f7fe ffd2 	bl	8000638 <__aeabi_dmul>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
    wheel1 = (((-6.5789 * cos(theta)) - (11.3951 * sin(theta))) * x1) +
 8001698:	4620      	mov	r0, r4
 800169a:	4629      	mov	r1, r5
 800169c:	f7fe fe16 	bl	80002cc <__adddf3>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4614      	mov	r4, r2
 80016a6:	461d      	mov	r5, r3
             (((-6.5789 * sin(theta)) + (11.3951 * cos(theta))) * y1) + (4.1092 * *r1);
 80016a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff6b 	bl	8000588 <__aeabi_f2d>
 80016b2:	a391      	add	r3, pc, #580	@ (adr r3, 80018f8 <calculateWheelSpeeds+0x7d0>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7fe ffbe 	bl	8000638 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4620      	mov	r0, r4
 80016c2:	4629      	mov	r1, r5
 80016c4:	f7fe fe02 	bl	80002cc <__adddf3>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
    wheel1 = (((-6.5789 * cos(theta)) - (11.3951 * sin(theta))) * x1) +
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff fa8a 	bl	8000be8 <__aeabi_d2f>
 80016d4:	4603      	mov	r3, r0
 80016d6:	623b      	str	r3, [r7, #32]

    wheel2 = (((11.39651 * sin(theta)) - (6.5789 * cos(theta))) * x1) +
 80016d8:	4b8f      	ldr	r3, [pc, #572]	@ (8001918 <calculateWheelSpeeds+0x7f0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe ff53 	bl	8000588 <__aeabi_f2d>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	ec43 2b10 	vmov	d0, r2, r3
 80016ea:	f008 fda9 	bl	800a240 <sin>
 80016ee:	ec51 0b10 	vmov	r0, r1, d0
 80016f2:	a383      	add	r3, pc, #524	@ (adr r3, 8001900 <calculateWheelSpeeds+0x7d8>)
 80016f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f8:	f7fe ff9e 	bl	8000638 <__aeabi_dmul>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4614      	mov	r4, r2
 8001702:	461d      	mov	r5, r3
 8001704:	4b84      	ldr	r3, [pc, #528]	@ (8001918 <calculateWheelSpeeds+0x7f0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe ff3d 	bl	8000588 <__aeabi_f2d>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	ec43 2b10 	vmov	d0, r2, r3
 8001716:	f008 fd3f 	bl	800a198 <cos>
 800171a:	ec51 0b10 	vmov	r0, r1, d0
 800171e:	a37a      	add	r3, pc, #488	@ (adr r3, 8001908 <calculateWheelSpeeds+0x7e0>)
 8001720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001724:	f7fe ff88 	bl	8000638 <__aeabi_dmul>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4620      	mov	r0, r4
 800172e:	4629      	mov	r1, r5
 8001730:	f7fe fdca 	bl	80002c8 <__aeabi_dsub>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4614      	mov	r4, r2
 800173a:	461d      	mov	r5, r3
 800173c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800173e:	f7fe ff23 	bl	8000588 <__aeabi_f2d>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4620      	mov	r0, r4
 8001748:	4629      	mov	r1, r5
 800174a:	f7fe ff75 	bl	8000638 <__aeabi_dmul>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4614      	mov	r4, r2
 8001754:	461d      	mov	r5, r3
             (((-6.5789 * sin(theta)) - (11.3951 * cos(theta))) * y1) + (4.1092 * *r1);
 8001756:	4b70      	ldr	r3, [pc, #448]	@ (8001918 <calculateWheelSpeeds+0x7f0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe ff14 	bl	8000588 <__aeabi_f2d>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	ec43 2b10 	vmov	d0, r2, r3
 8001768:	f008 fd6a 	bl	800a240 <sin>
 800176c:	ec51 0b10 	vmov	r0, r1, d0
 8001770:	a35d      	add	r3, pc, #372	@ (adr r3, 80018e8 <calculateWheelSpeeds+0x7c0>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	f7fe ff5f 	bl	8000638 <__aeabi_dmul>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4690      	mov	r8, r2
 8001780:	4699      	mov	r9, r3
 8001782:	4b65      	ldr	r3, [pc, #404]	@ (8001918 <calculateWheelSpeeds+0x7f0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fefe 	bl	8000588 <__aeabi_f2d>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	ec43 2b10 	vmov	d0, r2, r3
 8001794:	f008 fd00 	bl	800a198 <cos>
 8001798:	ec51 0b10 	vmov	r0, r1, d0
 800179c:	a354      	add	r3, pc, #336	@ (adr r3, 80018f0 <calculateWheelSpeeds+0x7c8>)
 800179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a2:	f7fe ff49 	bl	8000638 <__aeabi_dmul>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4640      	mov	r0, r8
 80017ac:	4649      	mov	r1, r9
 80017ae:	f7fe fd8b 	bl	80002c8 <__aeabi_dsub>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4690      	mov	r8, r2
 80017b8:	4699      	mov	r9, r3
 80017ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80017bc:	f7fe fee4 	bl	8000588 <__aeabi_f2d>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4640      	mov	r0, r8
 80017c6:	4649      	mov	r1, r9
 80017c8:	f7fe ff36 	bl	8000638 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
    wheel2 = (((11.39651 * sin(theta)) - (6.5789 * cos(theta))) * x1) +
 80017d0:	4620      	mov	r0, r4
 80017d2:	4629      	mov	r1, r5
 80017d4:	f7fe fd7a 	bl	80002cc <__adddf3>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4614      	mov	r4, r2
 80017de:	461d      	mov	r5, r3
             (((-6.5789 * sin(theta)) - (11.3951 * cos(theta))) * y1) + (4.1092 * *r1);
 80017e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fecf 	bl	8000588 <__aeabi_f2d>
 80017ea:	a343      	add	r3, pc, #268	@ (adr r3, 80018f8 <calculateWheelSpeeds+0x7d0>)
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	f7fe ff22 	bl	8000638 <__aeabi_dmul>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4620      	mov	r0, r4
 80017fa:	4629      	mov	r1, r5
 80017fc:	f7fe fd66 	bl	80002cc <__adddf3>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
    wheel2 = (((11.39651 * sin(theta)) - (6.5789 * cos(theta))) * x1) +
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff f9ee 	bl	8000be8 <__aeabi_d2f>
 800180c:	4603      	mov	r3, r0
 800180e:	627b      	str	r3, [r7, #36]	@ 0x24

    wheel3 = (13.1579 * cos(theta) * x1) + (13.1579 * sin(theta) * y1) + (4.1092 * *r1);
 8001810:	4b41      	ldr	r3, [pc, #260]	@ (8001918 <calculateWheelSpeeds+0x7f0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe feb7 	bl	8000588 <__aeabi_f2d>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	ec43 2b10 	vmov	d0, r2, r3
 8001822:	f008 fcb9 	bl	800a198 <cos>
 8001826:	ec51 0b10 	vmov	r0, r1, d0
 800182a:	a339      	add	r3, pc, #228	@ (adr r3, 8001910 <calculateWheelSpeeds+0x7e8>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7fe ff02 	bl	8000638 <__aeabi_dmul>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4614      	mov	r4, r2
 800183a:	461d      	mov	r5, r3
 800183c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800183e:	f7fe fea3 	bl	8000588 <__aeabi_f2d>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4620      	mov	r0, r4
 8001848:	4629      	mov	r1, r5
 800184a:	f7fe fef5 	bl	8000638 <__aeabi_dmul>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4614      	mov	r4, r2
 8001854:	461d      	mov	r5, r3
 8001856:	4b30      	ldr	r3, [pc, #192]	@ (8001918 <calculateWheelSpeeds+0x7f0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fe94 	bl	8000588 <__aeabi_f2d>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	ec43 2b10 	vmov	d0, r2, r3
 8001868:	f008 fcea 	bl	800a240 <sin>
 800186c:	ec51 0b10 	vmov	r0, r1, d0
 8001870:	a327      	add	r3, pc, #156	@ (adr r3, 8001910 <calculateWheelSpeeds+0x7e8>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	f7fe fedf 	bl	8000638 <__aeabi_dmul>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4690      	mov	r8, r2
 8001880:	4699      	mov	r9, r3
 8001882:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001884:	f7fe fe80 	bl	8000588 <__aeabi_f2d>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4640      	mov	r0, r8
 800188e:	4649      	mov	r1, r9
 8001890:	f7fe fed2 	bl	8000638 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4620      	mov	r0, r4
 800189a:	4629      	mov	r1, r5
 800189c:	f7fe fd16 	bl	80002cc <__adddf3>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4614      	mov	r4, r2
 80018a6:	461d      	mov	r5, r3
 80018a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fe6b 	bl	8000588 <__aeabi_f2d>
 80018b2:	a311      	add	r3, pc, #68	@ (adr r3, 80018f8 <calculateWheelSpeeds+0x7d0>)
 80018b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b8:	f7fe febe 	bl	8000638 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4620      	mov	r0, r4
 80018c2:	4629      	mov	r1, r5
 80018c4:	f7fe fd02 	bl	80002cc <__adddf3>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	f7ff f98a 	bl	8000be8 <__aeabi_d2f>
 80018d4:	4603      	mov	r3, r0
 80018d6:	62bb      	str	r3, [r7, #40]	@ 0x28

    *m1 = (int)mapValue(wheel1, -49, 49, -1000, 1000);
 80018d8:	ed9f 2a14 	vldr	s4, [pc, #80]	@ 800192c <calculateWheelSpeeds+0x804>
 80018dc:	eddf 1a14 	vldr	s3, [pc, #80]	@ 8001930 <calculateWheelSpeeds+0x808>
 80018e0:	e02c      	b.n	800193c <calculateWheelSpeeds+0x814>
 80018e2:	bf00      	nop
 80018e4:	f3af 8000 	nop.w
 80018e8:	295e9e1b 	.word	0x295e9e1b
 80018ec:	c01a50cb 	.word	0xc01a50cb
 80018f0:	8c154c98 	.word	0x8c154c98
 80018f4:	4026ca4a 	.word	0x4026ca4a
 80018f8:	1ff2e48f 	.word	0x1ff2e48f
 80018fc:	40106fd2 	.word	0x40106fd2
 8001900:	5bd512ec 	.word	0x5bd512ec
 8001904:	4026cb03 	.word	0x4026cb03
 8001908:	295e9e1b 	.word	0x295e9e1b
 800190c:	401a50cb 	.word	0x401a50cb
 8001910:	44d013a9 	.word	0x44d013a9
 8001914:	402a50d8 	.word	0x402a50d8
 8001918:	200000b4 	.word	0x200000b4
 800191c:	33333333 	.word	0x33333333
 8001920:	c00b3333 	.word	0xc00b3333
 8001924:	33333333 	.word	0x33333333
 8001928:	400b3333 	.word	0x400b3333
 800192c:	447a0000 	.word	0x447a0000
 8001930:	c47a0000 	.word	0xc47a0000
 8001934:	c2440000 	.word	0xc2440000
 8001938:	42440000 	.word	0x42440000
 800193c:	ed1f 1a02 	vldr	s2, [pc, #-8]	@ 8001938 <calculateWheelSpeeds+0x810>
 8001940:	ed5f 0a04 	vldr	s1, [pc, #-16]	@ 8001934 <calculateWheelSpeeds+0x80c>
 8001944:	ed97 0a08 	vldr	s0, [r7, #32]
 8001948:	f7ff fbbe 	bl	80010c8 <mapValue>
 800194c:	eef0 7a40 	vmov.f32	s15, s0
 8001950:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001954:	ee17 2a90 	vmov	r2, s15
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	601a      	str	r2, [r3, #0]
    *m2 = (int)mapValue(wheel2, -49, 49, -1000, 1000);
 800195c:	ed1f 2a0d 	vldr	s4, [pc, #-52]	@ 800192c <calculateWheelSpeeds+0x804>
 8001960:	ed5f 1a0d 	vldr	s3, [pc, #-52]	@ 8001930 <calculateWheelSpeeds+0x808>
 8001964:	ed1f 1a0c 	vldr	s2, [pc, #-48]	@ 8001938 <calculateWheelSpeeds+0x810>
 8001968:	ed5f 0a0e 	vldr	s1, [pc, #-56]	@ 8001934 <calculateWheelSpeeds+0x80c>
 800196c:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001970:	f7ff fbaa 	bl	80010c8 <mapValue>
 8001974:	eef0 7a40 	vmov.f32	s15, s0
 8001978:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800197c:	ee17 2a90 	vmov	r2, s15
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	601a      	str	r2, [r3, #0]
    *m3 = (int)mapValue(wheel3, -49, 49, -1000, 1000);
 8001984:	ed1f 2a17 	vldr	s4, [pc, #-92]	@ 800192c <calculateWheelSpeeds+0x804>
 8001988:	ed5f 1a17 	vldr	s3, [pc, #-92]	@ 8001930 <calculateWheelSpeeds+0x808>
 800198c:	ed1f 1a16 	vldr	s2, [pc, #-88]	@ 8001938 <calculateWheelSpeeds+0x810>
 8001990:	ed5f 0a18 	vldr	s1, [pc, #-96]	@ 8001934 <calculateWheelSpeeds+0x80c>
 8001994:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8001998:	f7ff fb96 	bl	80010c8 <mapValue>
 800199c:	eef0 7a40 	vmov.f32	s15, s0
 80019a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019a4:	ee17 2a90 	vmov	r2, s15
 80019a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019aa:	601a      	str	r2, [r3, #0]
}
 80019ac:	bf00      	nop
 80019ae:	3738      	adds	r7, #56	@ 0x38
 80019b0:	46bd      	mov	sp, r7
 80019b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019b6:	bf00      	nop

080019b8 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	4619      	mov	r1, r3
 80019c6:	2007      	movs	r0, #7
 80019c8:	f000 fa08 	bl	8001ddc <bno055_writeData>
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	4619      	mov	r1, r3
 80019e2:	203d      	movs	r0, #61	@ 0x3d
 80019e4:	f000 f9fa 	bl	8001ddc <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d103      	bne.n	80019f6 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 80019ee:	2013      	movs	r0, #19
 80019f0:	f000 f9e8 	bl	8001dc4 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 80019f4:	e002      	b.n	80019fc <bno055_setOperationMode+0x28>
    bno055_delay(7);
 80019f6:	2007      	movs	r0, #7
 80019f8:	f000 f9e4 	bl	8001dc4 <bno055_delay>
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f7ff ffe3 	bl	80019d4 <bno055_setOperationMode>
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001a12:	b580      	push	{r7, lr}
 8001a14:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001a16:	200c      	movs	r0, #12
 8001a18:	f7ff ffdc 	bl	80019d4 <bno055_setOperationMode>
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001a24:	2120      	movs	r1, #32
 8001a26:	203f      	movs	r0, #63	@ 0x3f
 8001a28:	f000 f9d8 	bl	8001ddc <bno055_writeData>
  bno055_delay(700);
 8001a2c:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001a30:	f000 f9c8 	bl	8001dc4 <bno055_delay>
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
  bno055_reset();
 8001a3e:	f7ff ffef 	bl	8001a20 <bno055_reset>

  uint8_t id = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001a46:	1dfb      	adds	r3, r7, #7
 8001a48:	2201      	movs	r2, #1
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f000 fa9f 	bl	8001f90 <bno055_readData>
  if (id != BNO055_ID) {
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	2ba0      	cmp	r3, #160	@ 0xa0
 8001a56:	d004      	beq.n	8001a62 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4809      	ldr	r0, [pc, #36]	@ (8001a84 <bno055_setup+0x4c>)
 8001a5e:	f007 f94d 	bl	8008cfc <iprintf>
  }
  bno055_setPage(0);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f7ff ffa8 	bl	80019b8 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8001a68:	2100      	movs	r1, #0
 8001a6a:	203f      	movs	r0, #63	@ 0x3f
 8001a6c:	f000 f9b6 	bl	8001ddc <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001a70:	f7ff ffc8 	bl	8001a04 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001a74:	200a      	movs	r0, #10
 8001a76:	f000 f9a5 	bl	8001dc4 <bno055_delay>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	0800c648 	.word	0x0800c648

08001a88 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001a88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a8c:	b09e      	sub	sp, #120	@ 0x78
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  bno055_setPage(0);
 8001a96:	2000      	movs	r0, #0
 8001a98:	f7ff ff8e 	bl	80019b8 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001aa0:	2b20      	cmp	r3, #32
 8001aa2:	d108      	bne.n	8001ab6 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001aa4:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001aac:	2208      	movs	r2, #8
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 fa6e 	bl	8001f90 <bno055_readData>
 8001ab4:	e007      	b.n	8001ac6 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001ab6:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001aba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001abe:	2206      	movs	r2, #6
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 fa65 	bl	8001f90 <bno055_readData>

  double scale = 1;
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	4b8e      	ldr	r3, [pc, #568]	@ (8001d04 <bno055_getVector+0x27c>)
 8001acc:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ad4:	2b0e      	cmp	r3, #14
 8001ad6:	d109      	bne.n	8001aec <bno055_getVector+0x64>
    scale = magScale;
 8001ad8:	4b8b      	ldr	r3, [pc, #556]	@ (8001d08 <bno055_getVector+0x280>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fd31 	bl	8000544 <__aeabi_ui2d>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001aea:	e03e      	b.n	8001b6a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8001aec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d007      	beq.n	8001b04 <bno055_getVector+0x7c>
 8001af4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001af8:	2b28      	cmp	r3, #40	@ 0x28
 8001afa:	d003      	beq.n	8001b04 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8001afc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b00:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b02:	d109      	bne.n	8001b18 <bno055_getVector+0x90>
    scale = accelScale;
 8001b04:	4b81      	ldr	r3, [pc, #516]	@ (8001d0c <bno055_getVector+0x284>)
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fd1b 	bl	8000544 <__aeabi_ui2d>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001b16:	e028      	b.n	8001b6a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001b18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b1c:	2b14      	cmp	r3, #20
 8001b1e:	d109      	bne.n	8001b34 <bno055_getVector+0xac>
    scale = angularRateScale;
 8001b20:	4b7b      	ldr	r3, [pc, #492]	@ (8001d10 <bno055_getVector+0x288>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fd0d 	bl	8000544 <__aeabi_ui2d>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001b32:	e01a      	b.n	8001b6a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001b34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b38:	2b1a      	cmp	r3, #26
 8001b3a:	d109      	bne.n	8001b50 <bno055_getVector+0xc8>
    scale = eulerScale;
 8001b3c:	4b75      	ldr	r3, [pc, #468]	@ (8001d14 <bno055_getVector+0x28c>)
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fcff 	bl	8000544 <__aeabi_ui2d>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8001b4e:	e00c      	b.n	8001b6a <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001b50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b54:	2b20      	cmp	r3, #32
 8001b56:	d108      	bne.n	8001b6a <bno055_getVector+0xe2>
    scale = quaScale;
 8001b58:	4b6f      	ldr	r3, [pc, #444]	@ (8001d18 <bno055_getVector+0x290>)
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fcf1 	bl	8000544 <__aeabi_ui2d>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8001b6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b6e:	2220      	movs	r2, #32
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f007 fa2c 	bl	8008fd0 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001b78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001b7c:	2b20      	cmp	r3, #32
 8001b7e:	d154      	bne.n	8001c2a <bno055_getVector+0x1a2>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001b80:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001b84:	b21b      	sxth	r3, r3
 8001b86:	021b      	lsls	r3, r3, #8
 8001b88:	b21a      	sxth	r2, r3
 8001b8a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001b8e:	b21b      	sxth	r3, r3
 8001b90:	4313      	orrs	r3, r2
 8001b92:	b21b      	sxth	r3, r3
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fce5 	bl	8000564 <__aeabi_i2d>
 8001b9a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001b9e:	f7fe fe75 	bl	800088c <__aeabi_ddiv>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001baa:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001bae:	b21b      	sxth	r3, r3
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	b21a      	sxth	r2, r3
 8001bb4:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001bb8:	b21b      	sxth	r3, r3
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fcd0 	bl	8000564 <__aeabi_i2d>
 8001bc4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001bc8:	f7fe fe60 	bl	800088c <__aeabi_ddiv>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001bd4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	021b      	lsls	r3, r3, #8
 8001bdc:	b21a      	sxth	r2, r3
 8001bde:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001be2:	b21b      	sxth	r3, r3
 8001be4:	4313      	orrs	r3, r2
 8001be6:	b21b      	sxth	r3, r3
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fcbb 	bl	8000564 <__aeabi_i2d>
 8001bee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001bf2:	f7fe fe4b 	bl	800088c <__aeabi_ddiv>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001bfe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	b21a      	sxth	r2, r3
 8001c08:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001c0c:	b21b      	sxth	r3, r3
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	b21b      	sxth	r3, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fca6 	bl	8000564 <__aeabi_i2d>
 8001c18:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c1c:	f7fe fe36 	bl	800088c <__aeabi_ddiv>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8001c28:	e03e      	b.n	8001ca8 <bno055_getVector+0x220>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001c2a:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001c2e:	b21b      	sxth	r3, r3
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	b21a      	sxth	r2, r3
 8001c34:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fc90 	bl	8000564 <__aeabi_i2d>
 8001c44:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c48:	f7fe fe20 	bl	800088c <__aeabi_ddiv>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001c54:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001c58:	b21b      	sxth	r3, r3
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	b21a      	sxth	r2, r3
 8001c5e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001c62:	b21b      	sxth	r3, r3
 8001c64:	4313      	orrs	r3, r2
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc7b 	bl	8000564 <__aeabi_i2d>
 8001c6e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c72:	f7fe fe0b 	bl	800088c <__aeabi_ddiv>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001c7e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001c82:	b21b      	sxth	r3, r3
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	b21a      	sxth	r2, r3
 8001c88:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001c8c:	b21b      	sxth	r3, r3
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	b21b      	sxth	r3, r3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fc66 	bl	8000564 <__aeabi_i2d>
 8001c98:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c9c:	f7fe fdf6 	bl	800088c <__aeabi_ddiv>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  }

  return xyz;
 8001ca8:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001cac:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 8001cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001cbc:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001cc0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001cc4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8001cc8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001ccc:	ec49 8b14 	vmov	d4, r8, r9
 8001cd0:	ec45 4b15 	vmov	d5, r4, r5
 8001cd4:	ec41 0b16 	vmov	d6, r0, r1
 8001cd8:	ec43 2b17 	vmov	d7, r2, r3
}
 8001cdc:	eeb0 0a44 	vmov.f32	s0, s8
 8001ce0:	eef0 0a64 	vmov.f32	s1, s9
 8001ce4:	eeb0 1a45 	vmov.f32	s2, s10
 8001ce8:	eef0 1a65 	vmov.f32	s3, s11
 8001cec:	eeb0 2a46 	vmov.f32	s4, s12
 8001cf0:	eef0 2a66 	vmov.f32	s5, s13
 8001cf4:	eeb0 3a47 	vmov.f32	s6, s14
 8001cf8:	eef0 3a67 	vmov.f32	s7, s15
 8001cfc:	3778      	adds	r7, #120	@ 0x78
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d04:	3ff00000 	.word	0x3ff00000
 8001d08:	2000000e 	.word	0x2000000e
 8001d0c:	20000008 	.word	0x20000008
 8001d10:	2000000a 	.word	0x2000000a
 8001d14:	2000000c 	.word	0x2000000c
 8001d18:	20000010 	.word	0x20000010

08001d1c <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8001d1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d20:	b090      	sub	sp, #64	@ 0x40
 8001d22:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8001d24:	201a      	movs	r0, #26
 8001d26:	f7ff feaf 	bl	8001a88 <bno055_getVector>
 8001d2a:	eeb0 4a40 	vmov.f32	s8, s0
 8001d2e:	eef0 4a60 	vmov.f32	s9, s1
 8001d32:	eeb0 5a41 	vmov.f32	s10, s2
 8001d36:	eef0 5a61 	vmov.f32	s11, s3
 8001d3a:	eeb0 6a42 	vmov.f32	s12, s4
 8001d3e:	eef0 6a62 	vmov.f32	s13, s5
 8001d42:	eeb0 7a43 	vmov.f32	s14, s6
 8001d46:	eef0 7a63 	vmov.f32	s15, s7
 8001d4a:	ed87 4b08 	vstr	d4, [r7, #32]
 8001d4e:	ed87 5b0a 	vstr	d5, [r7, #40]	@ 0x28
 8001d52:	ed87 6b0c 	vstr	d6, [r7, #48]	@ 0x30
 8001d56:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 8001d5a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d5e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001d62:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001d66:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001d6a:	ec49 8b14 	vmov	d4, r8, r9
 8001d6e:	ec45 4b15 	vmov	d5, r4, r5
 8001d72:	ec41 0b16 	vmov	d6, r0, r1
 8001d76:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d7a:	eeb0 0a44 	vmov.f32	s0, s8
 8001d7e:	eef0 0a64 	vmov.f32	s1, s9
 8001d82:	eeb0 1a45 	vmov.f32	s2, s10
 8001d86:	eef0 1a65 	vmov.f32	s3, s11
 8001d8a:	eeb0 2a46 	vmov.f32	s4, s12
 8001d8e:	eef0 2a66 	vmov.f32	s5, s13
 8001d92:	eeb0 3a47 	vmov.f32	s6, s14
 8001d96:	eef0 3a67 	vmov.f32	s7, s15
 8001d9a:	3740      	adds	r7, #64	@ 0x40
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001da4 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001dac:	4a04      	ldr	r2, [pc, #16]	@ (8001dc0 <bno055_assignI2C+0x1c>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6013      	str	r3, [r2, #0]
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	200000b8 	.word	0x200000b8

08001dc4 <bno055_delay>:

void bno055_delay(int time) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f002 f8d8 	bl	8003f84 <HAL_Delay>
#endif
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af02      	add	r7, sp, #8
 8001de2:	4603      	mov	r3, r0
 8001de4:	460a      	mov	r2, r1
 8001de6:	71fb      	strb	r3, [r7, #7]
 8001de8:	4613      	mov	r3, r2
 8001dea:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	733b      	strb	r3, [r7, #12]
 8001df0:	79bb      	ldrb	r3, [r7, #6]
 8001df2:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001df4:	4b53      	ldr	r3, [pc, #332]	@ (8001f44 <bno055_writeData+0x168>)
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	f107 020c 	add.w	r2, r7, #12
 8001dfc:	230a      	movs	r3, #10
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	2302      	movs	r3, #2
 8001e02:	2150      	movs	r1, #80	@ 0x50
 8001e04:	f002 fcfc 	bl	8004800 <HAL_I2C_Master_Transmit>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8092 	beq.w	8001f38 <bno055_writeData+0x15c>
    return;
  }

  if (status == HAL_ERROR) {
 8001e14:	7dfb      	ldrb	r3, [r7, #23]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d103      	bne.n	8001e22 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001e1a:	484b      	ldr	r0, [pc, #300]	@ (8001f48 <bno055_writeData+0x16c>)
 8001e1c:	f006 ffd6 	bl	8008dcc <puts>
 8001e20:	e012      	b.n	8001e48 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d103      	bne.n	8001e30 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001e28:	4848      	ldr	r0, [pc, #288]	@ (8001f4c <bno055_writeData+0x170>)
 8001e2a:	f006 ffcf 	bl	8008dcc <puts>
 8001e2e:	e00b      	b.n	8001e48 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d103      	bne.n	8001e3e <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001e36:	4846      	ldr	r0, [pc, #280]	@ (8001f50 <bno055_writeData+0x174>)
 8001e38:	f006 ffc8 	bl	8008dcc <puts>
 8001e3c:	e004      	b.n	8001e48 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001e3e:	7dfb      	ldrb	r3, [r7, #23]
 8001e40:	4619      	mov	r1, r3
 8001e42:	4844      	ldr	r0, [pc, #272]	@ (8001f54 <bno055_writeData+0x178>)
 8001e44:	f006 ff5a 	bl	8008cfc <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001e48:	4b3e      	ldr	r3, [pc, #248]	@ (8001f44 <bno055_writeData+0x168>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f002 fef3 	bl	8004c38 <HAL_I2C_GetError>
 8001e52:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d070      	beq.n	8001f3c <bno055_writeData+0x160>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d103      	bne.n	8001e68 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001e60:	483d      	ldr	r0, [pc, #244]	@ (8001f58 <bno055_writeData+0x17c>)
 8001e62:	f006 ffb3 	bl	8008dcc <puts>
 8001e66:	e021      	b.n	8001eac <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d103      	bne.n	8001e76 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001e6e:	483b      	ldr	r0, [pc, #236]	@ (8001f5c <bno055_writeData+0x180>)
 8001e70:	f006 ffac 	bl	8008dcc <puts>
 8001e74:	e01a      	b.n	8001eac <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d103      	bne.n	8001e84 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001e7c:	4838      	ldr	r0, [pc, #224]	@ (8001f60 <bno055_writeData+0x184>)
 8001e7e:	f006 ffa5 	bl	8008dcc <puts>
 8001e82:	e013      	b.n	8001eac <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d103      	bne.n	8001e92 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001e8a:	4836      	ldr	r0, [pc, #216]	@ (8001f64 <bno055_writeData+0x188>)
 8001e8c:	f006 ff9e 	bl	8008dcc <puts>
 8001e90:	e00c      	b.n	8001eac <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	2b10      	cmp	r3, #16
 8001e96:	d103      	bne.n	8001ea0 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001e98:	4833      	ldr	r0, [pc, #204]	@ (8001f68 <bno055_writeData+0x18c>)
 8001e9a:	f006 ff97 	bl	8008dcc <puts>
 8001e9e:	e005      	b.n	8001eac <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	2b20      	cmp	r3, #32
 8001ea4:	d102      	bne.n	8001eac <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001ea6:	4831      	ldr	r0, [pc, #196]	@ (8001f6c <bno055_writeData+0x190>)
 8001ea8:	f006 ff90 	bl	8008dcc <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001eac:	4b25      	ldr	r3, [pc, #148]	@ (8001f44 <bno055_writeData+0x168>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f002 feb3 	bl	8004c1c <HAL_I2C_GetState>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d103      	bne.n	8001ec8 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001ec0:	482b      	ldr	r0, [pc, #172]	@ (8001f70 <bno055_writeData+0x194>)
 8001ec2:	f006 ff83 	bl	8008dcc <puts>
 8001ec6:	e03a      	b.n	8001f3e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_READY) {
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	2b20      	cmp	r3, #32
 8001ecc:	d103      	bne.n	8001ed6 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001ece:	4828      	ldr	r0, [pc, #160]	@ (8001f70 <bno055_writeData+0x194>)
 8001ed0:	f006 ff7c 	bl	8008dcc <puts>
 8001ed4:	e033      	b.n	8001f3e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001ed6:	7bfb      	ldrb	r3, [r7, #15]
 8001ed8:	2b24      	cmp	r3, #36	@ 0x24
 8001eda:	d103      	bne.n	8001ee4 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001edc:	4825      	ldr	r0, [pc, #148]	@ (8001f74 <bno055_writeData+0x198>)
 8001ede:	f006 ff75 	bl	8008dcc <puts>
 8001ee2:	e02c      	b.n	8001f3e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	2b21      	cmp	r3, #33	@ 0x21
 8001ee8:	d103      	bne.n	8001ef2 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001eea:	4823      	ldr	r0, [pc, #140]	@ (8001f78 <bno055_writeData+0x19c>)
 8001eec:	f006 ff6e 	bl	8008dcc <puts>
 8001ef0:	e025      	b.n	8001f3e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	2b22      	cmp	r3, #34	@ 0x22
 8001ef6:	d103      	bne.n	8001f00 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001ef8:	4820      	ldr	r0, [pc, #128]	@ (8001f7c <bno055_writeData+0x1a0>)
 8001efa:	f006 ff67 	bl	8008dcc <puts>
 8001efe:	e01e      	b.n	8001f3e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	2b28      	cmp	r3, #40	@ 0x28
 8001f04:	d103      	bne.n	8001f0e <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001f06:	481e      	ldr	r0, [pc, #120]	@ (8001f80 <bno055_writeData+0x1a4>)
 8001f08:	f006 ff60 	bl	8008dcc <puts>
 8001f0c:	e017      	b.n	8001f3e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	2b29      	cmp	r3, #41	@ 0x29
 8001f12:	d103      	bne.n	8001f1c <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001f14:	481b      	ldr	r0, [pc, #108]	@ (8001f84 <bno055_writeData+0x1a8>)
 8001f16:	f006 ff59 	bl	8008dcc <puts>
 8001f1a:	e010      	b.n	8001f3e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f20:	d103      	bne.n	8001f2a <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001f22:	4819      	ldr	r0, [pc, #100]	@ (8001f88 <bno055_writeData+0x1ac>)
 8001f24:	f006 ff52 	bl	8008dcc <puts>
 8001f28:	e009      	b.n	8001f3e <bno055_writeData+0x162>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	2b60      	cmp	r3, #96	@ 0x60
 8001f2e:	d106      	bne.n	8001f3e <bno055_writeData+0x162>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001f30:	4816      	ldr	r0, [pc, #88]	@ (8001f8c <bno055_writeData+0x1b0>)
 8001f32:	f006 ff4b 	bl	8008dcc <puts>
 8001f36:	e002      	b.n	8001f3e <bno055_writeData+0x162>
    return;
 8001f38:	bf00      	nop
 8001f3a:	e000      	b.n	8001f3e <bno055_writeData+0x162>
    return;
 8001f3c:	bf00      	nop
//  } else if (state == HAL_I2C_STATE_ERROR) {
//    printf("HAL_I2C_STATE_ERROR\r\n");
//  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	200000b8 	.word	0x200000b8
 8001f48:	0800c684 	.word	0x0800c684
 8001f4c:	0800c6a8 	.word	0x0800c6a8
 8001f50:	0800c6d0 	.word	0x0800c6d0
 8001f54:	0800c6f4 	.word	0x0800c6f4
 8001f58:	0800c70c 	.word	0x0800c70c
 8001f5c:	0800c720 	.word	0x0800c720
 8001f60:	0800c734 	.word	0x0800c734
 8001f64:	0800c748 	.word	0x0800c748
 8001f68:	0800c75c 	.word	0x0800c75c
 8001f6c:	0800c770 	.word	0x0800c770
 8001f70:	0800c788 	.word	0x0800c788
 8001f74:	0800c7a0 	.word	0x0800c7a0
 8001f78:	0800c7b4 	.word	0x0800c7b4
 8001f7c:	0800c7cc 	.word	0x0800c7cc
 8001f80:	0800c7e4 	.word	0x0800c7e4
 8001f84:	0800c7fc 	.word	0x0800c7fc
 8001f88:	0800c81c 	.word	0x0800c81c
 8001f8c:	0800c83c 	.word	0x0800c83c

08001f90 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af02      	add	r7, sp, #8
 8001f96:	4603      	mov	r3, r0
 8001f98:	6039      	str	r1, [r7, #0]
 8001f9a:	71fb      	strb	r3, [r7, #7]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd0 <bno055_readData+0x40>)
 8001fa2:	6818      	ldr	r0, [r3, #0]
 8001fa4:	1dfa      	adds	r2, r7, #7
 8001fa6:	2364      	movs	r3, #100	@ 0x64
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2301      	movs	r3, #1
 8001fac:	2150      	movs	r1, #80	@ 0x50
 8001fae:	f002 fc27 	bl	8004800 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001fb2:	4b07      	ldr	r3, [pc, #28]	@ (8001fd0 <bno055_readData+0x40>)
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	79bb      	ldrb	r3, [r7, #6]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	2264      	movs	r2, #100	@ 0x64
 8001fbc:	9200      	str	r2, [sp, #0]
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	2150      	movs	r1, #80	@ 0x50
 8001fc2:	f002 fd35 	bl	8004a30 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	200000b8 	.word	0x200000b8

08001fd4 <sendContinuousRangingCommand>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void sendContinuousRangingCommand(UART_HandleTypeDef *huart) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
    uint8_t startRangingCmd[] = HPS166_CMD_START_RANGING;
 8001fdc:	4a08      	ldr	r2, [pc, #32]	@ (8002000 <sendContinuousRangingCommand+0x2c>)
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fe4:	c303      	stmia	r3!, {r0, r1}
 8001fe6:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(huart, startRangingCmd, sizeof(startRangingCmd), HAL_MAX_DELAY);
 8001fe8:	f107 010c 	add.w	r1, r7, #12
 8001fec:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff0:	220a      	movs	r2, #10
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f005 fa7c 	bl	80074f0 <HAL_UART_Transmit>
}
 8001ff8:	bf00      	nop
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	0800c854 	.word	0x0800c854

08002004 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
	if (huart == &huart1 && Size == HPS166_RESPONSE_SIZE && response1[0] == RESPONSE_HEADER) {
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a36      	ldr	r2, [pc, #216]	@ (80020ec <HAL_UARTEx_RxEventCallback+0xe8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d117      	bne.n	8002048 <HAL_UARTEx_RxEventCallback+0x44>
 8002018:	887b      	ldrh	r3, [r7, #2]
 800201a:	2b0f      	cmp	r3, #15
 800201c:	d114      	bne.n	8002048 <HAL_UARTEx_RxEventCallback+0x44>
 800201e:	4b34      	ldr	r3, [pc, #208]	@ (80020f0 <HAL_UARTEx_RxEventCallback+0xec>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b0a      	cmp	r3, #10
 8002024:	d110      	bne.n	8002048 <HAL_UARTEx_RxEventCallback+0x44>
	        data_ready1 = 1;
 8002026:	4b33      	ldr	r3, [pc, #204]	@ (80020f4 <HAL_UARTEx_RxEventCallback+0xf0>)
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
	        processResponse(huart, response1, &distance_mm1, &distance_meters1);
 800202c:	4b32      	ldr	r3, [pc, #200]	@ (80020f8 <HAL_UARTEx_RxEventCallback+0xf4>)
 800202e:	4a33      	ldr	r2, [pc, #204]	@ (80020fc <HAL_UARTEx_RxEventCallback+0xf8>)
 8002030:	492f      	ldr	r1, [pc, #188]	@ (80020f0 <HAL_UARTEx_RxEventCallback+0xec>)
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f91e 	bl	8002274 <processResponse>
	        data_ready1 = 0;
 8002038:	4b2e      	ldr	r3, [pc, #184]	@ (80020f4 <HAL_UARTEx_RxEventCallback+0xf0>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
	        restartReception(&huart1, response1);
 800203e:	492c      	ldr	r1, [pc, #176]	@ (80020f0 <HAL_UARTEx_RxEventCallback+0xec>)
 8002040:	482a      	ldr	r0, [pc, #168]	@ (80020ec <HAL_UARTEx_RxEventCallback+0xe8>)
 8002042:	f000 f947 	bl	80022d4 <restartReception>
 8002046:	e04c      	b.n	80020e2 <HAL_UARTEx_RxEventCallback+0xde>
	    } else if (huart == &huart4 && Size == HPS166_RESPONSE_SIZE && response2[0] == RESPONSE_HEADER) {
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a2d      	ldr	r2, [pc, #180]	@ (8002100 <HAL_UARTEx_RxEventCallback+0xfc>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d117      	bne.n	8002080 <HAL_UARTEx_RxEventCallback+0x7c>
 8002050:	887b      	ldrh	r3, [r7, #2]
 8002052:	2b0f      	cmp	r3, #15
 8002054:	d114      	bne.n	8002080 <HAL_UARTEx_RxEventCallback+0x7c>
 8002056:	4b2b      	ldr	r3, [pc, #172]	@ (8002104 <HAL_UARTEx_RxEventCallback+0x100>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b0a      	cmp	r3, #10
 800205c:	d110      	bne.n	8002080 <HAL_UARTEx_RxEventCallback+0x7c>
	        data_ready2 = 1;
 800205e:	4b2a      	ldr	r3, [pc, #168]	@ (8002108 <HAL_UARTEx_RxEventCallback+0x104>)
 8002060:	2201      	movs	r2, #1
 8002062:	701a      	strb	r2, [r3, #0]
	        processResponse(huart, response2, &distance_mm2, &distance_meters2);
 8002064:	4b29      	ldr	r3, [pc, #164]	@ (800210c <HAL_UARTEx_RxEventCallback+0x108>)
 8002066:	4a2a      	ldr	r2, [pc, #168]	@ (8002110 <HAL_UARTEx_RxEventCallback+0x10c>)
 8002068:	4926      	ldr	r1, [pc, #152]	@ (8002104 <HAL_UARTEx_RxEventCallback+0x100>)
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f902 	bl	8002274 <processResponse>
	        data_ready2 = 0;
 8002070:	4b25      	ldr	r3, [pc, #148]	@ (8002108 <HAL_UARTEx_RxEventCallback+0x104>)
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
	        restartReception(&huart4, response2);
 8002076:	4923      	ldr	r1, [pc, #140]	@ (8002104 <HAL_UARTEx_RxEventCallback+0x100>)
 8002078:	4821      	ldr	r0, [pc, #132]	@ (8002100 <HAL_UARTEx_RxEventCallback+0xfc>)
 800207a:	f000 f92b 	bl	80022d4 <restartReception>
 800207e:	e030      	b.n	80020e2 <HAL_UARTEx_RxEventCallback+0xde>
	    } else if (huart == &huart7 && Size == HPS166_RESPONSE_SIZE && response3[0] == RESPONSE_HEADER) {
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a24      	ldr	r2, [pc, #144]	@ (8002114 <HAL_UARTEx_RxEventCallback+0x110>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d117      	bne.n	80020b8 <HAL_UARTEx_RxEventCallback+0xb4>
 8002088:	887b      	ldrh	r3, [r7, #2]
 800208a:	2b0f      	cmp	r3, #15
 800208c:	d114      	bne.n	80020b8 <HAL_UARTEx_RxEventCallback+0xb4>
 800208e:	4b22      	ldr	r3, [pc, #136]	@ (8002118 <HAL_UARTEx_RxEventCallback+0x114>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b0a      	cmp	r3, #10
 8002094:	d110      	bne.n	80020b8 <HAL_UARTEx_RxEventCallback+0xb4>
	        data_ready3 = 1;
 8002096:	4b21      	ldr	r3, [pc, #132]	@ (800211c <HAL_UARTEx_RxEventCallback+0x118>)
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]
	        processResponse(huart, response3, &distance_mm3, &distance_meters3);
 800209c:	4b20      	ldr	r3, [pc, #128]	@ (8002120 <HAL_UARTEx_RxEventCallback+0x11c>)
 800209e:	4a21      	ldr	r2, [pc, #132]	@ (8002124 <HAL_UARTEx_RxEventCallback+0x120>)
 80020a0:	491d      	ldr	r1, [pc, #116]	@ (8002118 <HAL_UARTEx_RxEventCallback+0x114>)
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f8e6 	bl	8002274 <processResponse>
	        data_ready3 = 0;
 80020a8:	4b1c      	ldr	r3, [pc, #112]	@ (800211c <HAL_UARTEx_RxEventCallback+0x118>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
	        restartReception(&huart7, response3);
 80020ae:	491a      	ldr	r1, [pc, #104]	@ (8002118 <HAL_UARTEx_RxEventCallback+0x114>)
 80020b0:	4818      	ldr	r0, [pc, #96]	@ (8002114 <HAL_UARTEx_RxEventCallback+0x110>)
 80020b2:	f000 f90f 	bl	80022d4 <restartReception>
 80020b6:	e014      	b.n	80020e2 <HAL_UARTEx_RxEventCallback+0xde>
	    } else{
	    	buf_size = Size;
 80020b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002128 <HAL_UARTEx_RxEventCallback+0x124>)
 80020ba:	887b      	ldrh	r3, [r7, #2]
 80020bc:	8013      	strh	r3, [r2, #0]
	    	RX_BUFFER[buf_size] = '\0';
 80020be:	4b1a      	ldr	r3, [pc, #104]	@ (8002128 <HAL_UARTEx_RxEventCallback+0x124>)
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	4b19      	ldr	r3, [pc, #100]	@ (800212c <HAL_UARTEx_RxEventCallback+0x128>)
 80020c6:	2100      	movs	r1, #0
 80020c8:	5499      	strb	r1, [r3, r2]
	    	parseData(RX_BUFFER, buf_size);
 80020ca:	4b17      	ldr	r3, [pc, #92]	@ (8002128 <HAL_UARTEx_RxEventCallback+0x124>)
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	4619      	mov	r1, r3
 80020d0:	4816      	ldr	r0, [pc, #88]	@ (800212c <HAL_UARTEx_RxEventCallback+0x128>)
 80020d2:	f000 f82d 	bl	8002130 <parseData>
	    	HAL_UARTEx_ReceiveToIdle_IT(huart, RX_BUFFER, 32);
 80020d6:	2220      	movs	r2, #32
 80020d8:	4914      	ldr	r1, [pc, #80]	@ (800212c <HAL_UARTEx_RxEventCallback+0x128>)
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f006 fc74 	bl	80089c8 <HAL_UARTEx_ReceiveToIdle_IT>
	    }
}
 80020e0:	bf00      	nop
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200003d8 	.word	0x200003d8
 80020f0:	20000500 	.word	0x20000500
 80020f4:	2000052f 	.word	0x2000052f
 80020f8:	20000538 	.word	0x20000538
 80020fc:	20000532 	.word	0x20000532
 8002100:	20000240 	.word	0x20000240
 8002104:	20000510 	.word	0x20000510
 8002108:	20000530 	.word	0x20000530
 800210c:	2000053c 	.word	0x2000053c
 8002110:	20000534 	.word	0x20000534
 8002114:	200002c8 	.word	0x200002c8
 8002118:	20000520 	.word	0x20000520
 800211c:	20000531 	.word	0x20000531
 8002120:	20000540 	.word	0x20000540
 8002124:	20000536 	.word	0x20000536
 8002128:	20000484 	.word	0x20000484
 800212c:	20000464 	.word	0x20000464

08002130 <parseData>:

void parseData(uint8_t *buffer, uint16_t size)
{
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b08b      	sub	sp, #44	@ 0x2c
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
	char *token;
	int values[6]; // Array to hold parsed integers
	int index = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	623b      	str	r3, [r7, #32]

	// Tokenize the buffer using comma as a delimiter
	token = strtok((char *)buffer, ",");
 8002140:	491a      	ldr	r1, [pc, #104]	@ (80021ac <parseData+0x7c>)
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f006 ff4c 	bl	8008fe0 <strtok>
 8002148:	6278      	str	r0, [r7, #36]	@ 0x24
	while (token != NULL && index < 6)
 800214a:	e010      	b.n	800216e <parseData+0x3e>
	{
		values[index++] = atoi(token);
 800214c:	6a3c      	ldr	r4, [r7, #32]
 800214e:	1c63      	adds	r3, r4, #1
 8002150:	623b      	str	r3, [r7, #32]
 8002152:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002154:	f006 fc88 	bl	8008a68 <atoi>
 8002158:	4602      	mov	r2, r0
 800215a:	00a3      	lsls	r3, r4, #2
 800215c:	3328      	adds	r3, #40	@ 0x28
 800215e:	443b      	add	r3, r7
 8002160:	f843 2c20 	str.w	r2, [r3, #-32]
		token = strtok(NULL, ",");
 8002164:	4911      	ldr	r1, [pc, #68]	@ (80021ac <parseData+0x7c>)
 8002166:	2000      	movs	r0, #0
 8002168:	f006 ff3a 	bl	8008fe0 <strtok>
 800216c:	6278      	str	r0, [r7, #36]	@ 0x24
	while (token != NULL && index < 6)
 800216e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <parseData+0x4a>
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	2b05      	cmp	r3, #5
 8002178:	dde8      	ble.n	800214c <parseData+0x1c>
	}

	// Assign values to corresponding variables (ensure the order matches)
	if (index >= 6) // Ensure enough data is received
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	2b05      	cmp	r3, #5
 800217e:	dd11      	ble.n	80021a4 <parseData+0x74>
	{
		dirx = values[0];
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	4a0b      	ldr	r2, [pc, #44]	@ (80021b0 <parseData+0x80>)
 8002184:	6013      	str	r3, [r2, #0]
		diry = values[1];
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4a0a      	ldr	r2, [pc, #40]	@ (80021b4 <parseData+0x84>)
 800218a:	6013      	str	r3, [r2, #0]
		basketbtn = values[2];
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <parseData+0x88>)
 8002190:	6013      	str	r3, [r2, #0]
		shootbtn = values[3];
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	4a09      	ldr	r2, [pc, #36]	@ (80021bc <parseData+0x8c>)
 8002196:	6013      	str	r3, [r2, #0]
		passbtn = values[4];
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	4a09      	ldr	r2, [pc, #36]	@ (80021c0 <parseData+0x90>)
 800219c:	6013      	str	r3, [r2, #0]
		dribbleturnbtn = values[5];
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	4a08      	ldr	r2, [pc, #32]	@ (80021c4 <parseData+0x94>)
 80021a2:	6013      	str	r3, [r2, #0]
//		xtraRotate = values[6];
//		broadcastAngle = values[7];

	}
}
 80021a4:	bf00      	nop
 80021a6:	372c      	adds	r7, #44	@ 0x2c
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd90      	pop	{r4, r7, pc}
 80021ac:	0800c860 	.word	0x0800c860
 80021b0:	20000488 	.word	0x20000488
 80021b4:	2000048c 	.word	0x2000048c
 80021b8:	20000498 	.word	0x20000498
 80021bc:	20000494 	.word	0x20000494
 80021c0:	20000490 	.word	0x20000490
 80021c4:	2000049c 	.word	0x2000049c

080021c8 <get_yaw>:

float get_yaw(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	@ 0x28
 80021cc:	af00      	add	r7, sp, #0
    bno055_vector_t euler = bno055_getVectorEuler();
 80021ce:	f7ff fda5 	bl	8001d1c <bno055_getVectorEuler>
 80021d2:	eeb0 4a40 	vmov.f32	s8, s0
 80021d6:	eef0 4a60 	vmov.f32	s9, s1
 80021da:	eeb0 5a41 	vmov.f32	s10, s2
 80021de:	eef0 5a61 	vmov.f32	s11, s3
 80021e2:	eeb0 6a42 	vmov.f32	s12, s4
 80021e6:	eef0 6a62 	vmov.f32	s13, s5
 80021ea:	eeb0 7a43 	vmov.f32	s14, s6
 80021ee:	eef0 7a63 	vmov.f32	s15, s7
 80021f2:	ed87 4b00 	vstr	d4, [r7]
 80021f6:	ed87 5b02 	vstr	d5, [r7, #8]
 80021fa:	ed87 6b04 	vstr	d6, [r7, #16]
 80021fe:	ed87 7b06 	vstr	d7, [r7, #24]
    float yaw = euler.x;
 8002202:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002206:	4610      	mov	r0, r2
 8002208:	4619      	mov	r1, r3
 800220a:	f7fe fced 	bl	8000be8 <__aeabi_d2f>
 800220e:	4603      	mov	r3, r0
 8002210:	627b      	str	r3, [r7, #36]	@ 0x24

    if (yaw > 180) yaw -= 360;
 8002212:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002216:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002268 <get_yaw+0xa0>
 800221a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800221e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002222:	dd07      	ble.n	8002234 <get_yaw+0x6c>
 8002224:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002228:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800226c <get_yaw+0xa4>
 800222c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002230:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if (yaw < -180) yaw += 360;
 8002234:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002238:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002270 <get_yaw+0xa8>
 800223c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002244:	d507      	bpl.n	8002256 <get_yaw+0x8e>
 8002246:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800224a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800226c <get_yaw+0xa4>
 800224e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002252:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return yaw;
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002258:	ee07 3a90 	vmov	s15, r3
}
 800225c:	eeb0 0a67 	vmov.f32	s0, s15
 8002260:	3728      	adds	r7, #40	@ 0x28
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	43340000 	.word	0x43340000
 800226c:	43b40000 	.word	0x43b40000
 8002270:	c3340000 	.word	0xc3340000

08002274 <processResponse>:

void processResponse(UART_HandleTypeDef *huart, uint8_t *response, uint16_t *distance_mm, float *distance_meters) {
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
 8002280:	603b      	str	r3, [r7, #0]
    *distance_mm = (response[5] << 8) | response[6];
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	3305      	adds	r3, #5
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	b21b      	sxth	r3, r3
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	b21a      	sxth	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	3306      	adds	r3, #6
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b21b      	sxth	r3, r3
 8002296:	4313      	orrs	r3, r2
 8002298:	b21b      	sxth	r3, r3
 800229a:	b29a      	uxth	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	801a      	strh	r2, [r3, #0]
    *distance_meters = *distance_mm / 1000.0;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fe f95d 	bl	8000564 <__aeabi_i2d>
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	4b08      	ldr	r3, [pc, #32]	@ (80022d0 <processResponse+0x5c>)
 80022b0:	f7fe faec 	bl	800088c <__aeabi_ddiv>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4610      	mov	r0, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	f7fe fc94 	bl	8000be8 <__aeabi_d2f>
 80022c0:	4602      	mov	r2, r0
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	601a      	str	r2, [r3, #0]
}
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	408f4000 	.word	0x408f4000

080022d4 <restartReception>:

void restartReception(UART_HandleTypeDef *huart, uint8_t *response) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
    HAL_UARTEx_ReceiveToIdle_IT(huart, response, HPS166_RESPONSE_SIZE);
 80022de:	220f      	movs	r2, #15
 80022e0:	6839      	ldr	r1, [r7, #0]
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f006 fb70 	bl	80089c8 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022f0:	b5b0      	push	{r4, r5, r7, lr}
 80022f2:	b0ae      	sub	sp, #184	@ 0xb8
 80022f4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022f6:	f001 fde8 	bl	8003eca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022fa:	f000 fc0d 	bl	8002b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022fe:	f001 f827 	bl	8003350 <MX_GPIO_Init>
  MX_TIM1_Init();
 8002302:	f000 fcb5 	bl	8002c70 <MX_TIM1_Init>
  MX_UART4_Init();
 8002306:	f000 ff63 	bl	80031d0 <MX_UART4_Init>
  MX_UART7_Init();
 800230a:	f000 ff91 	bl	8003230 <MX_UART7_Init>
  MX_UART8_Init();
 800230e:	f000 ffbf 	bl	8003290 <MX_UART8_Init>
  MX_USART1_UART_Init();
 8002312:	f000 ffed 	bl	80032f0 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8002316:	f000 fc6b 	bl	8002bf0 <MX_I2C2_Init>
  MX_TIM8_Init();
 800231a:	f000 fe89 	bl	8003030 <MX_TIM8_Init>
  MX_TIM2_Init();
 800231e:	f000 fd77 	bl	8002e10 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002322:	f000 fe0d 	bl	8002f40 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart8, RX_BUFFER, 32);
 8002326:	2220      	movs	r2, #32
 8002328:	49a9      	ldr	r1, [pc, #676]	@ (80025d0 <main+0x2e0>)
 800232a:	48aa      	ldr	r0, [pc, #680]	@ (80025d4 <main+0x2e4>)
 800232c:	f006 fb4c 	bl	80089c8 <HAL_UARTEx_ReceiveToIdle_IT>

  restartReception(&huart1, response1);
 8002330:	49a9      	ldr	r1, [pc, #676]	@ (80025d8 <main+0x2e8>)
 8002332:	48aa      	ldr	r0, [pc, #680]	@ (80025dc <main+0x2ec>)
 8002334:	f7ff ffce 	bl	80022d4 <restartReception>
  restartReception(&huart4, response2);
 8002338:	49a9      	ldr	r1, [pc, #676]	@ (80025e0 <main+0x2f0>)
 800233a:	48aa      	ldr	r0, [pc, #680]	@ (80025e4 <main+0x2f4>)
 800233c:	f7ff ffca 	bl	80022d4 <restartReception>
  restartReception(&huart7, response3);
 8002340:	49a9      	ldr	r1, [pc, #676]	@ (80025e8 <main+0x2f8>)
 8002342:	48aa      	ldr	r0, [pc, #680]	@ (80025ec <main+0x2fc>)
 8002344:	f7ff ffc6 	bl	80022d4 <restartReception>

  sendContinuousRangingCommand(&huart1);
 8002348:	48a4      	ldr	r0, [pc, #656]	@ (80025dc <main+0x2ec>)
 800234a:	f7ff fe43 	bl	8001fd4 <sendContinuousRangingCommand>
  sendContinuousRangingCommand(&huart4);
 800234e:	48a5      	ldr	r0, [pc, #660]	@ (80025e4 <main+0x2f4>)
 8002350:	f7ff fe40 	bl	8001fd4 <sendContinuousRangingCommand>
  sendContinuousRangingCommand(&huart7);
 8002354:	48a5      	ldr	r0, [pc, #660]	@ (80025ec <main+0x2fc>)
 8002356:	f7ff fe3d 	bl	8001fd4 <sendContinuousRangingCommand>

  bno055_assignI2C(&hi2c2);
 800235a:	48a5      	ldr	r0, [pc, #660]	@ (80025f0 <main+0x300>)
 800235c:	f7ff fd22 	bl	8001da4 <bno055_assignI2C>
  bno055_setup();
 8002360:	f7ff fb6a 	bl	8001a38 <bno055_setup>
  bno055_setOperationModeNDOF();
 8002364:	f7ff fb55 	bl	8001a12 <bno055_setOperationModeNDOF>
  CytronMotor_t shooterM2;

  CytronMotor_t tandomM1;
  CytronMotor_t tandomM2;

  CytronMotor_Init(&motor1, &htim8, TIM_CHANNEL_4, GPIOF, GPIO_PIN_14);
 8002368:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 800236c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	4ba0      	ldr	r3, [pc, #640]	@ (80025f4 <main+0x304>)
 8002374:	220c      	movs	r2, #12
 8002376:	49a0      	ldr	r1, [pc, #640]	@ (80025f8 <main+0x308>)
 8002378:	f7fe fe1c 	bl	8000fb4 <CytronMotor_Init>
  CytronMotor_Init(&motor2, &htim8, TIM_CHANNEL_3, GPIOF, GPIO_PIN_3);
 800237c:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8002380:	2308      	movs	r3, #8
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	4b9b      	ldr	r3, [pc, #620]	@ (80025f4 <main+0x304>)
 8002386:	2208      	movs	r2, #8
 8002388:	499b      	ldr	r1, [pc, #620]	@ (80025f8 <main+0x308>)
 800238a:	f7fe fe13 	bl	8000fb4 <CytronMotor_Init>
  CytronMotor_Init(&motor3, &htim8, TIM_CHANNEL_1, GPIOF, GPIO_PIN_15);
 800238e:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8002392:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	4b96      	ldr	r3, [pc, #600]	@ (80025f4 <main+0x304>)
 800239a:	2200      	movs	r2, #0
 800239c:	4996      	ldr	r1, [pc, #600]	@ (80025f8 <main+0x308>)
 800239e:	f7fe fe09 	bl	8000fb4 <CytronMotor_Init>
  CytronMotor_Init(&motor4, &htim8, TIM_CHANNEL_2, GPIOF, GPIO_PIN_13);
 80023a2:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80023a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	4b91      	ldr	r3, [pc, #580]	@ (80025f4 <main+0x304>)
 80023ae:	2204      	movs	r2, #4
 80023b0:	4991      	ldr	r1, [pc, #580]	@ (80025f8 <main+0x308>)
 80023b2:	f7fe fdff 	bl	8000fb4 <CytronMotor_Init>

  CytronMotor_Init(&shooterM1, &htim1, TIM_CHANNEL_4, GPIOF, GPIO_PIN_11);
 80023b6:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80023ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	4b8c      	ldr	r3, [pc, #560]	@ (80025f4 <main+0x304>)
 80023c2:	220c      	movs	r2, #12
 80023c4:	498d      	ldr	r1, [pc, #564]	@ (80025fc <main+0x30c>)
 80023c6:	f7fe fdf5 	bl	8000fb4 <CytronMotor_Init>
  CytronMotor_Init(&shooterM2, &htim1, TIM_CHANNEL_1, GPIOF, GPIO_PIN_12);
 80023ca:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80023ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	4b87      	ldr	r3, [pc, #540]	@ (80025f4 <main+0x304>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	4988      	ldr	r1, [pc, #544]	@ (80025fc <main+0x30c>)
 80023da:	f7fe fdeb 	bl	8000fb4 <CytronMotor_Init>

  CytronMotor_Init(&tandomM1, &htim1, TIM_CHANNEL_3, GPIOG, GPIO_PIN_5);
 80023de:	f107 0018 	add.w	r0, r7, #24
 80023e2:	2320      	movs	r3, #32
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	4b86      	ldr	r3, [pc, #536]	@ (8002600 <main+0x310>)
 80023e8:	2208      	movs	r2, #8
 80023ea:	4984      	ldr	r1, [pc, #528]	@ (80025fc <main+0x30c>)
 80023ec:	f7fe fde2 	bl	8000fb4 <CytronMotor_Init>
  CytronMotor_Init(&tandomM2, &htim1, TIM_CHANNEL_2, GPIOG, GPIO_PIN_8);
 80023f0:	f107 0008 	add.w	r0, r7, #8
 80023f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	4b81      	ldr	r3, [pc, #516]	@ (8002600 <main+0x310>)
 80023fc:	2204      	movs	r2, #4
 80023fe:	497f      	ldr	r1, [pc, #508]	@ (80025fc <main+0x30c>)
 8002400:	f7fe fdd8 	bl	8000fb4 <CytronMotor_Init>

  Servo_t fatak;
  Servo_Init(&fatak, &htim2, TIM_CHANNEL_1);
 8002404:	463b      	mov	r3, r7
 8002406:	2200      	movs	r2, #0
 8002408:	497e      	ldr	r1, [pc, #504]	@ (8002604 <main+0x314>)
 800240a:	4618      	mov	r0, r3
 800240c:	f001 f880 	bl	8003510 <Servo_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initial_heading_offset = get_yaw(); // Set target angle as current angle
 8002410:	f7ff feda 	bl	80021c8 <get_yaw>
 8002414:	eef0 7a40 	vmov.f32	s15, s0
 8002418:	4b7b      	ldr	r3, [pc, #492]	@ (8002608 <main+0x318>)
 800241a:	edc3 7a00 	vstr	s15, [r3]
  target_heading = 0.0; // start at zero relative heading
 800241e:	4b7b      	ldr	r3, [pc, #492]	@ (800260c <main+0x31c>)
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
  degree = target_heading;
 8002426:	4b79      	ldr	r3, [pc, #484]	@ (800260c <main+0x31c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a79      	ldr	r2, [pc, #484]	@ (8002610 <main+0x320>)
 800242c:	6013      	str	r3, [r2, #0]
  imu_initialized = true;
 800242e:	4b79      	ldr	r3, [pc, #484]	@ (8002614 <main+0x324>)
 8002430:	2201      	movs	r2, #1
 8002432:	701a      	strb	r2, [r3, #0]
//  CytronMotor_Speed(&shooterM1, -800);
//  CytronMotor_Speed(&shooterM2, 960);
//  HAL_Delay(3000);
//  CytronMotor_Speed(&shooterM1, 0);
//  CytronMotor_Speed(&shooterM2, 0);
Servo_SetAngle(&fatak, 90);   // Move to 90°
 8002434:	463b      	mov	r3, r7
 8002436:	215a      	movs	r1, #90	@ 0x5a
 8002438:	4618      	mov	r0, r3
 800243a:	f001 f87d 	bl	8003538 <Servo_SetAngle>
  while (1)
  {


	HAL_Delay(100);  // or timer-based update
 800243e:	2064      	movs	r0, #100	@ 0x64
 8002440:	f001 fda0 	bl	8003f84 <HAL_Delay>

  	sprintf(MSG, "%d,%d\n",distance_mm3,distance_mm2);
 8002444:	4b74      	ldr	r3, [pc, #464]	@ (8002618 <main+0x328>)
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	4b74      	ldr	r3, [pc, #464]	@ (800261c <main+0x32c>)
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	4974      	ldr	r1, [pc, #464]	@ (8002620 <main+0x330>)
 8002450:	4874      	ldr	r0, [pc, #464]	@ (8002624 <main+0x334>)
 8002452:	f006 fcc3 	bl	8008ddc <siprintf>
 	HAL_UART_Transmit(&huart8, MSG, sizeof(MSG), 100);
 8002456:	2364      	movs	r3, #100	@ 0x64
 8002458:	2223      	movs	r2, #35	@ 0x23
 800245a:	4972      	ldr	r1, [pc, #456]	@ (8002624 <main+0x334>)
 800245c:	485d      	ldr	r0, [pc, #372]	@ (80025d4 <main+0x2e4>)
 800245e:	f005 f847 	bl	80074f0 <HAL_UART_Transmit>

	uint32_t currentTick = HAL_GetTick();
 8002462:	f001 fd83 	bl	8003f6c <HAL_GetTick>
 8002466:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
      if (currentTick - lastUpdate >= 100)
 800246a:	4b6f      	ldr	r3, [pc, #444]	@ (8002628 <main+0x338>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b63      	cmp	r3, #99	@ 0x63
 8002476:	d9e2      	bls.n	800243e <main+0x14e>
      {
        lastUpdate = currentTick;
 8002478:	4a6b      	ldr	r2, [pc, #428]	@ (8002628 <main+0x338>)
 800247a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800247e:	6013      	str	r3, [r2, #0]
//            CytronMotor_Speed(&motor2, m2);
//            CytronMotor_Speed(&motor3, m3);
//            continue; // Skip further processing
//        }

	        raw_heading = get_yaw();
 8002480:	f7ff fea2 	bl	80021c8 <get_yaw>
 8002484:	eef0 7a40 	vmov.f32	s15, s0
 8002488:	4b68      	ldr	r3, [pc, #416]	@ (800262c <main+0x33c>)
 800248a:	edc3 7a00 	vstr	s15, [r3]
	        float current_heading = raw_heading - initial_heading_offset;
 800248e:	4b67      	ldr	r3, [pc, #412]	@ (800262c <main+0x33c>)
 8002490:	ed93 7a00 	vldr	s14, [r3]
 8002494:	4b5c      	ldr	r3, [pc, #368]	@ (8002608 <main+0x318>)
 8002496:	edd3 7a00 	vldr	s15, [r3]
 800249a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800249e:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4

	        // Normalize heading to [-180, 180]
	        if (current_heading > 180) current_heading -= 360;
 80024a2:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80024a6:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8002630 <main+0x340>
 80024aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b2:	dd07      	ble.n	80024c4 <main+0x1d4>
 80024b4:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80024b8:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8002634 <main+0x344>
 80024bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024c0:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
	        if (current_heading < -180) current_heading += 360;
 80024c4:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80024c8:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8002638 <main+0x348>
 80024cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d4:	d507      	bpl.n	80024e6 <main+0x1f6>
 80024d6:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80024da:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8002634 <main+0x344>
 80024de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024e2:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4

	        if ((passbtn > 1450 && passbtn <= 1550) && (dribbleturnbtn < 1550 && dribbleturnbtn > 1450) && (basketbtn == 0)) {
 80024e6:	4b55      	ldr	r3, [pc, #340]	@ (800263c <main+0x34c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f240 52aa 	movw	r2, #1450	@ 0x5aa
 80024ee:	4293      	cmp	r3, r2
 80024f0:	dd28      	ble.n	8002544 <main+0x254>
 80024f2:	4b52      	ldr	r3, [pc, #328]	@ (800263c <main+0x34c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f240 620e 	movw	r2, #1550	@ 0x60e
 80024fa:	4293      	cmp	r3, r2
 80024fc:	dc22      	bgt.n	8002544 <main+0x254>
 80024fe:	4b50      	ldr	r3, [pc, #320]	@ (8002640 <main+0x350>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f240 620d 	movw	r2, #1549	@ 0x60d
 8002506:	4293      	cmp	r3, r2
 8002508:	dc1c      	bgt.n	8002544 <main+0x254>
 800250a:	4b4d      	ldr	r3, [pc, #308]	@ (8002640 <main+0x350>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f240 52aa 	movw	r2, #1450	@ 0x5aa
 8002512:	4293      	cmp	r3, r2
 8002514:	dd16      	ble.n	8002544 <main+0x254>
 8002516:	4b4b      	ldr	r3, [pc, #300]	@ (8002644 <main+0x354>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d112      	bne.n	8002544 <main+0x254>
	            target_heading = 0.0;
 800251e:	4b3b      	ldr	r3, [pc, #236]	@ (800260c <main+0x31c>)
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
	            stateFlagPass = false;
 8002526:	4b48      	ldr	r3, [pc, #288]	@ (8002648 <main+0x358>)
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
	            stateFlagBasket = false;
 800252c:	4b47      	ldr	r3, [pc, #284]	@ (800264c <main+0x35c>)
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
//	      	    Servo_SetAngle(&fatak, 90);   // Move to 90°

	            if(up==1){
 8002532:	4b47      	ldr	r3, [pc, #284]	@ (8002650 <main+0x360>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b01      	cmp	r3, #1
 8002538:	f040 8128 	bne.w	800278c <main+0x49c>
//		            CytronMotor_Speed(&tandomM1,-400);
//		            CytronMotor_Speed(&tandomM2,-400);
//		            HAL_Delay(500);
//		            CytronMotor_Speed(&tandomM1,0);
//		            CytronMotor_Speed(&tandomM2,0);
		            up=0;
 800253c:	4b44      	ldr	r3, [pc, #272]	@ (8002650 <main+0x360>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
	            if(up==1){
 8002542:	e123      	b.n	800278c <main+0x49c>
	            }


	        } else if ((passbtn < 1450) && (basketbtn == 0)) {
 8002544:	4b3d      	ldr	r3, [pc, #244]	@ (800263c <main+0x34c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f240 52a9 	movw	r2, #1449	@ 0x5a9
 800254c:	4293      	cmp	r3, r2
 800254e:	dc1b      	bgt.n	8002588 <main+0x298>
 8002550:	4b3c      	ldr	r3, [pc, #240]	@ (8002644 <main+0x354>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d117      	bne.n	8002588 <main+0x298>
	            // Check if the stateFlag is false
	            if (!stateFlagPass) {
 8002558:	4b3b      	ldr	r3, [pc, #236]	@ (8002648 <main+0x358>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	f083 0301 	eor.w	r3, r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00c      	beq.n	8002580 <main+0x290>
	                // Lock the variable values
	                locked_distance_mm3 = distance_mm3;	//X lidar
 8002566:	4b2c      	ldr	r3, [pc, #176]	@ (8002618 <main+0x328>)
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	4b39      	ldr	r3, [pc, #228]	@ (8002654 <main+0x364>)
 800256e:	601a      	str	r2, [r3, #0]
	                locked_distance_mm2 = distance_mm2; //Y lidar
 8002570:	4b2a      	ldr	r3, [pc, #168]	@ (800261c <main+0x32c>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
 8002576:	4b38      	ldr	r3, [pc, #224]	@ (8002658 <main+0x368>)
 8002578:	601a      	str	r2, [r3, #0]
	                stateFlagPass = true;
 800257a:	4b33      	ldr	r3, [pc, #204]	@ (8002648 <main+0x358>)
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
	            }
	            up=1;
 8002580:	4b33      	ldr	r3, [pc, #204]	@ (8002650 <main+0x360>)
 8002582:	2201      	movs	r2, #1
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	e101      	b.n	800278c <main+0x49c>
//	            CytronMotor_Speed(&tandomM2,800);
//	            HAL_Delay(700);
//	            CytronMotor_Speed(&tandomM1,50);
//	            CytronMotor_Speed(&tandomM2,50);

	        } else if ((passbtn > 1550) && (basketbtn == 0)) {
 8002588:	4b2c      	ldr	r3, [pc, #176]	@ (800263c <main+0x34c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f240 620e 	movw	r2, #1550	@ 0x60e
 8002590:	4293      	cmp	r3, r2
 8002592:	dd65      	ble.n	8002660 <main+0x370>
 8002594:	4b2b      	ldr	r3, [pc, #172]	@ (8002644 <main+0x354>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d161      	bne.n	8002660 <main+0x370>
	            // Check if the stateFlag is false
	            if (!stateFlagPass) {
 800259c:	4b2a      	ldr	r3, [pc, #168]	@ (8002648 <main+0x358>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	f083 0301 	eor.w	r3, r3, #1
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00c      	beq.n	80025c4 <main+0x2d4>
	                // Lock the variable values
	                locked_distance_mm3 = distance_mm3;
 80025aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002618 <main+0x328>)
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	461a      	mov	r2, r3
 80025b0:	4b28      	ldr	r3, [pc, #160]	@ (8002654 <main+0x364>)
 80025b2:	601a      	str	r2, [r3, #0]
	                locked_distance_mm2 = distance_mm2;
 80025b4:	4b19      	ldr	r3, [pc, #100]	@ (800261c <main+0x32c>)
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	4b27      	ldr	r3, [pc, #156]	@ (8002658 <main+0x368>)
 80025bc:	601a      	str	r2, [r3, #0]
	                stateFlagPass = true;
 80025be:	4b22      	ldr	r3, [pc, #136]	@ (8002648 <main+0x358>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	701a      	strb	r2, [r3, #0]
	            }
	            target_heading = broadcastAngle;
 80025c4:	4b25      	ldr	r3, [pc, #148]	@ (800265c <main+0x36c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a10      	ldr	r2, [pc, #64]	@ (800260c <main+0x31c>)
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	e0de      	b.n	800278c <main+0x49c>
 80025ce:	bf00      	nop
 80025d0:	20000464 	.word	0x20000464
 80025d4:	20000350 	.word	0x20000350
 80025d8:	20000500 	.word	0x20000500
 80025dc:	200003d8 	.word	0x200003d8
 80025e0:	20000510 	.word	0x20000510
 80025e4:	20000240 	.word	0x20000240
 80025e8:	20000520 	.word	0x20000520
 80025ec:	200002c8 	.word	0x200002c8
 80025f0:	200000bc 	.word	0x200000bc
 80025f4:	40021400 	.word	0x40021400
 80025f8:	200001f4 	.word	0x200001f4
 80025fc:	20000110 	.word	0x20000110
 8002600:	40021800 	.word	0x40021800
 8002604:	2000015c 	.word	0x2000015c
 8002608:	200004c8 	.word	0x200004c8
 800260c:	200004cc 	.word	0x200004cc
 8002610:	200004c0 	.word	0x200004c0
 8002614:	200004c4 	.word	0x200004c4
 8002618:	20000536 	.word	0x20000536
 800261c:	20000534 	.word	0x20000534
 8002620:	0800c864 	.word	0x0800c864
 8002624:	200004d8 	.word	0x200004d8
 8002628:	20000544 	.word	0x20000544
 800262c:	20000460 	.word	0x20000460
 8002630:	43340000 	.word	0x43340000
 8002634:	43b40000 	.word	0x43b40000
 8002638:	c3340000 	.word	0xc3340000
 800263c:	20000490 	.word	0x20000490
 8002640:	2000049c 	.word	0x2000049c
 8002644:	20000498 	.word	0x20000498
 8002648:	20000548 	.word	0x20000548
 800264c:	20000549 	.word	0x20000549
 8002650:	200004fc 	.word	0x200004fc
 8002654:	2000054c 	.word	0x2000054c
 8002658:	20000550 	.word	0x20000550
 800265c:	20000028 	.word	0x20000028

	        } else if (basketbtn ) {
 8002660:	4b83      	ldr	r3, [pc, #524]	@ (8002870 <main+0x580>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 8091 	beq.w	800278c <main+0x49c>
	            // Check if the stateFlag is false
	            if (!stateFlagBasket) {
 800266a:	4b82      	ldr	r3, [pc, #520]	@ (8002874 <main+0x584>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	f083 0301 	eor.w	r3, r3, #1
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00c      	beq.n	8002692 <main+0x3a2>
	                // Lock the variable values
	                locked_distance_mm3 = distance_mm3;
 8002678:	4b7f      	ldr	r3, [pc, #508]	@ (8002878 <main+0x588>)
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	4b7f      	ldr	r3, [pc, #508]	@ (800287c <main+0x58c>)
 8002680:	601a      	str	r2, [r3, #0]
	                locked_distance_mm2 = distance_mm2;
 8002682:	4b7f      	ldr	r3, [pc, #508]	@ (8002880 <main+0x590>)
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	4b7e      	ldr	r3, [pc, #504]	@ (8002884 <main+0x594>)
 800268a:	601a      	str	r2, [r3, #0]
	                stateFlagBasket = true;
 800268c:	4b79      	ldr	r3, [pc, #484]	@ (8002874 <main+0x584>)
 800268e:	2201      	movs	r2, #1
 8002690:	701a      	strb	r2, [r3, #0]
	            }

	            // Calculate heading using locked values
	            int dx = basket_x - locked_distance_mm3 ;
 8002692:	4b7d      	ldr	r3, [pc, #500]	@ (8002888 <main+0x598>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	4b79      	ldr	r3, [pc, #484]	@ (800287c <main+0x58c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	            int dy = basket_y - locked_distance_mm2 ;
 80026a0:	4b7a      	ldr	r3, [pc, #488]	@ (800288c <main+0x59c>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b77      	ldr	r3, [pc, #476]	@ (8002884 <main+0x594>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	            angle_calc = atan2(dx, dy) * 180.0 / M_PI;
 80026ae:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80026b2:	f7fd ff57 	bl	8000564 <__aeabi_i2d>
 80026b6:	4604      	mov	r4, r0
 80026b8:	460d      	mov	r5, r1
 80026ba:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80026be:	f7fd ff51 	bl	8000564 <__aeabi_i2d>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	ec43 2b11 	vmov	d1, r2, r3
 80026ca:	ec45 4b10 	vmov	d0, r4, r5
 80026ce:	f007 fc97 	bl	800a000 <atan2>
 80026d2:	ec51 0b10 	vmov	r0, r1, d0
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	4b6d      	ldr	r3, [pc, #436]	@ (8002890 <main+0x5a0>)
 80026dc:	f7fd ffac 	bl	8000638 <__aeabi_dmul>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	a359      	add	r3, pc, #356	@ (adr r3, 8002850 <main+0x560>)
 80026ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ee:	f7fe f8cd 	bl	800088c <__aeabi_ddiv>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4967      	ldr	r1, [pc, #412]	@ (8002894 <main+0x5a4>)
 80026f8:	e9c1 2300 	strd	r2, r3, [r1]
	            angle_calc = fmod((angle_calc + 360.0), 360.0);
 80026fc:	4b65      	ldr	r3, [pc, #404]	@ (8002894 <main+0x5a4>)
 80026fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	4b64      	ldr	r3, [pc, #400]	@ (8002898 <main+0x5a8>)
 8002708:	f7fd fde0 	bl	80002cc <__adddf3>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	ec43 2b17 	vmov	d7, r2, r3
 8002714:	ed9f 1b50 	vldr	d1, [pc, #320]	@ 8002858 <main+0x568>
 8002718:	eeb0 0a47 	vmov.f32	s0, s14
 800271c:	eef0 0a67 	vmov.f32	s1, s15
 8002720:	f007 fc70 	bl	800a004 <fmod>
 8002724:	eeb0 7a40 	vmov.f32	s14, s0
 8002728:	eef0 7a60 	vmov.f32	s15, s1
 800272c:	4b59      	ldr	r3, [pc, #356]	@ (8002894 <main+0x5a4>)
 800272e:	ed83 7b00 	vstr	d7, [r3]
	            target_heading = angle_calc - 2;
 8002732:	4b58      	ldr	r3, [pc, #352]	@ (8002894 <main+0x5a4>)
 8002734:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002740:	f7fd fdc2 	bl	80002c8 <__aeabi_dsub>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4610      	mov	r0, r2
 800274a:	4619      	mov	r1, r3
 800274c:	f7fe fa4c 	bl	8000be8 <__aeabi_d2f>
 8002750:	4603      	mov	r3, r0
 8002752:	4a52      	ldr	r2, [pc, #328]	@ (800289c <main+0x5ac>)
 8002754:	6013      	str	r3, [r2, #0]
	            distance_from_basket = sqrt((dx*dx) +(dy*dy));
 8002756:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800275a:	fb03 f203 	mul.w	r2, r3, r3
 800275e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002762:	fb03 f303 	mul.w	r3, r3, r3
 8002766:	4413      	add	r3, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f7fd fefb 	bl	8000564 <__aeabi_i2d>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	ec43 2b10 	vmov	d0, r2, r3
 8002776:	f007 fce3 	bl	800a140 <sqrt>
 800277a:	ec53 2b10 	vmov	r2, r3, d0
 800277e:	4610      	mov	r0, r2
 8002780:	4619      	mov	r1, r3
 8002782:	f7fe fa31 	bl	8000be8 <__aeabi_d2f>
 8002786:	4603      	mov	r3, r0
 8002788:	4a45      	ldr	r2, [pc, #276]	@ (80028a0 <main+0x5b0>)
 800278a:	6013      	str	r3, [r2, #0]
//	        else {
//
//	        }


	        if(shootbtn==1 )
 800278c:	4b45      	ldr	r3, [pc, #276]	@ (80028a4 <main+0x5b4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b01      	cmp	r3, #1
 8002792:	f040 8097 	bne.w	80028c4 <main+0x5d4>
	        {
	        	 lower_motor_speed = 1000 * (1 - pow(M_E, (-0.38 * (distance_from_basket / 1000))));
 8002796:	4b42      	ldr	r3, [pc, #264]	@ (80028a0 <main+0x5b0>)
 8002798:	edd3 7a00 	vldr	s15, [r3]
 800279c:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80028a8 <main+0x5b8>
 80027a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027a4:	ee16 0a90 	vmov	r0, s13
 80027a8:	f7fd feee 	bl	8000588 <__aeabi_f2d>
 80027ac:	a32c      	add	r3, pc, #176	@ (adr r3, 8002860 <main+0x570>)
 80027ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b2:	f7fd ff41 	bl	8000638 <__aeabi_dmul>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	ec43 2b17 	vmov	d7, r2, r3
 80027be:	eeb0 1a47 	vmov.f32	s2, s14
 80027c2:	eef0 1a67 	vmov.f32	s3, s15
 80027c6:	ed9f 0b28 	vldr	d0, [pc, #160]	@ 8002868 <main+0x578>
 80027ca:	f007 fc49 	bl	800a060 <pow>
 80027ce:	ec53 2b10 	vmov	r2, r3, d0
 80027d2:	f04f 0000 	mov.w	r0, #0
 80027d6:	4935      	ldr	r1, [pc, #212]	@ (80028ac <main+0x5bc>)
 80027d8:	f7fd fd76 	bl	80002c8 <__aeabi_dsub>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4610      	mov	r0, r2
 80027e2:	4619      	mov	r1, r3
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	4b31      	ldr	r3, [pc, #196]	@ (80028b0 <main+0x5c0>)
 80027ea:	f7fd ff25 	bl	8000638 <__aeabi_dmul>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4610      	mov	r0, r2
 80027f4:	4619      	mov	r1, r3
 80027f6:	f7fe f9f7 	bl	8000be8 <__aeabi_d2f>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4a2d      	ldr	r2, [pc, #180]	@ (80028b4 <main+0x5c4>)
 80027fe:	6013      	str	r3, [r2, #0]
	        	    lower_ms = (int)lower_motor_speed;
 8002800:	4b2c      	ldr	r3, [pc, #176]	@ (80028b4 <main+0x5c4>)
 8002802:	edd3 7a00 	vldr	s15, [r3]
 8002806:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800280a:	ee17 2a90 	vmov	r2, s15
 800280e:	4b2a      	ldr	r3, [pc, #168]	@ (80028b8 <main+0x5c8>)
 8002810:	601a      	str	r2, [r3, #0]
//	          CytronMotor_Speed(&shooterM1, -lower_ms);
//	          CytronMotor_Speed(&shooterM2, (0.82*lower_ms));
	        	CytronMotor_Speed(&shooterM1,-948);
 8002812:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002816:	4929      	ldr	r1, [pc, #164]	@ (80028bc <main+0x5cc>)
 8002818:	4618      	mov	r0, r3
 800281a:	f7fe fbf7 	bl	800100c <CytronMotor_Speed>
				CytronMotor_Speed(&shooterM2,763);
 800281e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002822:	f240 21fb 	movw	r1, #763	@ 0x2fb
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fbf0 	bl	800100c <CytronMotor_Speed>
	          HAL_Delay(4000);
 800282c:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8002830:	f001 fba8 	bl	8003f84 <HAL_Delay>
	          if(fatakflag==0)
 8002834:	4b22      	ldr	r3, [pc, #136]	@ (80028c0 <main+0x5d0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d15b      	bne.n	80028f4 <main+0x604>
	          {
	    	  Servo_SetAngle(&fatak, 32);
 800283c:	463b      	mov	r3, r7
 800283e:	2120      	movs	r1, #32
 8002840:	4618      	mov	r0, r3
 8002842:	f000 fe79 	bl	8003538 <Servo_SetAngle>
	    	  fatakflag=1;
 8002846:	4b1e      	ldr	r3, [pc, #120]	@ (80028c0 <main+0x5d0>)
 8002848:	2201      	movs	r2, #1
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	e052      	b.n	80028f4 <main+0x604>
 800284e:	bf00      	nop
 8002850:	54442d18 	.word	0x54442d18
 8002854:	400921fb 	.word	0x400921fb
 8002858:	00000000 	.word	0x00000000
 800285c:	40768000 	.word	0x40768000
 8002860:	851eb852 	.word	0x851eb852
 8002864:	bfd851eb 	.word	0xbfd851eb
 8002868:	8b145769 	.word	0x8b145769
 800286c:	4005bf0a 	.word	0x4005bf0a
 8002870:	20000498 	.word	0x20000498
 8002874:	20000549 	.word	0x20000549
 8002878:	20000536 	.word	0x20000536
 800287c:	2000054c 	.word	0x2000054c
 8002880:	20000534 	.word	0x20000534
 8002884:	20000550 	.word	0x20000550
 8002888:	20000020 	.word	0x20000020
 800288c:	20000024 	.word	0x20000024
 8002890:	40668000 	.word	0x40668000
 8002894:	200004d0 	.word	0x200004d0
 8002898:	40768000 	.word	0x40768000
 800289c:	200004cc 	.word	0x200004cc
 80028a0:	200004b4 	.word	0x200004b4
 80028a4:	20000494 	.word	0x20000494
 80028a8:	447a0000 	.word	0x447a0000
 80028ac:	3ff00000 	.word	0x3ff00000
 80028b0:	408f4000 	.word	0x408f4000
 80028b4:	200004b8 	.word	0x200004b8
 80028b8:	200004bc 	.word	0x200004bc
 80028bc:	fffffc4c 	.word	0xfffffc4c
 80028c0:	200004b0 	.word	0x200004b0
	          }

	        }
	        else if(shootbtn==0)
 80028c4:	4b7b      	ldr	r3, [pc, #492]	@ (8002ab4 <main+0x7c4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d113      	bne.n	80028f4 <main+0x604>
	        {
		          CytronMotor_Speed(&shooterM1, 0);
 80028cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80028d0:	2100      	movs	r1, #0
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe fb9a 	bl	800100c <CytronMotor_Speed>
		          CytronMotor_Speed(&shooterM2, 0);
 80028d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe fb94 	bl	800100c <CytronMotor_Speed>
		          Servo_SetAngle(&fatak, 90);
 80028e4:	463b      	mov	r3, r7
 80028e6:	215a      	movs	r1, #90	@ 0x5a
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fe25 	bl	8003538 <Servo_SetAngle>
		          fatakflag=0;
 80028ee:	4b72      	ldr	r3, [pc, #456]	@ (8002ab8 <main+0x7c8>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
	        }
	        if((dribbleturnbtn >1800 || dribbleturnbtn < 1400) && (passbtn>=1450 && passbtn<=1550) )
 80028f4:	4b71      	ldr	r3, [pc, #452]	@ (8002abc <main+0x7cc>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80028fc:	dc04      	bgt.n	8002908 <main+0x618>
 80028fe:	4b6f      	ldr	r3, [pc, #444]	@ (8002abc <main+0x7cc>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f5b3 6faf 	cmp.w	r3, #1400	@ 0x578
 8002906:	da0e      	bge.n	8002926 <main+0x636>
 8002908:	4b6d      	ldr	r3, [pc, #436]	@ (8002ac0 <main+0x7d0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f240 52a9 	movw	r2, #1449	@ 0x5a9
 8002910:	4293      	cmp	r3, r2
 8002912:	dd08      	ble.n	8002926 <main+0x636>
 8002914:	4b6a      	ldr	r3, [pc, #424]	@ (8002ac0 <main+0x7d0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f240 620e 	movw	r2, #1550	@ 0x60e
 800291c:	4293      	cmp	r3, r2
 800291e:	dc02      	bgt.n	8002926 <main+0x636>
	        {
	        	target_heading = 90.00;
 8002920:	4b68      	ldr	r3, [pc, #416]	@ (8002ac4 <main+0x7d4>)
 8002922:	4a69      	ldr	r2, [pc, #420]	@ (8002ac8 <main+0x7d8>)
 8002924:	601a      	str	r2, [r3, #0]
	        }
	          float error = target_heading - current_heading;
 8002926:	4b67      	ldr	r3, [pc, #412]	@ (8002ac4 <main+0x7d4>)
 8002928:	ed93 7a00 	vldr	s14, [r3]
 800292c:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8002930:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002934:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
	          if (error > 180) error -= 360;
 8002938:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800293c:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8002acc <main+0x7dc>
 8002940:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002948:	dd07      	ble.n	800295a <main+0x66a>
 800294a:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800294e:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8002ad0 <main+0x7e0>
 8002952:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002956:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
	          if (error < -180) error += 360;
 800295a:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800295e:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8002ad4 <main+0x7e4>
 8002962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296a:	d507      	bpl.n	800297c <main+0x68c>
 800296c:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8002970:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8002ad0 <main+0x7e0>
 8002974:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002978:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
	                  // Accumulate error over time
	          static float previous_error = 0;
	          static uint32_t lastPIDUpdate = 0;


	          uint32_t currentTime = HAL_GetTick();
 800297c:	f001 faf6 	bl	8003f6c <HAL_GetTick>
 8002980:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
	          float dt = (currentTime - lastPIDUpdate)/ 1000.0f;
 8002984:	4b54      	ldr	r3, [pc, #336]	@ (8002ad8 <main+0x7e8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002996:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8002adc <main+0x7ec>
 800299a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800299e:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
	          lastPIDUpdate = currentTime;
 80029a2:	4a4d      	ldr	r2, [pc, #308]	@ (8002ad8 <main+0x7e8>)
 80029a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029a8:	6013      	str	r3, [r2, #0]
	          float derivative = (error - previous_error) / dt;
 80029aa:	4b4d      	ldr	r3, [pc, #308]	@ (8002ae0 <main+0x7f0>)
 80029ac:	edd3 7a00 	vldr	s15, [r3]
 80029b0:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 80029b4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029b8:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 80029bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029c0:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
	          previous_error = error;
 80029c4:	4a46      	ldr	r2, [pc, #280]	@ (8002ae0 <main+0x7f0>)
 80029c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029ca:	6013      	str	r3, [r2, #0]

	          integral += error*dt;
 80029cc:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 80029d0:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80029d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d8:	4b42      	ldr	r3, [pc, #264]	@ (8002ae4 <main+0x7f4>)
 80029da:	edd3 7a00 	vldr	s15, [r3]
 80029de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e2:	4b40      	ldr	r3, [pc, #256]	@ (8002ae4 <main+0x7f4>)
 80029e4:	edc3 7a00 	vstr	s15, [r3]

	          // Proportional and integral control
	          r1 = Kp * error + Ki * integral + Kd* derivative;
 80029e8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ae8 <main+0x7f8>)
 80029ea:	ed93 7a00 	vldr	s14, [r3]
 80029ee:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80029f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029f6:	4b3d      	ldr	r3, [pc, #244]	@ (8002aec <main+0x7fc>)
 80029f8:	edd3 6a00 	vldr	s13, [r3]
 80029fc:	4b39      	ldr	r3, [pc, #228]	@ (8002ae4 <main+0x7f4>)
 80029fe:	edd3 7a00 	vldr	s15, [r3]
 8002a02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a0a:	4b39      	ldr	r3, [pc, #228]	@ (8002af0 <main+0x800>)
 8002a0c:	edd3 6a00 	vldr	s13, [r3]
 8002a10:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8002a14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a1c:	4b35      	ldr	r3, [pc, #212]	@ (8002af4 <main+0x804>)
 8002a1e:	edc3 7a00 	vstr	s15, [r3]

	          // Optional: Anti-windup for integral component
	          if (integral > MAX_INTEGRAL) integral = MAX_INTEGRAL;
 8002a22:	4b30      	ldr	r3, [pc, #192]	@ (8002ae4 <main+0x7f4>)
 8002a24:	edd3 7a00 	vldr	s15, [r3]
 8002a28:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8002a2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a34:	dd02      	ble.n	8002a3c <main+0x74c>
 8002a36:	4b2b      	ldr	r3, [pc, #172]	@ (8002ae4 <main+0x7f4>)
 8002a38:	4a2f      	ldr	r2, [pc, #188]	@ (8002af8 <main+0x808>)
 8002a3a:	601a      	str	r2, [r3, #0]
	          if (integral < -MAX_INTEGRAL) integral = -MAX_INTEGRAL;
 8002a3c:	4b29      	ldr	r3, [pc, #164]	@ (8002ae4 <main+0x7f4>)
 8002a3e:	edd3 7a00 	vldr	s15, [r3]
 8002a42:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 8002a46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a4e:	d502      	bpl.n	8002a56 <main+0x766>
 8002a50:	4b24      	ldr	r3, [pc, #144]	@ (8002ae4 <main+0x7f4>)
 8002a52:	4a2a      	ldr	r2, [pc, #168]	@ (8002afc <main+0x80c>)
 8002a54:	601a      	str	r2, [r3, #0]
	          degree = -target_heading;
 8002a56:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac4 <main+0x7d4>)
 8002a58:	edd3 7a00 	vldr	s15, [r3]
 8002a5c:	eef1 7a67 	vneg.f32	s15, s15
 8002a60:	4b27      	ldr	r3, [pc, #156]	@ (8002b00 <main+0x810>)
 8002a62:	edc3 7a00 	vstr	s15, [r3]

	        calculateWheelSpeeds(dirx, diry, &m1, &m2, &m3, &r1, &degree);
 8002a66:	4b27      	ldr	r3, [pc, #156]	@ (8002b04 <main+0x814>)
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	4b27      	ldr	r3, [pc, #156]	@ (8002b08 <main+0x818>)
 8002a6c:	6819      	ldr	r1, [r3, #0]
 8002a6e:	4b24      	ldr	r3, [pc, #144]	@ (8002b00 <main+0x810>)
 8002a70:	9302      	str	r3, [sp, #8]
 8002a72:	4b20      	ldr	r3, [pc, #128]	@ (8002af4 <main+0x804>)
 8002a74:	9301      	str	r3, [sp, #4]
 8002a76:	4b25      	ldr	r3, [pc, #148]	@ (8002b0c <main+0x81c>)
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	4b25      	ldr	r3, [pc, #148]	@ (8002b10 <main+0x820>)
 8002a7c:	4a25      	ldr	r2, [pc, #148]	@ (8002b14 <main+0x824>)
 8002a7e:	f7fe fb53 	bl	8001128 <calculateWheelSpeeds>
	        CytronMotor_Speed(&motor1, m1);
 8002a82:	4b24      	ldr	r3, [pc, #144]	@ (8002b14 <main+0x824>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fe fabd 	bl	800100c <CytronMotor_Speed>
	        CytronMotor_Speed(&motor2, m2);
 8002a92:	4b1f      	ldr	r3, [pc, #124]	@ (8002b10 <main+0x820>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fe fab5 	bl	800100c <CytronMotor_Speed>
	        CytronMotor_Speed(&motor3, m3);
 8002aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b0c <main+0x81c>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fe faad 	bl	800100c <CytronMotor_Speed>
  {
 8002ab2:	e4c4      	b.n	800243e <main+0x14e>
 8002ab4:	20000494 	.word	0x20000494
 8002ab8:	200004b0 	.word	0x200004b0
 8002abc:	2000049c 	.word	0x2000049c
 8002ac0:	20000490 	.word	0x20000490
 8002ac4:	200004cc 	.word	0x200004cc
 8002ac8:	42b40000 	.word	0x42b40000
 8002acc:	43340000 	.word	0x43340000
 8002ad0:	43b40000 	.word	0x43b40000
 8002ad4:	c3340000 	.word	0xc3340000
 8002ad8:	20000554 	.word	0x20000554
 8002adc:	447a0000 	.word	0x447a0000
 8002ae0:	20000558 	.word	0x20000558
 8002ae4:	2000055c 	.word	0x2000055c
 8002ae8:	20000014 	.word	0x20000014
 8002aec:	20000018 	.word	0x20000018
 8002af0:	2000001c 	.word	0x2000001c
 8002af4:	200004ac 	.word	0x200004ac
 8002af8:	40400000 	.word	0x40400000
 8002afc:	c0400000 	.word	0xc0400000
 8002b00:	200004c0 	.word	0x200004c0
 8002b04:	20000488 	.word	0x20000488
 8002b08:	2000048c 	.word	0x2000048c
 8002b0c:	200004a8 	.word	0x200004a8
 8002b10:	200004a4 	.word	0x200004a4
 8002b14:	200004a0 	.word	0x200004a0

08002b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b094      	sub	sp, #80	@ 0x50
 8002b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b1e:	f107 0320 	add.w	r3, r7, #32
 8002b22:	2230      	movs	r2, #48	@ 0x30
 8002b24:	2100      	movs	r1, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	f006 fa52 	bl	8008fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b2c:	f107 030c 	add.w	r3, r7, #12
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8002be8 <SystemClock_Config+0xd0>)
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b40:	4a29      	ldr	r2, [pc, #164]	@ (8002be8 <SystemClock_Config+0xd0>)
 8002b42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b46:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b48:	4b27      	ldr	r3, [pc, #156]	@ (8002be8 <SystemClock_Config+0xd0>)
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b54:	4b25      	ldr	r3, [pc, #148]	@ (8002bec <SystemClock_Config+0xd4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a24      	ldr	r2, [pc, #144]	@ (8002bec <SystemClock_Config+0xd4>)
 8002b5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	4b22      	ldr	r3, [pc, #136]	@ (8002bec <SystemClock_Config+0xd4>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002b68:	607b      	str	r3, [r7, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b70:	2301      	movs	r3, #1
 8002b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b74:	2310      	movs	r3, #16
 8002b76:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002b80:	2308      	movs	r3, #8
 8002b82:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002b84:	23d8      	movs	r3, #216	@ 0xd8
 8002b86:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002b8c:	2309      	movs	r3, #9
 8002b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b90:	f107 0320 	add.w	r3, r7, #32
 8002b94:	4618      	mov	r0, r3
 8002b96:	f002 fbe9 	bl	800536c <HAL_RCC_OscConfig>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002ba0:	f000 fcb0 	bl	8003504 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002ba4:	f002 fb92 	bl	80052cc <HAL_PWREx_EnableOverDrive>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002bae:	f000 fca9 	bl	8003504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bb2:	230f      	movs	r3, #15
 8002bb4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002bbe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002bc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002bc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bc8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002bca:	f107 030c 	add.w	r3, r7, #12
 8002bce:	2107      	movs	r1, #7
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f002 fe6f 	bl	80058b4 <HAL_RCC_ClockConfig>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002bdc:	f000 fc92 	bl	8003504 <Error_Handler>
  }
}
 8002be0:	bf00      	nop
 8002be2:	3750      	adds	r7, #80	@ 0x50
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40007000 	.word	0x40007000

08002bf0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c64 <MX_I2C2_Init+0x74>)
 8002bf6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c68 <MX_I2C2_Init+0x78>)
 8002bf8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x6000030D;
 8002bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8002c64 <MX_I2C2_Init+0x74>)
 8002bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8002c6c <MX_I2C2_Init+0x7c>)
 8002bfe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002c00:	4b18      	ldr	r3, [pc, #96]	@ (8002c64 <MX_I2C2_Init+0x74>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c06:	4b17      	ldr	r3, [pc, #92]	@ (8002c64 <MX_I2C2_Init+0x74>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c0c:	4b15      	ldr	r3, [pc, #84]	@ (8002c64 <MX_I2C2_Init+0x74>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002c12:	4b14      	ldr	r3, [pc, #80]	@ (8002c64 <MX_I2C2_Init+0x74>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c18:	4b12      	ldr	r3, [pc, #72]	@ (8002c64 <MX_I2C2_Init+0x74>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c1e:	4b11      	ldr	r3, [pc, #68]	@ (8002c64 <MX_I2C2_Init+0x74>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c24:	4b0f      	ldr	r3, [pc, #60]	@ (8002c64 <MX_I2C2_Init+0x74>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002c2a:	480e      	ldr	r0, [pc, #56]	@ (8002c64 <MX_I2C2_Init+0x74>)
 8002c2c:	f001 fd4c 	bl	80046c8 <HAL_I2C_Init>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002c36:	f000 fc65 	bl	8003504 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	4809      	ldr	r0, [pc, #36]	@ (8002c64 <MX_I2C2_Init+0x74>)
 8002c3e:	f002 faad 	bl	800519c <HAL_I2CEx_ConfigAnalogFilter>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002c48:	f000 fc5c 	bl	8003504 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4805      	ldr	r0, [pc, #20]	@ (8002c64 <MX_I2C2_Init+0x74>)
 8002c50:	f002 faef 	bl	8005232 <HAL_I2CEx_ConfigDigitalFilter>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002c5a:	f000 fc53 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	200000bc 	.word	0x200000bc
 8002c68:	40005800 	.word	0x40005800
 8002c6c:	6000030d 	.word	0x6000030d

08002c70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b09a      	sub	sp, #104	@ 0x68
 8002c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c76:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	605a      	str	r2, [r3, #4]
 8002c80:	609a      	str	r2, [r3, #8]
 8002c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c84:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c90:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	611a      	str	r2, [r3, #16]
 8002ca0:	615a      	str	r2, [r3, #20]
 8002ca2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ca4:	1d3b      	adds	r3, r7, #4
 8002ca6:	222c      	movs	r2, #44	@ 0x2c
 8002ca8:	2100      	movs	r1, #0
 8002caa:	4618      	mov	r0, r3
 8002cac:	f006 f990 	bl	8008fd0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002cb0:	4b55      	ldr	r3, [pc, #340]	@ (8002e08 <MX_TIM1_Init+0x198>)
 8002cb2:	4a56      	ldr	r2, [pc, #344]	@ (8002e0c <MX_TIM1_Init+0x19c>)
 8002cb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 8002cb6:	4b54      	ldr	r3, [pc, #336]	@ (8002e08 <MX_TIM1_Init+0x198>)
 8002cb8:	22d7      	movs	r2, #215	@ 0xd7
 8002cba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cbc:	4b52      	ldr	r3, [pc, #328]	@ (8002e08 <MX_TIM1_Init+0x198>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002cc2:	4b51      	ldr	r3, [pc, #324]	@ (8002e08 <MX_TIM1_Init+0x198>)
 8002cc4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002cc8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cca:	4b4f      	ldr	r3, [pc, #316]	@ (8002e08 <MX_TIM1_Init+0x198>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002cd0:	4b4d      	ldr	r3, [pc, #308]	@ (8002e08 <MX_TIM1_Init+0x198>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cd6:	4b4c      	ldr	r3, [pc, #304]	@ (8002e08 <MX_TIM1_Init+0x198>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002cdc:	484a      	ldr	r0, [pc, #296]	@ (8002e08 <MX_TIM1_Init+0x198>)
 8002cde:	f003 fb59 	bl	8006394 <HAL_TIM_Base_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002ce8:	f000 fc0c 	bl	8003504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cf0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002cf2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4843      	ldr	r0, [pc, #268]	@ (8002e08 <MX_TIM1_Init+0x198>)
 8002cfa:	f003 fe11 	bl	8006920 <HAL_TIM_ConfigClockSource>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002d04:	f000 fbfe 	bl	8003504 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d08:	483f      	ldr	r0, [pc, #252]	@ (8002e08 <MX_TIM1_Init+0x198>)
 8002d0a:	f003 fb9a 	bl	8006442 <HAL_TIM_PWM_Init>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002d14:	f000 fbf6 	bl	8003504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d20:	2300      	movs	r3, #0
 8002d22:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d24:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4837      	ldr	r0, [pc, #220]	@ (8002e08 <MX_TIM1_Init+0x198>)
 8002d2c:	f004 fa86 	bl	800723c <HAL_TIMEx_MasterConfigSynchronization>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002d36:	f000 fbe5 	bl	8003504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d3a:	2360      	movs	r3, #96	@ 0x60
 8002d3c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d42:	2300      	movs	r3, #0
 8002d44:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d46:	2300      	movs	r3, #0
 8002d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d52:	2300      	movs	r3, #0
 8002d54:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d56:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	482a      	ldr	r0, [pc, #168]	@ (8002e08 <MX_TIM1_Init+0x198>)
 8002d60:	f003 fcca 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002d6a:	f000 fbcb 	bl	8003504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d6e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d72:	2204      	movs	r2, #4
 8002d74:	4619      	mov	r1, r3
 8002d76:	4824      	ldr	r0, [pc, #144]	@ (8002e08 <MX_TIM1_Init+0x198>)
 8002d78:	f003 fcbe 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8002d82:	f000 fbbf 	bl	8003504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d86:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d8a:	2208      	movs	r2, #8
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	481e      	ldr	r0, [pc, #120]	@ (8002e08 <MX_TIM1_Init+0x198>)
 8002d90:	f003 fcb2 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8002d9a:	f000 fbb3 	bl	8003504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d9e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002da2:	220c      	movs	r2, #12
 8002da4:	4619      	mov	r1, r3
 8002da6:	4818      	ldr	r0, [pc, #96]	@ (8002e08 <MX_TIM1_Init+0x198>)
 8002da8:	f003 fca6 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8002db2:	f000 fba7 	bl	8003504 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002db6:	2300      	movs	r3, #0
 8002db8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002dca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002dce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002dd8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002de2:	2300      	movs	r3, #0
 8002de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	4619      	mov	r1, r3
 8002dea:	4807      	ldr	r0, [pc, #28]	@ (8002e08 <MX_TIM1_Init+0x198>)
 8002dec:	f004 fab4 	bl	8007358 <HAL_TIMEx_ConfigBreakDeadTime>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8002df6:	f000 fb85 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002dfa:	4803      	ldr	r0, [pc, #12]	@ (8002e08 <MX_TIM1_Init+0x198>)
 8002dfc:	f000 fcd2 	bl	80037a4 <HAL_TIM_MspPostInit>

}
 8002e00:	bf00      	nop
 8002e02:	3768      	adds	r7, #104	@ 0x68
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	20000110 	.word	0x20000110
 8002e0c:	40010000 	.word	0x40010000

08002e10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08e      	sub	sp, #56	@ 0x38
 8002e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	605a      	str	r2, [r3, #4]
 8002e20:	609a      	str	r2, [r3, #8]
 8002e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e24:	f107 031c 	add.w	r3, r7, #28
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e30:	463b      	mov	r3, r7
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	609a      	str	r2, [r3, #8]
 8002e3a:	60da      	str	r2, [r3, #12]
 8002e3c:	611a      	str	r2, [r3, #16]
 8002e3e:	615a      	str	r2, [r3, #20]
 8002e40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e42:	4b3e      	ldr	r3, [pc, #248]	@ (8002f3c <MX_TIM2_Init+0x12c>)
 8002e44:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 216-1;
 8002e4a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f3c <MX_TIM2_Init+0x12c>)
 8002e4c:	22d7      	movs	r2, #215	@ 0xd7
 8002e4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e50:	4b3a      	ldr	r3, [pc, #232]	@ (8002f3c <MX_TIM2_Init+0x12c>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8002e56:	4b39      	ldr	r3, [pc, #228]	@ (8002f3c <MX_TIM2_Init+0x12c>)
 8002e58:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002e5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e5e:	4b37      	ldr	r3, [pc, #220]	@ (8002f3c <MX_TIM2_Init+0x12c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e64:	4b35      	ldr	r3, [pc, #212]	@ (8002f3c <MX_TIM2_Init+0x12c>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e6a:	4834      	ldr	r0, [pc, #208]	@ (8002f3c <MX_TIM2_Init+0x12c>)
 8002e6c:	f003 fa92 	bl	8006394 <HAL_TIM_Base_Init>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002e76:	f000 fb45 	bl	8003504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e80:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e84:	4619      	mov	r1, r3
 8002e86:	482d      	ldr	r0, [pc, #180]	@ (8002f3c <MX_TIM2_Init+0x12c>)
 8002e88:	f003 fd4a 	bl	8006920 <HAL_TIM_ConfigClockSource>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002e92:	f000 fb37 	bl	8003504 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e96:	4829      	ldr	r0, [pc, #164]	@ (8002f3c <MX_TIM2_Init+0x12c>)
 8002e98:	f003 fad3 	bl	8006442 <HAL_TIM_PWM_Init>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002ea2:	f000 fb2f 	bl	8003504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002eae:	f107 031c 	add.w	r3, r7, #28
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4821      	ldr	r0, [pc, #132]	@ (8002f3c <MX_TIM2_Init+0x12c>)
 8002eb6:	f004 f9c1 	bl	800723c <HAL_TIMEx_MasterConfigSynchronization>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002ec0:	f000 fb20 	bl	8003504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ec4:	2360      	movs	r3, #96	@ 0x60
 8002ec6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ed4:	463b      	mov	r3, r7
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4818      	ldr	r0, [pc, #96]	@ (8002f3c <MX_TIM2_Init+0x12c>)
 8002edc:	f003 fc0c 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002ee6:	f000 fb0d 	bl	8003504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002eea:	463b      	mov	r3, r7
 8002eec:	2204      	movs	r2, #4
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4812      	ldr	r0, [pc, #72]	@ (8002f3c <MX_TIM2_Init+0x12c>)
 8002ef2:	f003 fc01 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002efc:	f000 fb02 	bl	8003504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f00:	463b      	mov	r3, r7
 8002f02:	2208      	movs	r2, #8
 8002f04:	4619      	mov	r1, r3
 8002f06:	480d      	ldr	r0, [pc, #52]	@ (8002f3c <MX_TIM2_Init+0x12c>)
 8002f08:	f003 fbf6 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8002f12:	f000 faf7 	bl	8003504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f16:	463b      	mov	r3, r7
 8002f18:	220c      	movs	r2, #12
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4807      	ldr	r0, [pc, #28]	@ (8002f3c <MX_TIM2_Init+0x12c>)
 8002f1e:	f003 fbeb 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8002f28:	f000 faec 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002f2c:	4803      	ldr	r0, [pc, #12]	@ (8002f3c <MX_TIM2_Init+0x12c>)
 8002f2e:	f000 fc39 	bl	80037a4 <HAL_TIM_MspPostInit>

}
 8002f32:	bf00      	nop
 8002f34:	3738      	adds	r7, #56	@ 0x38
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	2000015c 	.word	0x2000015c

08002f40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08e      	sub	sp, #56	@ 0x38
 8002f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	605a      	str	r2, [r3, #4]
 8002f50:	609a      	str	r2, [r3, #8]
 8002f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f54:	f107 031c 	add.w	r3, r7, #28
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f60:	463b      	mov	r3, r7
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	605a      	str	r2, [r3, #4]
 8002f68:	609a      	str	r2, [r3, #8]
 8002f6a:	60da      	str	r2, [r3, #12]
 8002f6c:	611a      	str	r2, [r3, #16]
 8002f6e:	615a      	str	r2, [r3, #20]
 8002f70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f72:	4b2d      	ldr	r3, [pc, #180]	@ (8003028 <MX_TIM3_Init+0xe8>)
 8002f74:	4a2d      	ldr	r2, [pc, #180]	@ (800302c <MX_TIM3_Init+0xec>)
 8002f76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 216-1;
 8002f78:	4b2b      	ldr	r3, [pc, #172]	@ (8003028 <MX_TIM3_Init+0xe8>)
 8002f7a:	22d7      	movs	r2, #215	@ 0xd7
 8002f7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8003028 <MX_TIM3_Init+0xe8>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8002f84:	4b28      	ldr	r3, [pc, #160]	@ (8003028 <MX_TIM3_Init+0xe8>)
 8002f86:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002f8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f8c:	4b26      	ldr	r3, [pc, #152]	@ (8003028 <MX_TIM3_Init+0xe8>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f92:	4b25      	ldr	r3, [pc, #148]	@ (8003028 <MX_TIM3_Init+0xe8>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f98:	4823      	ldr	r0, [pc, #140]	@ (8003028 <MX_TIM3_Init+0xe8>)
 8002f9a:	f003 f9fb 	bl	8006394 <HAL_TIM_Base_Init>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002fa4:	f000 faae 	bl	8003504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fa8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002fae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	481c      	ldr	r0, [pc, #112]	@ (8003028 <MX_TIM3_Init+0xe8>)
 8002fb6:	f003 fcb3 	bl	8006920 <HAL_TIM_ConfigClockSource>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002fc0:	f000 faa0 	bl	8003504 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002fc4:	4818      	ldr	r0, [pc, #96]	@ (8003028 <MX_TIM3_Init+0xe8>)
 8002fc6:	f003 fa3c 	bl	8006442 <HAL_TIM_PWM_Init>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002fd0:	f000 fa98 	bl	8003504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fdc:	f107 031c 	add.w	r3, r7, #28
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4811      	ldr	r0, [pc, #68]	@ (8003028 <MX_TIM3_Init+0xe8>)
 8002fe4:	f004 f92a 	bl	800723c <HAL_TIMEx_MasterConfigSynchronization>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002fee:	f000 fa89 	bl	8003504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ff2:	2360      	movs	r3, #96	@ 0x60
 8002ff4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003002:	463b      	mov	r3, r7
 8003004:	2200      	movs	r2, #0
 8003006:	4619      	mov	r1, r3
 8003008:	4807      	ldr	r0, [pc, #28]	@ (8003028 <MX_TIM3_Init+0xe8>)
 800300a:	f003 fb75 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003014:	f000 fa76 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003018:	4803      	ldr	r0, [pc, #12]	@ (8003028 <MX_TIM3_Init+0xe8>)
 800301a:	f000 fbc3 	bl	80037a4 <HAL_TIM_MspPostInit>

}
 800301e:	bf00      	nop
 8003020:	3738      	adds	r7, #56	@ 0x38
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	200001a8 	.word	0x200001a8
 800302c:	40000400 	.word	0x40000400

08003030 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b09a      	sub	sp, #104	@ 0x68
 8003034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003036:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	609a      	str	r2, [r3, #8]
 8003042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003044:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003050:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	60da      	str	r2, [r3, #12]
 800305e:	611a      	str	r2, [r3, #16]
 8003060:	615a      	str	r2, [r3, #20]
 8003062:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003064:	1d3b      	adds	r3, r7, #4
 8003066:	222c      	movs	r2, #44	@ 0x2c
 8003068:	2100      	movs	r1, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f005 ffb0 	bl	8008fd0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003070:	4b55      	ldr	r3, [pc, #340]	@ (80031c8 <MX_TIM8_Init+0x198>)
 8003072:	4a56      	ldr	r2, [pc, #344]	@ (80031cc <MX_TIM8_Init+0x19c>)
 8003074:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 216-1;
 8003076:	4b54      	ldr	r3, [pc, #336]	@ (80031c8 <MX_TIM8_Init+0x198>)
 8003078:	22d7      	movs	r2, #215	@ 0xd7
 800307a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800307c:	4b52      	ldr	r3, [pc, #328]	@ (80031c8 <MX_TIM8_Init+0x198>)
 800307e:	2200      	movs	r2, #0
 8003080:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8003082:	4b51      	ldr	r3, [pc, #324]	@ (80031c8 <MX_TIM8_Init+0x198>)
 8003084:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003088:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800308a:	4b4f      	ldr	r3, [pc, #316]	@ (80031c8 <MX_TIM8_Init+0x198>)
 800308c:	2200      	movs	r2, #0
 800308e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003090:	4b4d      	ldr	r3, [pc, #308]	@ (80031c8 <MX_TIM8_Init+0x198>)
 8003092:	2200      	movs	r2, #0
 8003094:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003096:	4b4c      	ldr	r3, [pc, #304]	@ (80031c8 <MX_TIM8_Init+0x198>)
 8003098:	2200      	movs	r2, #0
 800309a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800309c:	484a      	ldr	r0, [pc, #296]	@ (80031c8 <MX_TIM8_Init+0x198>)
 800309e:	f003 f979 	bl	8006394 <HAL_TIM_Base_Init>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80030a8:	f000 fa2c 	bl	8003504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80030b2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80030b6:	4619      	mov	r1, r3
 80030b8:	4843      	ldr	r0, [pc, #268]	@ (80031c8 <MX_TIM8_Init+0x198>)
 80030ba:	f003 fc31 	bl	8006920 <HAL_TIM_ConfigClockSource>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80030c4:	f000 fa1e 	bl	8003504 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80030c8:	483f      	ldr	r0, [pc, #252]	@ (80031c8 <MX_TIM8_Init+0x198>)
 80030ca:	f003 f9ba 	bl	8006442 <HAL_TIM_PWM_Init>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80030d4:	f000 fa16 	bl	8003504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030d8:	2300      	movs	r3, #0
 80030da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80030dc:	2300      	movs	r3, #0
 80030de:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030e0:	2300      	movs	r3, #0
 80030e2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80030e4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80030e8:	4619      	mov	r1, r3
 80030ea:	4837      	ldr	r0, [pc, #220]	@ (80031c8 <MX_TIM8_Init+0x198>)
 80030ec:	f004 f8a6 	bl	800723c <HAL_TIMEx_MasterConfigSynchronization>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80030f6:	f000 fa05 	bl	8003504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030fa:	2360      	movs	r3, #96	@ 0x60
 80030fc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003102:	2300      	movs	r3, #0
 8003104:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003106:	2300      	movs	r3, #0
 8003108:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800310a:	2300      	movs	r3, #0
 800310c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800310e:	2300      	movs	r3, #0
 8003110:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003112:	2300      	movs	r3, #0
 8003114:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003116:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800311a:	2200      	movs	r2, #0
 800311c:	4619      	mov	r1, r3
 800311e:	482a      	ldr	r0, [pc, #168]	@ (80031c8 <MX_TIM8_Init+0x198>)
 8003120:	f003 faea 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800312a:	f000 f9eb 	bl	8003504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800312e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003132:	2204      	movs	r2, #4
 8003134:	4619      	mov	r1, r3
 8003136:	4824      	ldr	r0, [pc, #144]	@ (80031c8 <MX_TIM8_Init+0x198>)
 8003138:	f003 fade 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8003142:	f000 f9df 	bl	8003504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003146:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800314a:	2208      	movs	r2, #8
 800314c:	4619      	mov	r1, r3
 800314e:	481e      	ldr	r0, [pc, #120]	@ (80031c8 <MX_TIM8_Init+0x198>)
 8003150:	f003 fad2 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 800315a:	f000 f9d3 	bl	8003504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800315e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003162:	220c      	movs	r2, #12
 8003164:	4619      	mov	r1, r3
 8003166:	4818      	ldr	r0, [pc, #96]	@ (80031c8 <MX_TIM8_Init+0x198>)
 8003168:	f003 fac6 	bl	80066f8 <HAL_TIM_PWM_ConfigChannel>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 8003172:	f000 f9c7 	bl	8003504 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003176:	2300      	movs	r3, #0
 8003178:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800318a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800318e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003194:	2300      	movs	r3, #0
 8003196:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003198:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800319c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800319e:	2300      	movs	r3, #0
 80031a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80031a2:	2300      	movs	r3, #0
 80031a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80031a6:	1d3b      	adds	r3, r7, #4
 80031a8:	4619      	mov	r1, r3
 80031aa:	4807      	ldr	r0, [pc, #28]	@ (80031c8 <MX_TIM8_Init+0x198>)
 80031ac:	f004 f8d4 	bl	8007358 <HAL_TIMEx_ConfigBreakDeadTime>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <MX_TIM8_Init+0x18a>
  {
    Error_Handler();
 80031b6:	f000 f9a5 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80031ba:	4803      	ldr	r0, [pc, #12]	@ (80031c8 <MX_TIM8_Init+0x198>)
 80031bc:	f000 faf2 	bl	80037a4 <HAL_TIM_MspPostInit>

}
 80031c0:	bf00      	nop
 80031c2:	3768      	adds	r7, #104	@ 0x68
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	200001f4 	.word	0x200001f4
 80031cc:	40010400 	.word	0x40010400

080031d0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80031d4:	4b14      	ldr	r3, [pc, #80]	@ (8003228 <MX_UART4_Init+0x58>)
 80031d6:	4a15      	ldr	r2, [pc, #84]	@ (800322c <MX_UART4_Init+0x5c>)
 80031d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80031da:	4b13      	ldr	r3, [pc, #76]	@ (8003228 <MX_UART4_Init+0x58>)
 80031dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80031e2:	4b11      	ldr	r3, [pc, #68]	@ (8003228 <MX_UART4_Init+0x58>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80031e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003228 <MX_UART4_Init+0x58>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80031ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003228 <MX_UART4_Init+0x58>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80031f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003228 <MX_UART4_Init+0x58>)
 80031f6:	220c      	movs	r2, #12
 80031f8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003228 <MX_UART4_Init+0x58>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003200:	4b09      	ldr	r3, [pc, #36]	@ (8003228 <MX_UART4_Init+0x58>)
 8003202:	2200      	movs	r2, #0
 8003204:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003206:	4b08      	ldr	r3, [pc, #32]	@ (8003228 <MX_UART4_Init+0x58>)
 8003208:	2200      	movs	r2, #0
 800320a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800320c:	4b06      	ldr	r3, [pc, #24]	@ (8003228 <MX_UART4_Init+0x58>)
 800320e:	2200      	movs	r2, #0
 8003210:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003212:	4805      	ldr	r0, [pc, #20]	@ (8003228 <MX_UART4_Init+0x58>)
 8003214:	f004 f91e 	bl	8007454 <HAL_UART_Init>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800321e:	f000 f971 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000240 	.word	0x20000240
 800322c:	40004c00 	.word	0x40004c00

08003230 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8003234:	4b14      	ldr	r3, [pc, #80]	@ (8003288 <MX_UART7_Init+0x58>)
 8003236:	4a15      	ldr	r2, [pc, #84]	@ (800328c <MX_UART7_Init+0x5c>)
 8003238:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800323a:	4b13      	ldr	r3, [pc, #76]	@ (8003288 <MX_UART7_Init+0x58>)
 800323c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003240:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8003242:	4b11      	ldr	r3, [pc, #68]	@ (8003288 <MX_UART7_Init+0x58>)
 8003244:	2200      	movs	r2, #0
 8003246:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8003248:	4b0f      	ldr	r3, [pc, #60]	@ (8003288 <MX_UART7_Init+0x58>)
 800324a:	2200      	movs	r2, #0
 800324c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800324e:	4b0e      	ldr	r3, [pc, #56]	@ (8003288 <MX_UART7_Init+0x58>)
 8003250:	2200      	movs	r2, #0
 8003252:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8003254:	4b0c      	ldr	r3, [pc, #48]	@ (8003288 <MX_UART7_Init+0x58>)
 8003256:	220c      	movs	r2, #12
 8003258:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800325a:	4b0b      	ldr	r3, [pc, #44]	@ (8003288 <MX_UART7_Init+0x58>)
 800325c:	2200      	movs	r2, #0
 800325e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003260:	4b09      	ldr	r3, [pc, #36]	@ (8003288 <MX_UART7_Init+0x58>)
 8003262:	2200      	movs	r2, #0
 8003264:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003266:	4b08      	ldr	r3, [pc, #32]	@ (8003288 <MX_UART7_Init+0x58>)
 8003268:	2200      	movs	r2, #0
 800326a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800326c:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <MX_UART7_Init+0x58>)
 800326e:	2200      	movs	r2, #0
 8003270:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8003272:	4805      	ldr	r0, [pc, #20]	@ (8003288 <MX_UART7_Init+0x58>)
 8003274:	f004 f8ee 	bl	8007454 <HAL_UART_Init>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800327e:	f000 f941 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	200002c8 	.word	0x200002c8
 800328c:	40007800 	.word	0x40007800

08003290 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8003294:	4b14      	ldr	r3, [pc, #80]	@ (80032e8 <MX_UART8_Init+0x58>)
 8003296:	4a15      	ldr	r2, [pc, #84]	@ (80032ec <MX_UART8_Init+0x5c>)
 8003298:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800329a:	4b13      	ldr	r3, [pc, #76]	@ (80032e8 <MX_UART8_Init+0x58>)
 800329c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80032a0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80032a2:	4b11      	ldr	r3, [pc, #68]	@ (80032e8 <MX_UART8_Init+0x58>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80032a8:	4b0f      	ldr	r3, [pc, #60]	@ (80032e8 <MX_UART8_Init+0x58>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80032ae:	4b0e      	ldr	r3, [pc, #56]	@ (80032e8 <MX_UART8_Init+0x58>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80032b4:	4b0c      	ldr	r3, [pc, #48]	@ (80032e8 <MX_UART8_Init+0x58>)
 80032b6:	220c      	movs	r2, #12
 80032b8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032ba:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <MX_UART8_Init+0x58>)
 80032bc:	2200      	movs	r2, #0
 80032be:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80032c0:	4b09      	ldr	r3, [pc, #36]	@ (80032e8 <MX_UART8_Init+0x58>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032c6:	4b08      	ldr	r3, [pc, #32]	@ (80032e8 <MX_UART8_Init+0x58>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032cc:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <MX_UART8_Init+0x58>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80032d2:	4805      	ldr	r0, [pc, #20]	@ (80032e8 <MX_UART8_Init+0x58>)
 80032d4:	f004 f8be 	bl	8007454 <HAL_UART_Init>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <MX_UART8_Init+0x52>
  {
    Error_Handler();
 80032de:	f000 f911 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20000350 	.word	0x20000350
 80032ec:	40007c00 	.word	0x40007c00

080032f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032f4:	4b14      	ldr	r3, [pc, #80]	@ (8003348 <MX_USART1_UART_Init+0x58>)
 80032f6:	4a15      	ldr	r2, [pc, #84]	@ (800334c <MX_USART1_UART_Init+0x5c>)
 80032f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80032fa:	4b13      	ldr	r3, [pc, #76]	@ (8003348 <MX_USART1_UART_Init+0x58>)
 80032fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003300:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003302:	4b11      	ldr	r3, [pc, #68]	@ (8003348 <MX_USART1_UART_Init+0x58>)
 8003304:	2200      	movs	r2, #0
 8003306:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003308:	4b0f      	ldr	r3, [pc, #60]	@ (8003348 <MX_USART1_UART_Init+0x58>)
 800330a:	2200      	movs	r2, #0
 800330c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800330e:	4b0e      	ldr	r3, [pc, #56]	@ (8003348 <MX_USART1_UART_Init+0x58>)
 8003310:	2200      	movs	r2, #0
 8003312:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003314:	4b0c      	ldr	r3, [pc, #48]	@ (8003348 <MX_USART1_UART_Init+0x58>)
 8003316:	220c      	movs	r2, #12
 8003318:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800331a:	4b0b      	ldr	r3, [pc, #44]	@ (8003348 <MX_USART1_UART_Init+0x58>)
 800331c:	2200      	movs	r2, #0
 800331e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003320:	4b09      	ldr	r3, [pc, #36]	@ (8003348 <MX_USART1_UART_Init+0x58>)
 8003322:	2200      	movs	r2, #0
 8003324:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003326:	4b08      	ldr	r3, [pc, #32]	@ (8003348 <MX_USART1_UART_Init+0x58>)
 8003328:	2200      	movs	r2, #0
 800332a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <MX_USART1_UART_Init+0x58>)
 800332e:	2200      	movs	r2, #0
 8003330:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003332:	4805      	ldr	r0, [pc, #20]	@ (8003348 <MX_USART1_UART_Init+0x58>)
 8003334:	f004 f88e 	bl	8007454 <HAL_UART_Init>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800333e:	f000 f8e1 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	200003d8 	.word	0x200003d8
 800334c:	40011000 	.word	0x40011000

08003350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08c      	sub	sp, #48	@ 0x30
 8003354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003356:	f107 031c 	add.w	r3, r7, #28
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	605a      	str	r2, [r3, #4]
 8003360:	609a      	str	r2, [r3, #8]
 8003362:	60da      	str	r2, [r3, #12]
 8003364:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003366:	4b61      	ldr	r3, [pc, #388]	@ (80034ec <MX_GPIO_Init+0x19c>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336a:	4a60      	ldr	r2, [pc, #384]	@ (80034ec <MX_GPIO_Init+0x19c>)
 800336c:	f043 0320 	orr.w	r3, r3, #32
 8003370:	6313      	str	r3, [r2, #48]	@ 0x30
 8003372:	4b5e      	ldr	r3, [pc, #376]	@ (80034ec <MX_GPIO_Init+0x19c>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	61bb      	str	r3, [r7, #24]
 800337c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800337e:	4b5b      	ldr	r3, [pc, #364]	@ (80034ec <MX_GPIO_Init+0x19c>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	4a5a      	ldr	r2, [pc, #360]	@ (80034ec <MX_GPIO_Init+0x19c>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	6313      	str	r3, [r2, #48]	@ 0x30
 800338a:	4b58      	ldr	r3, [pc, #352]	@ (80034ec <MX_GPIO_Init+0x19c>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003396:	4b55      	ldr	r3, [pc, #340]	@ (80034ec <MX_GPIO_Init+0x19c>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339a:	4a54      	ldr	r2, [pc, #336]	@ (80034ec <MX_GPIO_Init+0x19c>)
 800339c:	f043 0304 	orr.w	r3, r3, #4
 80033a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033a2:	4b52      	ldr	r3, [pc, #328]	@ (80034ec <MX_GPIO_Init+0x19c>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	613b      	str	r3, [r7, #16]
 80033ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ae:	4b4f      	ldr	r3, [pc, #316]	@ (80034ec <MX_GPIO_Init+0x19c>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b2:	4a4e      	ldr	r2, [pc, #312]	@ (80034ec <MX_GPIO_Init+0x19c>)
 80033b4:	f043 0302 	orr.w	r3, r3, #2
 80033b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ba:	4b4c      	ldr	r3, [pc, #304]	@ (80034ec <MX_GPIO_Init+0x19c>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033c6:	4b49      	ldr	r3, [pc, #292]	@ (80034ec <MX_GPIO_Init+0x19c>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ca:	4a48      	ldr	r2, [pc, #288]	@ (80034ec <MX_GPIO_Init+0x19c>)
 80033cc:	f043 0310 	orr.w	r3, r3, #16
 80033d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033d2:	4b46      	ldr	r3, [pc, #280]	@ (80034ec <MX_GPIO_Init+0x19c>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033de:	4b43      	ldr	r3, [pc, #268]	@ (80034ec <MX_GPIO_Init+0x19c>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	4a42      	ldr	r2, [pc, #264]	@ (80034ec <MX_GPIO_Init+0x19c>)
 80033e4:	f043 0308 	orr.w	r3, r3, #8
 80033e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ea:	4b40      	ldr	r3, [pc, #256]	@ (80034ec <MX_GPIO_Init+0x19c>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	607b      	str	r3, [r7, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80033f6:	4b3d      	ldr	r3, [pc, #244]	@ (80034ec <MX_GPIO_Init+0x19c>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fa:	4a3c      	ldr	r2, [pc, #240]	@ (80034ec <MX_GPIO_Init+0x19c>)
 80033fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003400:	6313      	str	r3, [r2, #48]	@ 0x30
 8003402:	4b3a      	ldr	r3, [pc, #232]	@ (80034ec <MX_GPIO_Init+0x19c>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DIR8_Pin|DIR3_Pin|DIR4_Pin|DIR5_Pin
 800340e:	2200      	movs	r2, #0
 8003410:	f64f 0108 	movw	r1, #63496	@ 0xf808
 8003414:	4836      	ldr	r0, [pc, #216]	@ (80034f0 <MX_GPIO_Init+0x1a0>)
 8003416:	f001 f919 	bl	800464c <HAL_GPIO_WritePin>
                          |DIR6_Pin|DIR7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, P1_Pin|DIR1_Pin|P2_Pin|P3_Pin
 800341a:	2200      	movs	r2, #0
 800341c:	f44f 71f8 	mov.w	r1, #496	@ 0x1f0
 8003420:	4834      	ldr	r0, [pc, #208]	@ (80034f4 <MX_GPIO_Init+0x1a4>)
 8003422:	f001 f913 	bl	800464c <HAL_GPIO_WritePin>
                          |DIR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DIR8_Pin DIR3_Pin DIR4_Pin DIR5_Pin
                           DIR6_Pin DIR7_Pin */
  GPIO_InitStruct.Pin = DIR8_Pin|DIR3_Pin|DIR4_Pin|DIR5_Pin
 8003426:	f64f 0308 	movw	r3, #63496	@ 0xf808
 800342a:	61fb      	str	r3, [r7, #28]
                          |DIR6_Pin|DIR7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800342c:	2301      	movs	r3, #1
 800342e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003430:	2300      	movs	r3, #0
 8003432:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003434:	2300      	movs	r3, #0
 8003436:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003438:	f107 031c 	add.w	r3, r7, #28
 800343c:	4619      	mov	r1, r3
 800343e:	482c      	ldr	r0, [pc, #176]	@ (80034f0 <MX_GPIO_Init+0x1a0>)
 8003440:	f000 ff68 	bl	8004314 <HAL_GPIO_Init>

  /*Configure GPIO pin : E1A_Pin */
  GPIO_InitStruct.Pin = E1A_Pin;
 8003444:	2320      	movs	r3, #32
 8003446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003448:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800344c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800344e:	2301      	movs	r3, #1
 8003450:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(E1A_GPIO_Port, &GPIO_InitStruct);
 8003452:	f107 031c 	add.w	r3, r7, #28
 8003456:	4619      	mov	r1, r3
 8003458:	4827      	ldr	r0, [pc, #156]	@ (80034f8 <MX_GPIO_Init+0x1a8>)
 800345a:	f000 ff5b 	bl	8004314 <HAL_GPIO_Init>

  /*Configure GPIO pins : E2A_Pin E1B_Pin E3B_Pin E3A_Pin
                           E2B_Pin */
  GPIO_InitStruct.Pin = E2A_Pin|E1B_Pin|E3B_Pin|E3A_Pin
 800345e:	f24f 0304 	movw	r3, #61444	@ 0xf004
 8003462:	61fb      	str	r3, [r7, #28]
                          |E2B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003464:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800346a:	2301      	movs	r3, #1
 800346c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800346e:	f107 031c 	add.w	r3, r7, #28
 8003472:	4619      	mov	r1, r3
 8003474:	4821      	ldr	r0, [pc, #132]	@ (80034fc <MX_GPIO_Init+0x1ac>)
 8003476:	f000 ff4d 	bl	8004314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800347a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800347e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003480:	2300      	movs	r3, #0
 8003482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003484:	2300      	movs	r3, #0
 8003486:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003488:	f107 031c 	add.w	r3, r7, #28
 800348c:	4619      	mov	r1, r3
 800348e:	481c      	ldr	r0, [pc, #112]	@ (8003500 <MX_GPIO_Init+0x1b0>)
 8003490:	f000 ff40 	bl	8004314 <HAL_GPIO_Init>

  /*Configure GPIO pins : P1_Pin DIR1_Pin P2_Pin P3_Pin
                           DIR2_Pin */
  GPIO_InitStruct.Pin = P1_Pin|DIR1_Pin|P2_Pin|P3_Pin
 8003494:	f44f 73f8 	mov.w	r3, #496	@ 0x1f0
 8003498:	61fb      	str	r3, [r7, #28]
                          |DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800349a:	2301      	movs	r3, #1
 800349c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a2:	2300      	movs	r3, #0
 80034a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034a6:	f107 031c 	add.w	r3, r7, #28
 80034aa:	4619      	mov	r1, r3
 80034ac:	4811      	ldr	r0, [pc, #68]	@ (80034f4 <MX_GPIO_Init+0x1a4>)
 80034ae:	f000 ff31 	bl	8004314 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80034b2:	2200      	movs	r2, #0
 80034b4:	2100      	movs	r1, #0
 80034b6:	2008      	movs	r0, #8
 80034b8:	f000 fe63 	bl	8004182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80034bc:	2008      	movs	r0, #8
 80034be:	f000 fe7c 	bl	80041ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80034c2:	2200      	movs	r2, #0
 80034c4:	2100      	movs	r1, #0
 80034c6:	2017      	movs	r0, #23
 80034c8:	f000 fe5b 	bl	8004182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80034cc:	2017      	movs	r0, #23
 80034ce:	f000 fe74 	bl	80041ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80034d2:	2200      	movs	r2, #0
 80034d4:	2100      	movs	r1, #0
 80034d6:	2028      	movs	r0, #40	@ 0x28
 80034d8:	f000 fe53 	bl	8004182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80034dc:	2028      	movs	r0, #40	@ 0x28
 80034de:	f000 fe6c 	bl	80041ba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80034e2:	bf00      	nop
 80034e4:	3730      	adds	r7, #48	@ 0x30
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40021400 	.word	0x40021400
 80034f4:	40021800 	.word	0x40021800
 80034f8:	40020800 	.word	0x40020800
 80034fc:	40020400 	.word	0x40020400
 8003500:	40020c00 	.word	0x40020c00

08003504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003508:	b672      	cpsid	i
}
 800350a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800350c:	bf00      	nop
 800350e:	e7fd      	b.n	800350c <Error_Handler+0x8>

08003510 <Servo_Init>:
 */

#include "servo_driver.h"

// Initialize Servo with Timer and Channel
void Servo_Init(Servo_t* servo, TIM_HandleTypeDef* htim, uint32_t Channel) {
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
    servo->htim = htim;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	601a      	str	r2, [r3, #0]
    servo->Channel = Channel;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	605a      	str	r2, [r3, #4]
    HAL_TIM_PWM_Start(htim, Channel);  // Start PWM
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	68b8      	ldr	r0, [r7, #8]
 800352c:	f002 ffea 	bl	8006504 <HAL_TIM_PWM_Start>
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <Servo_SetAngle>:

// Set Servo Angle (0° - 180°)
void Servo_SetAngle(Servo_t* servo, uint8_t angle) {
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	70fb      	strb	r3, [r7, #3]
    if (angle > SERVO_MAX_ANGLE) angle = SERVO_MAX_ANGLE;
 8003544:	78fb      	ldrb	r3, [r7, #3]
 8003546:	2bb4      	cmp	r3, #180	@ 0xb4
 8003548:	d901      	bls.n	800354e <Servo_SetAngle+0x16>
 800354a:	23b4      	movs	r3, #180	@ 0xb4
 800354c:	70fb      	strb	r3, [r7, #3]

    // Convert angle to CCR using linear mapping
    uint16_t ccr_value = SERVO_MIN_CCR + ((angle * (SERVO_MAX_CCR - SERVO_MIN_CCR)) / SERVO_MAX_ANGLE);
 800354e:	78fb      	ldrb	r3, [r7, #3]
 8003550:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003554:	fb02 f303 	mul.w	r3, r2, r3
 8003558:	4a23      	ldr	r2, [pc, #140]	@ (80035e8 <Servo_SetAngle+0xb0>)
 800355a:	fb82 1203 	smull	r1, r2, r2, r3
 800355e:	441a      	add	r2, r3
 8003560:	11d2      	asrs	r2, r2, #7
 8003562:	17db      	asrs	r3, r3, #31
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	b29b      	uxth	r3, r3
 8003568:	33fa      	adds	r3, #250	@ 0xfa
 800356a:	81fb      	strh	r3, [r7, #14]

    // Set PWM Compare Register
    __HAL_TIM_SET_COMPARE(servo->htim, servo->Channel, ccr_value);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d105      	bne.n	8003580 <Servo_SetAngle+0x48>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	89fa      	ldrh	r2, [r7, #14]
 800357c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800357e:	e02c      	b.n	80035da <Servo_SetAngle+0xa2>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->Channel, ccr_value);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b04      	cmp	r3, #4
 8003586:	d105      	bne.n	8003594 <Servo_SetAngle+0x5c>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	89fb      	ldrh	r3, [r7, #14]
 8003590:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003592:	e022      	b.n	80035da <Servo_SetAngle+0xa2>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->Channel, ccr_value);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b08      	cmp	r3, #8
 800359a:	d105      	bne.n	80035a8 <Servo_SetAngle+0x70>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	89fb      	ldrh	r3, [r7, #14]
 80035a4:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80035a6:	e018      	b.n	80035da <Servo_SetAngle+0xa2>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->Channel, ccr_value);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b0c      	cmp	r3, #12
 80035ae:	d105      	bne.n	80035bc <Servo_SetAngle+0x84>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	89fb      	ldrh	r3, [r7, #14]
 80035b8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80035ba:	e00e      	b.n	80035da <Servo_SetAngle+0xa2>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->Channel, ccr_value);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b10      	cmp	r3, #16
 80035c2:	d105      	bne.n	80035d0 <Servo_SetAngle+0x98>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	89fb      	ldrh	r3, [r7, #14]
 80035cc:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80035ce:	e004      	b.n	80035da <Servo_SetAngle+0xa2>
    __HAL_TIM_SET_COMPARE(servo->htim, servo->Channel, ccr_value);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	89fb      	ldrh	r3, [r7, #14]
 80035d8:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80035da:	bf00      	nop
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	b60b60b7 	.word	0xb60b60b7

080035ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80035f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003630 <HAL_MspInit+0x44>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	4a0e      	ldr	r2, [pc, #56]	@ (8003630 <HAL_MspInit+0x44>)
 80035f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80035fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003630 <HAL_MspInit+0x44>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003606:	607b      	str	r3, [r7, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800360a:	4b09      	ldr	r3, [pc, #36]	@ (8003630 <HAL_MspInit+0x44>)
 800360c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360e:	4a08      	ldr	r2, [pc, #32]	@ (8003630 <HAL_MspInit+0x44>)
 8003610:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003614:	6453      	str	r3, [r2, #68]	@ 0x44
 8003616:	4b06      	ldr	r3, [pc, #24]	@ (8003630 <HAL_MspInit+0x44>)
 8003618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800

08003634 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b0aa      	sub	sp, #168	@ 0xa8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800363c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	60da      	str	r2, [r3, #12]
 800364a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800364c:	f107 0314 	add.w	r3, r7, #20
 8003650:	2280      	movs	r2, #128	@ 0x80
 8003652:	2100      	movs	r1, #0
 8003654:	4618      	mov	r0, r3
 8003656:	f005 fcbb 	bl	8008fd0 <memset>
  if(hi2c->Instance==I2C2)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a21      	ldr	r2, [pc, #132]	@ (80036e4 <HAL_I2C_MspInit+0xb0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d13b      	bne.n	80036dc <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003664:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003668:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800366a:	2300      	movs	r3, #0
 800366c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800366e:	f107 0314 	add.w	r3, r7, #20
 8003672:	4618      	mov	r0, r3
 8003674:	f002 fb44 	bl	8005d00 <HAL_RCCEx_PeriphCLKConfig>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800367e:	f7ff ff41 	bl	8003504 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003682:	4b19      	ldr	r3, [pc, #100]	@ (80036e8 <HAL_I2C_MspInit+0xb4>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003686:	4a18      	ldr	r2, [pc, #96]	@ (80036e8 <HAL_I2C_MspInit+0xb4>)
 8003688:	f043 0320 	orr.w	r3, r3, #32
 800368c:	6313      	str	r3, [r2, #48]	@ 0x30
 800368e:	4b16      	ldr	r3, [pc, #88]	@ (80036e8 <HAL_I2C_MspInit+0xb4>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800369a:	2303      	movs	r3, #3
 800369c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036a0:	2312      	movs	r3, #18
 80036a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ac:	2303      	movs	r3, #3
 80036ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80036b2:	2304      	movs	r3, #4
 80036b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036b8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80036bc:	4619      	mov	r1, r3
 80036be:	480b      	ldr	r0, [pc, #44]	@ (80036ec <HAL_I2C_MspInit+0xb8>)
 80036c0:	f000 fe28 	bl	8004314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80036c4:	4b08      	ldr	r3, [pc, #32]	@ (80036e8 <HAL_I2C_MspInit+0xb4>)
 80036c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c8:	4a07      	ldr	r2, [pc, #28]	@ (80036e8 <HAL_I2C_MspInit+0xb4>)
 80036ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80036ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80036d0:	4b05      	ldr	r3, [pc, #20]	@ (80036e8 <HAL_I2C_MspInit+0xb4>)
 80036d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80036dc:	bf00      	nop
 80036de:	37a8      	adds	r7, #168	@ 0xa8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40005800 	.word	0x40005800
 80036e8:	40023800 	.word	0x40023800
 80036ec:	40021400 	.word	0x40021400

080036f0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a25      	ldr	r2, [pc, #148]	@ (8003794 <HAL_TIM_Base_MspInit+0xa4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d10c      	bne.n	800371c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003702:	4b25      	ldr	r3, [pc, #148]	@ (8003798 <HAL_TIM_Base_MspInit+0xa8>)
 8003704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003706:	4a24      	ldr	r2, [pc, #144]	@ (8003798 <HAL_TIM_Base_MspInit+0xa8>)
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	6453      	str	r3, [r2, #68]	@ 0x44
 800370e:	4b22      	ldr	r3, [pc, #136]	@ (8003798 <HAL_TIM_Base_MspInit+0xa8>)
 8003710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 800371a:	e034      	b.n	8003786 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003724:	d10c      	bne.n	8003740 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003726:	4b1c      	ldr	r3, [pc, #112]	@ (8003798 <HAL_TIM_Base_MspInit+0xa8>)
 8003728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372a:	4a1b      	ldr	r2, [pc, #108]	@ (8003798 <HAL_TIM_Base_MspInit+0xa8>)
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	6413      	str	r3, [r2, #64]	@ 0x40
 8003732:	4b19      	ldr	r3, [pc, #100]	@ (8003798 <HAL_TIM_Base_MspInit+0xa8>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	693b      	ldr	r3, [r7, #16]
}
 800373e:	e022      	b.n	8003786 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a15      	ldr	r2, [pc, #84]	@ (800379c <HAL_TIM_Base_MspInit+0xac>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d10c      	bne.n	8003764 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800374a:	4b13      	ldr	r3, [pc, #76]	@ (8003798 <HAL_TIM_Base_MspInit+0xa8>)
 800374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374e:	4a12      	ldr	r2, [pc, #72]	@ (8003798 <HAL_TIM_Base_MspInit+0xa8>)
 8003750:	f043 0302 	orr.w	r3, r3, #2
 8003754:	6413      	str	r3, [r2, #64]	@ 0x40
 8003756:	4b10      	ldr	r3, [pc, #64]	@ (8003798 <HAL_TIM_Base_MspInit+0xa8>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
}
 8003762:	e010      	b.n	8003786 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a0d      	ldr	r2, [pc, #52]	@ (80037a0 <HAL_TIM_Base_MspInit+0xb0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d10b      	bne.n	8003786 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800376e:	4b0a      	ldr	r3, [pc, #40]	@ (8003798 <HAL_TIM_Base_MspInit+0xa8>)
 8003770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003772:	4a09      	ldr	r2, [pc, #36]	@ (8003798 <HAL_TIM_Base_MspInit+0xa8>)
 8003774:	f043 0302 	orr.w	r3, r3, #2
 8003778:	6453      	str	r3, [r2, #68]	@ 0x44
 800377a:	4b07      	ldr	r3, [pc, #28]	@ (8003798 <HAL_TIM_Base_MspInit+0xa8>)
 800377c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	68bb      	ldr	r3, [r7, #8]
}
 8003786:	bf00      	nop
 8003788:	371c      	adds	r7, #28
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40010000 	.word	0x40010000
 8003798:	40023800 	.word	0x40023800
 800379c:	40000400 	.word	0x40000400
 80037a0:	40010400 	.word	0x40010400

080037a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08c      	sub	sp, #48	@ 0x30
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ac:	f107 031c 	add.w	r3, r7, #28
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	605a      	str	r2, [r3, #4]
 80037b6:	609a      	str	r2, [r3, #8]
 80037b8:	60da      	str	r2, [r3, #12]
 80037ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a53      	ldr	r2, [pc, #332]	@ (8003910 <HAL_TIM_MspPostInit+0x16c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d11d      	bne.n	8003802 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80037c6:	4b53      	ldr	r3, [pc, #332]	@ (8003914 <HAL_TIM_MspPostInit+0x170>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	4a52      	ldr	r2, [pc, #328]	@ (8003914 <HAL_TIM_MspPostInit+0x170>)
 80037cc:	f043 0310 	orr.w	r3, r3, #16
 80037d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037d2:	4b50      	ldr	r3, [pc, #320]	@ (8003914 <HAL_TIM_MspPostInit+0x170>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d6:	f003 0310 	and.w	r3, r3, #16
 80037da:	61bb      	str	r3, [r7, #24]
 80037dc:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80037de:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80037e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e4:	2302      	movs	r3, #2
 80037e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ec:	2300      	movs	r3, #0
 80037ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037f0:	2301      	movs	r3, #1
 80037f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037f4:	f107 031c 	add.w	r3, r7, #28
 80037f8:	4619      	mov	r1, r3
 80037fa:	4847      	ldr	r0, [pc, #284]	@ (8003918 <HAL_TIM_MspPostInit+0x174>)
 80037fc:	f000 fd8a 	bl	8004314 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003800:	e081      	b.n	8003906 <HAL_TIM_MspPostInit+0x162>
  else if(htim->Instance==TIM2)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800380a:	d138      	bne.n	800387e <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800380c:	4b41      	ldr	r3, [pc, #260]	@ (8003914 <HAL_TIM_MspPostInit+0x170>)
 800380e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003810:	4a40      	ldr	r2, [pc, #256]	@ (8003914 <HAL_TIM_MspPostInit+0x170>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	6313      	str	r3, [r2, #48]	@ 0x30
 8003818:	4b3e      	ldr	r3, [pc, #248]	@ (8003914 <HAL_TIM_MspPostInit+0x170>)
 800381a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003824:	4b3b      	ldr	r3, [pc, #236]	@ (8003914 <HAL_TIM_MspPostInit+0x170>)
 8003826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003828:	4a3a      	ldr	r2, [pc, #232]	@ (8003914 <HAL_TIM_MspPostInit+0x170>)
 800382a:	f043 0302 	orr.w	r3, r3, #2
 800382e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003830:	4b38      	ldr	r3, [pc, #224]	@ (8003914 <HAL_TIM_MspPostInit+0x170>)
 8003832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 800383c:	232c      	movs	r3, #44	@ 0x2c
 800383e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003840:	2302      	movs	r3, #2
 8003842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003844:	2300      	movs	r3, #0
 8003846:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003848:	2300      	movs	r3, #0
 800384a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800384c:	2301      	movs	r3, #1
 800384e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003850:	f107 031c 	add.w	r3, r7, #28
 8003854:	4619      	mov	r1, r3
 8003856:	4831      	ldr	r0, [pc, #196]	@ (800391c <HAL_TIM_MspPostInit+0x178>)
 8003858:	f000 fd5c 	bl	8004314 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800385c:	2308      	movs	r3, #8
 800385e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003860:	2302      	movs	r3, #2
 8003862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003864:	2300      	movs	r3, #0
 8003866:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003868:	2300      	movs	r3, #0
 800386a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800386c:	2301      	movs	r3, #1
 800386e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003870:	f107 031c 	add.w	r3, r7, #28
 8003874:	4619      	mov	r1, r3
 8003876:	482a      	ldr	r0, [pc, #168]	@ (8003920 <HAL_TIM_MspPostInit+0x17c>)
 8003878:	f000 fd4c 	bl	8004314 <HAL_GPIO_Init>
}
 800387c:	e043      	b.n	8003906 <HAL_TIM_MspPostInit+0x162>
  else if(htim->Instance==TIM3)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a28      	ldr	r2, [pc, #160]	@ (8003924 <HAL_TIM_MspPostInit+0x180>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d11c      	bne.n	80038c2 <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003888:	4b22      	ldr	r3, [pc, #136]	@ (8003914 <HAL_TIM_MspPostInit+0x170>)
 800388a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388c:	4a21      	ldr	r2, [pc, #132]	@ (8003914 <HAL_TIM_MspPostInit+0x170>)
 800388e:	f043 0301 	orr.w	r3, r3, #1
 8003892:	6313      	str	r3, [r2, #48]	@ 0x30
 8003894:	4b1f      	ldr	r3, [pc, #124]	@ (8003914 <HAL_TIM_MspPostInit+0x170>)
 8003896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80038a0:	2340      	movs	r3, #64	@ 0x40
 80038a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a4:	2302      	movs	r3, #2
 80038a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ac:	2300      	movs	r3, #0
 80038ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038b0:	2302      	movs	r3, #2
 80038b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038b4:	f107 031c 	add.w	r3, r7, #28
 80038b8:	4619      	mov	r1, r3
 80038ba:	4818      	ldr	r0, [pc, #96]	@ (800391c <HAL_TIM_MspPostInit+0x178>)
 80038bc:	f000 fd2a 	bl	8004314 <HAL_GPIO_Init>
}
 80038c0:	e021      	b.n	8003906 <HAL_TIM_MspPostInit+0x162>
  else if(htim->Instance==TIM8)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a18      	ldr	r2, [pc, #96]	@ (8003928 <HAL_TIM_MspPostInit+0x184>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d11c      	bne.n	8003906 <HAL_TIM_MspPostInit+0x162>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038cc:	4b11      	ldr	r3, [pc, #68]	@ (8003914 <HAL_TIM_MspPostInit+0x170>)
 80038ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d0:	4a10      	ldr	r2, [pc, #64]	@ (8003914 <HAL_TIM_MspPostInit+0x170>)
 80038d2:	f043 0304 	orr.w	r3, r3, #4
 80038d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80038d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003914 <HAL_TIM_MspPostInit+0x170>)
 80038da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80038e4:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80038e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ea:	2302      	movs	r3, #2
 80038ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f2:	2300      	movs	r3, #0
 80038f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80038f6:	2303      	movs	r3, #3
 80038f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038fa:	f107 031c 	add.w	r3, r7, #28
 80038fe:	4619      	mov	r1, r3
 8003900:	480a      	ldr	r0, [pc, #40]	@ (800392c <HAL_TIM_MspPostInit+0x188>)
 8003902:	f000 fd07 	bl	8004314 <HAL_GPIO_Init>
}
 8003906:	bf00      	nop
 8003908:	3730      	adds	r7, #48	@ 0x30
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40010000 	.word	0x40010000
 8003914:	40023800 	.word	0x40023800
 8003918:	40021000 	.word	0x40021000
 800391c:	40020000 	.word	0x40020000
 8003920:	40020400 	.word	0x40020400
 8003924:	40000400 	.word	0x40000400
 8003928:	40010400 	.word	0x40010400
 800392c:	40020800 	.word	0x40020800

08003930 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b0b0      	sub	sp, #192	@ 0xc0
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003938:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	60da      	str	r2, [r3, #12]
 8003946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003948:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800394c:	2280      	movs	r2, #128	@ 0x80
 800394e:	2100      	movs	r1, #0
 8003950:	4618      	mov	r0, r3
 8003952:	f005 fb3d 	bl	8008fd0 <memset>
  if(huart->Instance==UART4)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a96      	ldr	r2, [pc, #600]	@ (8003bb4 <HAL_UART_MspInit+0x284>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d145      	bne.n	80039ec <HAL_UART_MspInit+0xbc>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003960:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003964:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003966:	2300      	movs	r3, #0
 8003968:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800396a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800396e:	4618      	mov	r0, r3
 8003970:	f002 f9c6 	bl	8005d00 <HAL_RCCEx_PeriphCLKConfig>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800397a:	f7ff fdc3 	bl	8003504 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800397e:	4b8e      	ldr	r3, [pc, #568]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003982:	4a8d      	ldr	r2, [pc, #564]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 8003984:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003988:	6413      	str	r3, [r2, #64]	@ 0x40
 800398a:	4b8b      	ldr	r3, [pc, #556]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003992:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003994:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003996:	4b88      	ldr	r3, [pc, #544]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399a:	4a87      	ldr	r2, [pc, #540]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 800399c:	f043 0304 	orr.w	r3, r3, #4
 80039a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80039a2:	4b85      	ldr	r3, [pc, #532]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80039ae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80039b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b6:	2302      	movs	r3, #2
 80039b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039bc:	2300      	movs	r3, #0
 80039be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c2:	2303      	movs	r3, #3
 80039c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80039c8:	2308      	movs	r3, #8
 80039ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039ce:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80039d2:	4619      	mov	r1, r3
 80039d4:	4879      	ldr	r0, [pc, #484]	@ (8003bbc <HAL_UART_MspInit+0x28c>)
 80039d6:	f000 fc9d 	bl	8004314 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80039da:	2200      	movs	r2, #0
 80039dc:	2100      	movs	r1, #0
 80039de:	2034      	movs	r0, #52	@ 0x34
 80039e0:	f000 fbcf 	bl	8004182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80039e4:	2034      	movs	r0, #52	@ 0x34
 80039e6:	f000 fbe8 	bl	80041ba <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 80039ea:	e0df      	b.n	8003bac <HAL_UART_MspInit+0x27c>
  else if(huart->Instance==UART7)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a73      	ldr	r2, [pc, #460]	@ (8003bc0 <HAL_UART_MspInit+0x290>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d146      	bne.n	8003a84 <HAL_UART_MspInit+0x154>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80039f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80039fc:	2300      	movs	r3, #0
 80039fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a06:	4618      	mov	r0, r3
 8003a08:	f002 f97a 	bl	8005d00 <HAL_RCCEx_PeriphCLKConfig>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_UART_MspInit+0xe6>
      Error_Handler();
 8003a12:	f7ff fd77 	bl	8003504 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8003a16:	4b68      	ldr	r3, [pc, #416]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1a:	4a67      	ldr	r2, [pc, #412]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 8003a1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a22:	4b65      	ldr	r3, [pc, #404]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a26:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003a2a:	623b      	str	r3, [r7, #32]
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a2e:	4b62      	ldr	r3, [pc, #392]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a32:	4a61      	ldr	r2, [pc, #388]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 8003a34:	f043 0310 	orr.w	r3, r3, #16
 8003a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a3a:	4b5f      	ldr	r3, [pc, #380]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3e:	f003 0310 	and.w	r3, r3, #16
 8003a42:	61fb      	str	r3, [r7, #28]
 8003a44:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003a46:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003a4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003a60:	2308      	movs	r3, #8
 8003a62:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a66:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4855      	ldr	r0, [pc, #340]	@ (8003bc4 <HAL_UART_MspInit+0x294>)
 8003a6e:	f000 fc51 	bl	8004314 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8003a72:	2200      	movs	r2, #0
 8003a74:	2100      	movs	r1, #0
 8003a76:	2052      	movs	r0, #82	@ 0x52
 8003a78:	f000 fb83 	bl	8004182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8003a7c:	2052      	movs	r0, #82	@ 0x52
 8003a7e:	f000 fb9c 	bl	80041ba <HAL_NVIC_EnableIRQ>
}
 8003a82:	e093      	b.n	8003bac <HAL_UART_MspInit+0x27c>
  else if(huart->Instance==UART8)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a4f      	ldr	r2, [pc, #316]	@ (8003bc8 <HAL_UART_MspInit+0x298>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d145      	bne.n	8003b1a <HAL_UART_MspInit+0x1ea>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8003a8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8003a94:	2300      	movs	r3, #0
 8003a96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f002 f92e 	bl	8005d00 <HAL_RCCEx_PeriphCLKConfig>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <HAL_UART_MspInit+0x17e>
      Error_Handler();
 8003aaa:	f7ff fd2b 	bl	8003504 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8003aae:	4b42      	ldr	r3, [pc, #264]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	4a41      	ldr	r2, [pc, #260]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 8003ab4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aba:	4b3f      	ldr	r3, [pc, #252]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ac2:	61bb      	str	r3, [r7, #24]
 8003ac4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ac6:	4b3c      	ldr	r3, [pc, #240]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aca:	4a3b      	ldr	r2, [pc, #236]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 8003acc:	f043 0310 	orr.w	r3, r3, #16
 8003ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ad2:	4b39      	ldr	r3, [pc, #228]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af0:	2303      	movs	r3, #3
 8003af2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003af6:	2308      	movs	r3, #8
 8003af8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003afc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003b00:	4619      	mov	r1, r3
 8003b02:	4830      	ldr	r0, [pc, #192]	@ (8003bc4 <HAL_UART_MspInit+0x294>)
 8003b04:	f000 fc06 	bl	8004314 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	2053      	movs	r0, #83	@ 0x53
 8003b0e:	f000 fb38 	bl	8004182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8003b12:	2053      	movs	r0, #83	@ 0x53
 8003b14:	f000 fb51 	bl	80041ba <HAL_NVIC_EnableIRQ>
}
 8003b18:	e048      	b.n	8003bac <HAL_UART_MspInit+0x27c>
  else if(huart->Instance==USART1)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a2b      	ldr	r2, [pc, #172]	@ (8003bcc <HAL_UART_MspInit+0x29c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d143      	bne.n	8003bac <HAL_UART_MspInit+0x27c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003b24:	2340      	movs	r3, #64	@ 0x40
 8003b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b30:	4618      	mov	r0, r3
 8003b32:	f002 f8e5 	bl	8005d00 <HAL_RCCEx_PeriphCLKConfig>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_UART_MspInit+0x210>
      Error_Handler();
 8003b3c:	f7ff fce2 	bl	8003504 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b40:	4b1d      	ldr	r3, [pc, #116]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 8003b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b44:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 8003b46:	f043 0310 	orr.w	r3, r3, #16
 8003b4a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b50:	f003 0310 	and.w	r3, r3, #16
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b58:	4b17      	ldr	r3, [pc, #92]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5c:	4a16      	ldr	r2, [pc, #88]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b64:	4b14      	ldr	r3, [pc, #80]	@ (8003bb8 <HAL_UART_MspInit+0x288>)
 8003b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b68:	f003 0301 	and.w	r3, r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003b70:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003b74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b84:	2303      	movs	r3, #3
 8003b86:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b8a:	2307      	movs	r3, #7
 8003b8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b90:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003b94:	4619      	mov	r1, r3
 8003b96:	480e      	ldr	r0, [pc, #56]	@ (8003bd0 <HAL_UART_MspInit+0x2a0>)
 8003b98:	f000 fbbc 	bl	8004314 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	2025      	movs	r0, #37	@ 0x25
 8003ba2:	f000 faee 	bl	8004182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ba6:	2025      	movs	r0, #37	@ 0x25
 8003ba8:	f000 fb07 	bl	80041ba <HAL_NVIC_EnableIRQ>
}
 8003bac:	bf00      	nop
 8003bae:	37c0      	adds	r7, #192	@ 0xc0
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40004c00 	.word	0x40004c00
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	40020800 	.word	0x40020800
 8003bc0:	40007800 	.word	0x40007800
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40007c00 	.word	0x40007c00
 8003bcc:	40011000 	.word	0x40011000
 8003bd0:	40020000 	.word	0x40020000

08003bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003bd8:	bf00      	nop
 8003bda:	e7fd      	b.n	8003bd8 <NMI_Handler+0x4>

08003bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003be0:	bf00      	nop
 8003be2:	e7fd      	b.n	8003be0 <HardFault_Handler+0x4>

08003be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003be8:	bf00      	nop
 8003bea:	e7fd      	b.n	8003be8 <MemManage_Handler+0x4>

08003bec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bf0:	bf00      	nop
 8003bf2:	e7fd      	b.n	8003bf0 <BusFault_Handler+0x4>

08003bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bf8:	bf00      	nop
 8003bfa:	e7fd      	b.n	8003bf8 <UsageFault_Handler+0x4>

08003bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c00:	bf00      	nop
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c0e:	bf00      	nop
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c1c:	bf00      	nop
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c2a:	f000 f98b 	bl	8003f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E2A_Pin);
 8003c36:	2004      	movs	r0, #4
 8003c38:	f000 fd22 	bl	8004680 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003c3c:	bf00      	nop
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E1A_Pin);
 8003c44:	2020      	movs	r0, #32
 8003c46:	f000 fd1b 	bl	8004680 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c54:	4802      	ldr	r0, [pc, #8]	@ (8003c60 <USART1_IRQHandler+0x10>)
 8003c56:	f003 fcd5 	bl	8007604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c5a:	bf00      	nop
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	200003d8 	.word	0x200003d8

08003c64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(E1B_Pin);
 8003c68:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003c6c:	f000 fd08 	bl	8004680 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(E3B_Pin);
 8003c70:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003c74:	f000 fd04 	bl	8004680 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(E3A_Pin);
 8003c78:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003c7c:	f000 fd00 	bl	8004680 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(E2B_Pin);
 8003c80:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003c84:	f000 fcfc 	bl	8004680 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c88:	bf00      	nop
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003c90:	4802      	ldr	r0, [pc, #8]	@ (8003c9c <UART4_IRQHandler+0x10>)
 8003c92:	f003 fcb7 	bl	8007604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003c96:	bf00      	nop
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000240 	.word	0x20000240

08003ca0 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003ca4:	4802      	ldr	r0, [pc, #8]	@ (8003cb0 <UART7_IRQHandler+0x10>)
 8003ca6:	f003 fcad 	bl	8007604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003caa:	bf00      	nop
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	200002c8 	.word	0x200002c8

08003cb4 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8003cb8:	4802      	ldr	r0, [pc, #8]	@ (8003cc4 <UART8_IRQHandler+0x10>)
 8003cba:	f003 fca3 	bl	8007604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8003cbe:	bf00      	nop
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000350 	.word	0x20000350

08003cc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  return 1;
 8003ccc:	2301      	movs	r3, #1
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <_kill>:

int _kill(int pid, int sig)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003ce2:	f005 fa1f 	bl	8009124 <__errno>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2216      	movs	r2, #22
 8003cea:	601a      	str	r2, [r3, #0]
  return -1;
 8003cec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <_exit>:

void _exit (int status)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d00:	f04f 31ff 	mov.w	r1, #4294967295
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff ffe7 	bl	8003cd8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d0a:	bf00      	nop
 8003d0c:	e7fd      	b.n	8003d0a <_exit+0x12>

08003d0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b086      	sub	sp, #24
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	e00a      	b.n	8003d36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d20:	f3af 8000 	nop.w
 8003d24:	4601      	mov	r1, r0
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	60ba      	str	r2, [r7, #8]
 8003d2c:	b2ca      	uxtb	r2, r1
 8003d2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	3301      	adds	r3, #1
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	dbf0      	blt.n	8003d20 <_read+0x12>
  }

  return len;
 8003d3e:	687b      	ldr	r3, [r7, #4]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d54:	2300      	movs	r3, #0
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	e009      	b.n	8003d6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	60ba      	str	r2, [r7, #8]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	dbf1      	blt.n	8003d5a <_write+0x12>
  }
  return len;
 8003d76:	687b      	ldr	r3, [r7, #4]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <_close>:

int _close(int file)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003d88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003da8:	605a      	str	r2, [r3, #4]
  return 0;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <_isatty>:

int _isatty(int file)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003dc0:	2301      	movs	r3, #1
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b085      	sub	sp, #20
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	60f8      	str	r0, [r7, #12]
 8003dd6:	60b9      	str	r1, [r7, #8]
 8003dd8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003df0:	4a14      	ldr	r2, [pc, #80]	@ (8003e44 <_sbrk+0x5c>)
 8003df2:	4b15      	ldr	r3, [pc, #84]	@ (8003e48 <_sbrk+0x60>)
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003dfc:	4b13      	ldr	r3, [pc, #76]	@ (8003e4c <_sbrk+0x64>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d102      	bne.n	8003e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e04:	4b11      	ldr	r3, [pc, #68]	@ (8003e4c <_sbrk+0x64>)
 8003e06:	4a12      	ldr	r2, [pc, #72]	@ (8003e50 <_sbrk+0x68>)
 8003e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e0a:	4b10      	ldr	r3, [pc, #64]	@ (8003e4c <_sbrk+0x64>)
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d207      	bcs.n	8003e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e18:	f005 f984 	bl	8009124 <__errno>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	220c      	movs	r2, #12
 8003e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e22:	f04f 33ff 	mov.w	r3, #4294967295
 8003e26:	e009      	b.n	8003e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e28:	4b08      	ldr	r3, [pc, #32]	@ (8003e4c <_sbrk+0x64>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e2e:	4b07      	ldr	r3, [pc, #28]	@ (8003e4c <_sbrk+0x64>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4413      	add	r3, r2
 8003e36:	4a05      	ldr	r2, [pc, #20]	@ (8003e4c <_sbrk+0x64>)
 8003e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	20040000 	.word	0x20040000
 8003e48:	00000400 	.word	0x00000400
 8003e4c:	20000560 	.word	0x20000560
 8003e50:	200006b8 	.word	0x200006b8

08003e54 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e58:	4b06      	ldr	r3, [pc, #24]	@ (8003e74 <SystemInit+0x20>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5e:	4a05      	ldr	r2, [pc, #20]	@ (8003e74 <SystemInit+0x20>)
 8003e60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e68:	bf00      	nop
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	e000ed00 	.word	0xe000ed00

08003e78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003e78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003eb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8003e7c:	f7ff ffea 	bl	8003e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e80:	480c      	ldr	r0, [pc, #48]	@ (8003eb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e82:	490d      	ldr	r1, [pc, #52]	@ (8003eb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e84:	4a0d      	ldr	r2, [pc, #52]	@ (8003ebc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e88:	e002      	b.n	8003e90 <LoopCopyDataInit>

08003e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e8e:	3304      	adds	r3, #4

08003e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e94:	d3f9      	bcc.n	8003e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e96:	4a0a      	ldr	r2, [pc, #40]	@ (8003ec0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e98:	4c0a      	ldr	r4, [pc, #40]	@ (8003ec4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e9c:	e001      	b.n	8003ea2 <LoopFillZerobss>

08003e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ea0:	3204      	adds	r2, #4

08003ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ea4:	d3fb      	bcc.n	8003e9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ea6:	f005 f943 	bl	8009130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003eaa:	f7fe fa21 	bl	80022f0 <main>
  bx  lr    
 8003eae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003eb0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8003eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003eb8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8003ebc:	0800cd10 	.word	0x0800cd10
  ldr r2, =_sbss
 8003ec0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8003ec4:	200006b4 	.word	0x200006b4

08003ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ec8:	e7fe      	b.n	8003ec8 <ADC_IRQHandler>

08003eca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ece:	2003      	movs	r0, #3
 8003ed0:	f000 f94c 	bl	800416c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	f000 f805 	bl	8003ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003eda:	f7ff fb87 	bl	80035ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003eec:	4b12      	ldr	r3, [pc, #72]	@ (8003f38 <HAL_InitTick+0x54>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	4b12      	ldr	r3, [pc, #72]	@ (8003f3c <HAL_InitTick+0x58>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 f967 	bl	80041d6 <HAL_SYSTICK_Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e00e      	b.n	8003f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b0f      	cmp	r3, #15
 8003f16:	d80a      	bhi.n	8003f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f18:	2200      	movs	r2, #0
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f20:	f000 f92f 	bl	8004182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f24:	4a06      	ldr	r2, [pc, #24]	@ (8003f40 <HAL_InitTick+0x5c>)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	e000      	b.n	8003f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	2000002c 	.word	0x2000002c
 8003f3c:	20000034 	.word	0x20000034
 8003f40:	20000030 	.word	0x20000030

08003f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f48:	4b06      	ldr	r3, [pc, #24]	@ (8003f64 <HAL_IncTick+0x20>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4b06      	ldr	r3, [pc, #24]	@ (8003f68 <HAL_IncTick+0x24>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4413      	add	r3, r2
 8003f54:	4a04      	ldr	r2, [pc, #16]	@ (8003f68 <HAL_IncTick+0x24>)
 8003f56:	6013      	str	r3, [r2, #0]
}
 8003f58:	bf00      	nop
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20000034 	.word	0x20000034
 8003f68:	20000564 	.word	0x20000564

08003f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f70:	4b03      	ldr	r3, [pc, #12]	@ (8003f80 <HAL_GetTick+0x14>)
 8003f72:	681b      	ldr	r3, [r3, #0]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	20000564 	.word	0x20000564

08003f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f8c:	f7ff ffee 	bl	8003f6c <HAL_GetTick>
 8003f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9c:	d005      	beq.n	8003faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc8 <HAL_Delay+0x44>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003faa:	bf00      	nop
 8003fac:	f7ff ffde 	bl	8003f6c <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d8f7      	bhi.n	8003fac <HAL_Delay+0x28>
  {
  }
}
 8003fbc:	bf00      	nop
 8003fbe:	bf00      	nop
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000034 	.word	0x20000034

08003fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800400c <__NVIC_SetPriorityGrouping+0x40>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003fe8:	4013      	ands	r3, r2
 8003fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ff4:	4b06      	ldr	r3, [pc, #24]	@ (8004010 <__NVIC_SetPriorityGrouping+0x44>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ffa:	4a04      	ldr	r2, [pc, #16]	@ (800400c <__NVIC_SetPriorityGrouping+0x40>)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	60d3      	str	r3, [r2, #12]
}
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	e000ed00 	.word	0xe000ed00
 8004010:	05fa0000 	.word	0x05fa0000

08004014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004018:	4b04      	ldr	r3, [pc, #16]	@ (800402c <__NVIC_GetPriorityGrouping+0x18>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	0a1b      	lsrs	r3, r3, #8
 800401e:	f003 0307 	and.w	r3, r3, #7
}
 8004022:	4618      	mov	r0, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	4603      	mov	r3, r0
 8004038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800403a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403e:	2b00      	cmp	r3, #0
 8004040:	db0b      	blt.n	800405a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	f003 021f 	and.w	r2, r3, #31
 8004048:	4907      	ldr	r1, [pc, #28]	@ (8004068 <__NVIC_EnableIRQ+0x38>)
 800404a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	2001      	movs	r0, #1
 8004052:	fa00 f202 	lsl.w	r2, r0, r2
 8004056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	e000e100 	.word	0xe000e100

0800406c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	6039      	str	r1, [r7, #0]
 8004076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407c:	2b00      	cmp	r3, #0
 800407e:	db0a      	blt.n	8004096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	b2da      	uxtb	r2, r3
 8004084:	490c      	ldr	r1, [pc, #48]	@ (80040b8 <__NVIC_SetPriority+0x4c>)
 8004086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408a:	0112      	lsls	r2, r2, #4
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	440b      	add	r3, r1
 8004090:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004094:	e00a      	b.n	80040ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	4908      	ldr	r1, [pc, #32]	@ (80040bc <__NVIC_SetPriority+0x50>)
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	3b04      	subs	r3, #4
 80040a4:	0112      	lsls	r2, r2, #4
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	440b      	add	r3, r1
 80040aa:	761a      	strb	r2, [r3, #24]
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	e000e100 	.word	0xe000e100
 80040bc:	e000ed00 	.word	0xe000ed00

080040c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b089      	sub	sp, #36	@ 0x24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f1c3 0307 	rsb	r3, r3, #7
 80040da:	2b04      	cmp	r3, #4
 80040dc:	bf28      	it	cs
 80040de:	2304      	movcs	r3, #4
 80040e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3304      	adds	r3, #4
 80040e6:	2b06      	cmp	r3, #6
 80040e8:	d902      	bls.n	80040f0 <NVIC_EncodePriority+0x30>
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3b03      	subs	r3, #3
 80040ee:	e000      	b.n	80040f2 <NVIC_EncodePriority+0x32>
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f4:	f04f 32ff 	mov.w	r2, #4294967295
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	fa02 f303 	lsl.w	r3, r2, r3
 80040fe:	43da      	mvns	r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	401a      	ands	r2, r3
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004108:	f04f 31ff 	mov.w	r1, #4294967295
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	fa01 f303 	lsl.w	r3, r1, r3
 8004112:	43d9      	mvns	r1, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004118:	4313      	orrs	r3, r2
         );
}
 800411a:	4618      	mov	r0, r3
 800411c:	3724      	adds	r7, #36	@ 0x24
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
	...

08004128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3b01      	subs	r3, #1
 8004134:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004138:	d301      	bcc.n	800413e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800413a:	2301      	movs	r3, #1
 800413c:	e00f      	b.n	800415e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800413e:	4a0a      	ldr	r2, [pc, #40]	@ (8004168 <SysTick_Config+0x40>)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	3b01      	subs	r3, #1
 8004144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004146:	210f      	movs	r1, #15
 8004148:	f04f 30ff 	mov.w	r0, #4294967295
 800414c:	f7ff ff8e 	bl	800406c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004150:	4b05      	ldr	r3, [pc, #20]	@ (8004168 <SysTick_Config+0x40>)
 8004152:	2200      	movs	r2, #0
 8004154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004156:	4b04      	ldr	r3, [pc, #16]	@ (8004168 <SysTick_Config+0x40>)
 8004158:	2207      	movs	r2, #7
 800415a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	e000e010 	.word	0xe000e010

0800416c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff ff29 	bl	8003fcc <__NVIC_SetPriorityGrouping>
}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004182:	b580      	push	{r7, lr}
 8004184:	b086      	sub	sp, #24
 8004186:	af00      	add	r7, sp, #0
 8004188:	4603      	mov	r3, r0
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	607a      	str	r2, [r7, #4]
 800418e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004194:	f7ff ff3e 	bl	8004014 <__NVIC_GetPriorityGrouping>
 8004198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	6978      	ldr	r0, [r7, #20]
 80041a0:	f7ff ff8e 	bl	80040c0 <NVIC_EncodePriority>
 80041a4:	4602      	mov	r2, r0
 80041a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041aa:	4611      	mov	r1, r2
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff ff5d 	bl	800406c <__NVIC_SetPriority>
}
 80041b2:	bf00      	nop
 80041b4:	3718      	adds	r7, #24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	4603      	mov	r3, r0
 80041c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff ff31 	bl	8004030 <__NVIC_EnableIRQ>
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7ff ffa2 	bl	8004128 <SysTick_Config>
 80041e4:	4603      	mov	r3, r0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041fc:	f7ff feb6 	bl	8003f6c <HAL_GetTick>
 8004200:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d008      	beq.n	8004220 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2280      	movs	r2, #128	@ 0x80
 8004212:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e052      	b.n	80042c6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0216 	bic.w	r2, r2, #22
 800422e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	695a      	ldr	r2, [r3, #20]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800423e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	d103      	bne.n	8004250 <HAL_DMA_Abort+0x62>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800424c:	2b00      	cmp	r3, #0
 800424e:	d007      	beq.n	8004260 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0208 	bic.w	r2, r2, #8
 800425e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0201 	bic.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004270:	e013      	b.n	800429a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004272:	f7ff fe7b 	bl	8003f6c <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b05      	cmp	r3, #5
 800427e:	d90c      	bls.n	800429a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2203      	movs	r2, #3
 800428a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e015      	b.n	80042c6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e4      	bne.n	8004272 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ac:	223f      	movs	r2, #63	@ 0x3f
 80042ae:	409a      	lsls	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d004      	beq.n	80042ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2280      	movs	r2, #128	@ 0x80
 80042e6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e00c      	b.n	8004306 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2205      	movs	r2, #5
 80042f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0201 	bic.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
	...

08004314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004314:	b480      	push	{r7}
 8004316:	b089      	sub	sp, #36	@ 0x24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004326:	2300      	movs	r3, #0
 8004328:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800432e:	2300      	movs	r3, #0
 8004330:	61fb      	str	r3, [r7, #28]
 8004332:	e169      	b.n	8004608 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004334:	2201      	movs	r2, #1
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4013      	ands	r3, r2
 8004346:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	429a      	cmp	r2, r3
 800434e:	f040 8158 	bne.w	8004602 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	2b01      	cmp	r3, #1
 800435c:	d005      	beq.n	800436a <HAL_GPIO_Init+0x56>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d130      	bne.n	80043cc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	2203      	movs	r2, #3
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43db      	mvns	r3, r3
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	4013      	ands	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	4313      	orrs	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043a0:	2201      	movs	r2, #1
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	43db      	mvns	r3, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4013      	ands	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	091b      	lsrs	r3, r3, #4
 80043b6:	f003 0201 	and.w	r2, r3, #1
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d017      	beq.n	8004408 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	2203      	movs	r2, #3
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	43db      	mvns	r3, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4013      	ands	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	005b      	lsls	r3, r3, #1
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4313      	orrs	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f003 0303 	and.w	r3, r3, #3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d123      	bne.n	800445c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	08da      	lsrs	r2, r3, #3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3208      	adds	r2, #8
 800441c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	220f      	movs	r2, #15
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	43db      	mvns	r3, r3
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4013      	ands	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4313      	orrs	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	08da      	lsrs	r2, r3, #3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	3208      	adds	r2, #8
 8004456:	69b9      	ldr	r1, [r7, #24]
 8004458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	2203      	movs	r2, #3
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	43db      	mvns	r3, r3
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4013      	ands	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 0203 	and.w	r2, r3, #3
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80b2 	beq.w	8004602 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800449e:	4b60      	ldr	r3, [pc, #384]	@ (8004620 <HAL_GPIO_Init+0x30c>)
 80044a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a2:	4a5f      	ldr	r2, [pc, #380]	@ (8004620 <HAL_GPIO_Init+0x30c>)
 80044a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80044aa:	4b5d      	ldr	r3, [pc, #372]	@ (8004620 <HAL_GPIO_Init+0x30c>)
 80044ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80044b6:	4a5b      	ldr	r2, [pc, #364]	@ (8004624 <HAL_GPIO_Init+0x310>)
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	089b      	lsrs	r3, r3, #2
 80044bc:	3302      	adds	r3, #2
 80044be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	220f      	movs	r2, #15
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	43db      	mvns	r3, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4013      	ands	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a52      	ldr	r2, [pc, #328]	@ (8004628 <HAL_GPIO_Init+0x314>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d02b      	beq.n	800453a <HAL_GPIO_Init+0x226>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a51      	ldr	r2, [pc, #324]	@ (800462c <HAL_GPIO_Init+0x318>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d025      	beq.n	8004536 <HAL_GPIO_Init+0x222>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a50      	ldr	r2, [pc, #320]	@ (8004630 <HAL_GPIO_Init+0x31c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d01f      	beq.n	8004532 <HAL_GPIO_Init+0x21e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a4f      	ldr	r2, [pc, #316]	@ (8004634 <HAL_GPIO_Init+0x320>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d019      	beq.n	800452e <HAL_GPIO_Init+0x21a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a4e      	ldr	r2, [pc, #312]	@ (8004638 <HAL_GPIO_Init+0x324>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d013      	beq.n	800452a <HAL_GPIO_Init+0x216>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a4d      	ldr	r2, [pc, #308]	@ (800463c <HAL_GPIO_Init+0x328>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d00d      	beq.n	8004526 <HAL_GPIO_Init+0x212>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a4c      	ldr	r2, [pc, #304]	@ (8004640 <HAL_GPIO_Init+0x32c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d007      	beq.n	8004522 <HAL_GPIO_Init+0x20e>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a4b      	ldr	r2, [pc, #300]	@ (8004644 <HAL_GPIO_Init+0x330>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d101      	bne.n	800451e <HAL_GPIO_Init+0x20a>
 800451a:	2307      	movs	r3, #7
 800451c:	e00e      	b.n	800453c <HAL_GPIO_Init+0x228>
 800451e:	2308      	movs	r3, #8
 8004520:	e00c      	b.n	800453c <HAL_GPIO_Init+0x228>
 8004522:	2306      	movs	r3, #6
 8004524:	e00a      	b.n	800453c <HAL_GPIO_Init+0x228>
 8004526:	2305      	movs	r3, #5
 8004528:	e008      	b.n	800453c <HAL_GPIO_Init+0x228>
 800452a:	2304      	movs	r3, #4
 800452c:	e006      	b.n	800453c <HAL_GPIO_Init+0x228>
 800452e:	2303      	movs	r3, #3
 8004530:	e004      	b.n	800453c <HAL_GPIO_Init+0x228>
 8004532:	2302      	movs	r3, #2
 8004534:	e002      	b.n	800453c <HAL_GPIO_Init+0x228>
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <HAL_GPIO_Init+0x228>
 800453a:	2300      	movs	r3, #0
 800453c:	69fa      	ldr	r2, [r7, #28]
 800453e:	f002 0203 	and.w	r2, r2, #3
 8004542:	0092      	lsls	r2, r2, #2
 8004544:	4093      	lsls	r3, r2
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4313      	orrs	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800454c:	4935      	ldr	r1, [pc, #212]	@ (8004624 <HAL_GPIO_Init+0x310>)
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	089b      	lsrs	r3, r3, #2
 8004552:	3302      	adds	r3, #2
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800455a:	4b3b      	ldr	r3, [pc, #236]	@ (8004648 <HAL_GPIO_Init+0x334>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	43db      	mvns	r3, r3
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	4013      	ands	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	4313      	orrs	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800457e:	4a32      	ldr	r2, [pc, #200]	@ (8004648 <HAL_GPIO_Init+0x334>)
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004584:	4b30      	ldr	r3, [pc, #192]	@ (8004648 <HAL_GPIO_Init+0x334>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	43db      	mvns	r3, r3
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4013      	ands	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045a8:	4a27      	ldr	r2, [pc, #156]	@ (8004648 <HAL_GPIO_Init+0x334>)
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045ae:	4b26      	ldr	r3, [pc, #152]	@ (8004648 <HAL_GPIO_Init+0x334>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	43db      	mvns	r3, r3
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	4013      	ands	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045d2:	4a1d      	ldr	r2, [pc, #116]	@ (8004648 <HAL_GPIO_Init+0x334>)
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004648 <HAL_GPIO_Init+0x334>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	43db      	mvns	r3, r3
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045fc:	4a12      	ldr	r2, [pc, #72]	@ (8004648 <HAL_GPIO_Init+0x334>)
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	3301      	adds	r3, #1
 8004606:	61fb      	str	r3, [r7, #28]
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	2b0f      	cmp	r3, #15
 800460c:	f67f ae92 	bls.w	8004334 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004610:	bf00      	nop
 8004612:	bf00      	nop
 8004614:	3724      	adds	r7, #36	@ 0x24
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40023800 	.word	0x40023800
 8004624:	40013800 	.word	0x40013800
 8004628:	40020000 	.word	0x40020000
 800462c:	40020400 	.word	0x40020400
 8004630:	40020800 	.word	0x40020800
 8004634:	40020c00 	.word	0x40020c00
 8004638:	40021000 	.word	0x40021000
 800463c:	40021400 	.word	0x40021400
 8004640:	40021800 	.word	0x40021800
 8004644:	40021c00 	.word	0x40021c00
 8004648:	40013c00 	.word	0x40013c00

0800464c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	460b      	mov	r3, r1
 8004656:	807b      	strh	r3, [r7, #2]
 8004658:	4613      	mov	r3, r2
 800465a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800465c:	787b      	ldrb	r3, [r7, #1]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004662:	887a      	ldrh	r2, [r7, #2]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004668:	e003      	b.n	8004672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800466a:	887b      	ldrh	r3, [r7, #2]
 800466c:	041a      	lsls	r2, r3, #16
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	619a      	str	r2, [r3, #24]
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
	...

08004680 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800468a:	4b08      	ldr	r3, [pc, #32]	@ (80046ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800468c:	695a      	ldr	r2, [r3, #20]
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	4013      	ands	r3, r2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d006      	beq.n	80046a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004696:	4a05      	ldr	r2, [pc, #20]	@ (80046ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004698:	88fb      	ldrh	r3, [r7, #6]
 800469a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800469c:	88fb      	ldrh	r3, [r7, #6]
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 f806 	bl	80046b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80046a4:	bf00      	nop
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40013c00 	.word	0x40013c00

080046b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	4603      	mov	r3, r0
 80046b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
	...

080046c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e08b      	b.n	80047f2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d106      	bne.n	80046f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7fe ffa0 	bl	8003634 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2224      	movs	r2, #36	@ 0x24
 80046f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0201 	bic.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004718:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004728:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d107      	bne.n	8004742 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800473e:	609a      	str	r2, [r3, #8]
 8004740:	e006      	b.n	8004750 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800474e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	2b02      	cmp	r3, #2
 8004756:	d108      	bne.n	800476a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004766:	605a      	str	r2, [r3, #4]
 8004768:	e007      	b.n	800477a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004778:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6859      	ldr	r1, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	4b1d      	ldr	r3, [pc, #116]	@ (80047fc <HAL_I2C_Init+0x134>)
 8004786:	430b      	orrs	r3, r1
 8004788:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004798:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691a      	ldr	r2, [r3, #16]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69d9      	ldr	r1, [r3, #28]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1a      	ldr	r2, [r3, #32]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0201 	orr.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	02008000 	.word	0x02008000

08004800 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b088      	sub	sp, #32
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	607a      	str	r2, [r7, #4]
 800480a:	461a      	mov	r2, r3
 800480c:	460b      	mov	r3, r1
 800480e:	817b      	strh	r3, [r7, #10]
 8004810:	4613      	mov	r3, r2
 8004812:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b20      	cmp	r3, #32
 800481e:	f040 80fd 	bne.w	8004a1c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_I2C_Master_Transmit+0x30>
 800482c:	2302      	movs	r3, #2
 800482e:	e0f6      	b.n	8004a1e <HAL_I2C_Master_Transmit+0x21e>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004838:	f7ff fb98 	bl	8003f6c <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	2319      	movs	r3, #25
 8004844:	2201      	movs	r2, #1
 8004846:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 fa24 	bl	8004c98 <I2C_WaitOnFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e0e1      	b.n	8004a1e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2221      	movs	r2, #33	@ 0x21
 800485e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2210      	movs	r2, #16
 8004866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	893a      	ldrh	r2, [r7, #8]
 800487a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004886:	b29b      	uxth	r3, r3
 8004888:	2bff      	cmp	r3, #255	@ 0xff
 800488a:	d906      	bls.n	800489a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	22ff      	movs	r2, #255	@ 0xff
 8004890:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004892:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	e007      	b.n	80048aa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80048a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048a8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d024      	beq.n	80048fc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b6:	781a      	ldrb	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	3301      	adds	r3, #1
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	8979      	ldrh	r1, [r7, #10]
 80048ee:	4b4e      	ldr	r3, [pc, #312]	@ (8004a28 <HAL_I2C_Master_Transmit+0x228>)
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 fc1f 	bl	8005138 <I2C_TransferConfig>
 80048fa:	e066      	b.n	80049ca <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004900:	b2da      	uxtb	r2, r3
 8004902:	8979      	ldrh	r1, [r7, #10]
 8004904:	4b48      	ldr	r3, [pc, #288]	@ (8004a28 <HAL_I2C_Master_Transmit+0x228>)
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 fc14 	bl	8005138 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004910:	e05b      	b.n	80049ca <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	6a39      	ldr	r1, [r7, #32]
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 fa17 	bl	8004d4a <I2C_WaitOnTXISFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e07b      	b.n	8004a1e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492a:	781a      	ldrb	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800494e:	3b01      	subs	r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800495a:	b29b      	uxth	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	d034      	beq.n	80049ca <HAL_I2C_Master_Transmit+0x1ca>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004964:	2b00      	cmp	r3, #0
 8004966:	d130      	bne.n	80049ca <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	2200      	movs	r2, #0
 8004970:	2180      	movs	r1, #128	@ 0x80
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f990 	bl	8004c98 <I2C_WaitOnFlagUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e04d      	b.n	8004a1e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004986:	b29b      	uxth	r3, r3
 8004988:	2bff      	cmp	r3, #255	@ 0xff
 800498a:	d90e      	bls.n	80049aa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	22ff      	movs	r2, #255	@ 0xff
 8004990:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004996:	b2da      	uxtb	r2, r3
 8004998:	8979      	ldrh	r1, [r7, #10]
 800499a:	2300      	movs	r3, #0
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 fbc8 	bl	8005138 <I2C_TransferConfig>
 80049a8:	e00f      	b.n	80049ca <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	8979      	ldrh	r1, [r7, #10]
 80049bc:	2300      	movs	r3, #0
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fbb7 	bl	8005138 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d19e      	bne.n	8004912 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	6a39      	ldr	r1, [r7, #32]
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f9fd 	bl	8004dd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e01a      	b.n	8004a1e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2220      	movs	r2, #32
 80049ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6859      	ldr	r1, [r3, #4]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	4b0c      	ldr	r3, [pc, #48]	@ (8004a2c <HAL_I2C_Master_Transmit+0x22c>)
 80049fc:	400b      	ands	r3, r1
 80049fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	e000      	b.n	8004a1e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004a1c:	2302      	movs	r3, #2
  }
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	80002000 	.word	0x80002000
 8004a2c:	fe00e800 	.word	0xfe00e800

08004a30 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b088      	sub	sp, #32
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	607a      	str	r2, [r7, #4]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	817b      	strh	r3, [r7, #10]
 8004a40:	4613      	mov	r3, r2
 8004a42:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	f040 80db 	bne.w	8004c08 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_I2C_Master_Receive+0x30>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e0d4      	b.n	8004c0a <HAL_I2C_Master_Receive+0x1da>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a68:	f7ff fa80 	bl	8003f6c <HAL_GetTick>
 8004a6c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	2319      	movs	r3, #25
 8004a74:	2201      	movs	r2, #1
 8004a76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f90c 	bl	8004c98 <I2C_WaitOnFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e0bf      	b.n	8004c0a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2222      	movs	r2, #34	@ 0x22
 8004a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2210      	movs	r2, #16
 8004a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	893a      	ldrh	r2, [r7, #8]
 8004aaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	2bff      	cmp	r3, #255	@ 0xff
 8004aba:	d90e      	bls.n	8004ada <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	8979      	ldrh	r1, [r7, #10]
 8004aca:	4b52      	ldr	r3, [pc, #328]	@ (8004c14 <HAL_I2C_Master_Receive+0x1e4>)
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 fb30 	bl	8005138 <I2C_TransferConfig>
 8004ad8:	e06d      	b.n	8004bb6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	8979      	ldrh	r1, [r7, #10]
 8004aec:	4b49      	ldr	r3, [pc, #292]	@ (8004c14 <HAL_I2C_Master_Receive+0x1e4>)
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 fb1f 	bl	8005138 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004afa:	e05c      	b.n	8004bb6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	6a39      	ldr	r1, [r7, #32]
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 f9ad 	bl	8004e60 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e07c      	b.n	8004c0a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1a:	b2d2      	uxtb	r2, r2
 8004b1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d034      	beq.n	8004bb6 <HAL_I2C_Master_Receive+0x186>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d130      	bne.n	8004bb6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	2180      	movs	r1, #128	@ 0x80
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f89a 	bl	8004c98 <I2C_WaitOnFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e04d      	b.n	8004c0a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2bff      	cmp	r3, #255	@ 0xff
 8004b76:	d90e      	bls.n	8004b96 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	22ff      	movs	r2, #255	@ 0xff
 8004b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	8979      	ldrh	r1, [r7, #10]
 8004b86:	2300      	movs	r3, #0
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 fad2 	bl	8005138 <I2C_TransferConfig>
 8004b94:	e00f      	b.n	8004bb6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	8979      	ldrh	r1, [r7, #10]
 8004ba8:	2300      	movs	r3, #0
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 fac1 	bl	8005138 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d19d      	bne.n	8004afc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	6a39      	ldr	r1, [r7, #32]
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 f907 	bl	8004dd8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e01a      	b.n	8004c0a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6859      	ldr	r1, [r3, #4]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	4b0c      	ldr	r3, [pc, #48]	@ (8004c18 <HAL_I2C_Master_Receive+0x1e8>)
 8004be8:	400b      	ands	r3, r1
 8004bea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c04:	2300      	movs	r3, #0
 8004c06:	e000      	b.n	8004c0a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004c08:	2302      	movs	r3, #2
  }
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	80002400 	.word	0x80002400
 8004c18:	fe00e800 	.word	0xfe00e800

08004c1c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c2a:	b2db      	uxtb	r3, r3
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d103      	bne.n	8004c6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d007      	beq.n	8004c8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	699a      	ldr	r2, [r3, #24]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0201 	orr.w	r2, r2, #1
 8004c8a:	619a      	str	r2, [r3, #24]
  }
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ca8:	e03b      	b.n	8004d22 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	6839      	ldr	r1, [r7, #0]
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 f962 	bl	8004f78 <I2C_IsErrorOccurred>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e041      	b.n	8004d42 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc4:	d02d      	beq.n	8004d22 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc6:	f7ff f951 	bl	8003f6c <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d302      	bcc.n	8004cdc <I2C_WaitOnFlagUntilTimeout+0x44>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d122      	bne.n	8004d22 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	699a      	ldr	r2, [r3, #24]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	bf0c      	ite	eq
 8004cec:	2301      	moveq	r3, #1
 8004cee:	2300      	movne	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	79fb      	ldrb	r3, [r7, #7]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d113      	bne.n	8004d22 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cfe:	f043 0220 	orr.w	r2, r3, #32
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e00f      	b.n	8004d42 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699a      	ldr	r2, [r3, #24]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	bf0c      	ite	eq
 8004d32:	2301      	moveq	r3, #1
 8004d34:	2300      	movne	r3, #0
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	461a      	mov	r2, r3
 8004d3a:	79fb      	ldrb	r3, [r7, #7]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d0b4      	beq.n	8004caa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b084      	sub	sp, #16
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d56:	e033      	b.n	8004dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	68b9      	ldr	r1, [r7, #8]
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 f90b 	bl	8004f78 <I2C_IsErrorOccurred>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e031      	b.n	8004dd0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d72:	d025      	beq.n	8004dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d74:	f7ff f8fa 	bl	8003f6c <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d302      	bcc.n	8004d8a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d11a      	bne.n	8004dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d013      	beq.n	8004dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9c:	f043 0220 	orr.w	r2, r3, #32
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e007      	b.n	8004dd0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d1c4      	bne.n	8004d58 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004de4:	e02f      	b.n	8004e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 f8c4 	bl	8004f78 <I2C_IsErrorOccurred>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e02d      	b.n	8004e56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfa:	f7ff f8b7 	bl	8003f6c <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d302      	bcc.n	8004e10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d11a      	bne.n	8004e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	f003 0320 	and.w	r3, r3, #32
 8004e1a:	2b20      	cmp	r3, #32
 8004e1c:	d013      	beq.n	8004e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e22:	f043 0220 	orr.w	r2, r3, #32
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e007      	b.n	8004e56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d1c8      	bne.n	8004de6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004e70:	e071      	b.n	8004f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 f87e 	bl	8004f78 <I2C_IsErrorOccurred>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	d13b      	bne.n	8004f0c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004e94:	7dfb      	ldrb	r3, [r7, #23]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d138      	bne.n	8004f0c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d105      	bne.n	8004eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	2b10      	cmp	r3, #16
 8004ec0:	d121      	bne.n	8004f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2210      	movs	r2, #16
 8004ec8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2204      	movs	r2, #4
 8004ece:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6859      	ldr	r1, [r3, #4]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	4b24      	ldr	r3, [pc, #144]	@ (8004f74 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004ee4:	400b      	ands	r3, r1
 8004ee6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	75fb      	strb	r3, [r7, #23]
 8004f04:	e002      	b.n	8004f0c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004f0c:	f7ff f82e 	bl	8003f6c <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d302      	bcc.n	8004f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d119      	bne.n	8004f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8004f22:	7dfb      	ldrb	r3, [r7, #23]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d116      	bne.n	8004f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d00f      	beq.n	8004f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f3a:	f043 0220 	orr.w	r2, r3, #32
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d002      	beq.n	8004f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8004f64:	7dfb      	ldrb	r3, [r7, #23]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d083      	beq.n	8004e72 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8004f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	fe00e800 	.word	0xfe00e800

08004f78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08a      	sub	sp, #40	@ 0x28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004f92:	2300      	movs	r3, #0
 8004f94:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	f003 0310 	and.w	r3, r3, #16
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d068      	beq.n	8005076 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2210      	movs	r2, #16
 8004faa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004fac:	e049      	b.n	8005042 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb4:	d045      	beq.n	8005042 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004fb6:	f7fe ffd9 	bl	8003f6c <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d302      	bcc.n	8004fcc <I2C_IsErrorOccurred+0x54>
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d13a      	bne.n	8005042 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fd6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fde:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fee:	d121      	bne.n	8005034 <I2C_IsErrorOccurred+0xbc>
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ff6:	d01d      	beq.n	8005034 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004ff8:	7cfb      	ldrb	r3, [r7, #19]
 8004ffa:	2b20      	cmp	r3, #32
 8004ffc:	d01a      	beq.n	8005034 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800500c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800500e:	f7fe ffad 	bl	8003f6c <HAL_GetTick>
 8005012:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005014:	e00e      	b.n	8005034 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005016:	f7fe ffa9 	bl	8003f6c <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b19      	cmp	r3, #25
 8005022:	d907      	bls.n	8005034 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	f043 0320 	orr.w	r3, r3, #32
 800502a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005032:	e006      	b.n	8005042 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	f003 0320 	and.w	r3, r3, #32
 800503e:	2b20      	cmp	r3, #32
 8005040:	d1e9      	bne.n	8005016 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b20      	cmp	r3, #32
 800504e:	d003      	beq.n	8005058 <I2C_IsErrorOccurred+0xe0>
 8005050:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005054:	2b00      	cmp	r3, #0
 8005056:	d0aa      	beq.n	8004fae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005058:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800505c:	2b00      	cmp	r3, #0
 800505e:	d103      	bne.n	8005068 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2220      	movs	r2, #32
 8005066:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	f043 0304 	orr.w	r3, r3, #4
 800506e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00b      	beq.n	80050a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	f043 0301 	orr.w	r3, r3, #1
 800508e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005098:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00b      	beq.n	80050c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	f043 0308 	orr.w	r3, r3, #8
 80050b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80050ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00b      	beq.n	80050e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	f043 0302 	orr.w	r3, r3, #2
 80050d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80050e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d01c      	beq.n	8005126 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f7ff fdaf 	bl	8004c50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6859      	ldr	r1, [r3, #4]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005134 <I2C_IsErrorOccurred+0x1bc>)
 80050fe:	400b      	ands	r3, r1
 8005100:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	431a      	orrs	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2220      	movs	r2, #32
 8005112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005126:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800512a:	4618      	mov	r0, r3
 800512c:	3728      	adds	r7, #40	@ 0x28
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	fe00e800 	.word	0xfe00e800

08005138 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	607b      	str	r3, [r7, #4]
 8005142:	460b      	mov	r3, r1
 8005144:	817b      	strh	r3, [r7, #10]
 8005146:	4613      	mov	r3, r2
 8005148:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800514a:	897b      	ldrh	r3, [r7, #10]
 800514c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005150:	7a7b      	ldrb	r3, [r7, #9]
 8005152:	041b      	lsls	r3, r3, #16
 8005154:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005158:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	4313      	orrs	r3, r2
 8005162:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005166:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	0d5b      	lsrs	r3, r3, #21
 8005172:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005176:	4b08      	ldr	r3, [pc, #32]	@ (8005198 <I2C_TransferConfig+0x60>)
 8005178:	430b      	orrs	r3, r1
 800517a:	43db      	mvns	r3, r3
 800517c:	ea02 0103 	and.w	r1, r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	430a      	orrs	r2, r1
 8005188:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	03ff63ff 	.word	0x03ff63ff

0800519c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b20      	cmp	r3, #32
 80051b0:	d138      	bne.n	8005224 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051bc:	2302      	movs	r3, #2
 80051be:	e032      	b.n	8005226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2224      	movs	r2, #36	@ 0x24
 80051cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0201 	bic.w	r2, r2, #1
 80051de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80051ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6819      	ldr	r1, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0201 	orr.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005220:	2300      	movs	r3, #0
 8005222:	e000      	b.n	8005226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005224:	2302      	movs	r3, #2
  }
}
 8005226:	4618      	mov	r0, r3
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005232:	b480      	push	{r7}
 8005234:	b085      	sub	sp, #20
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b20      	cmp	r3, #32
 8005246:	d139      	bne.n	80052bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800524e:	2b01      	cmp	r3, #1
 8005250:	d101      	bne.n	8005256 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005252:	2302      	movs	r3, #2
 8005254:	e033      	b.n	80052be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2224      	movs	r2, #36	@ 0x24
 8005262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0201 	bic.w	r2, r2, #1
 8005274:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005284:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4313      	orrs	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0201 	orr.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80052b8:	2300      	movs	r3, #0
 80052ba:	e000      	b.n	80052be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052bc:	2302      	movs	r3, #2
  }
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
	...

080052cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80052d6:	4b23      	ldr	r3, [pc, #140]	@ (8005364 <HAL_PWREx_EnableOverDrive+0x98>)
 80052d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052da:	4a22      	ldr	r2, [pc, #136]	@ (8005364 <HAL_PWREx_EnableOverDrive+0x98>)
 80052dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80052e2:	4b20      	ldr	r3, [pc, #128]	@ (8005364 <HAL_PWREx_EnableOverDrive+0x98>)
 80052e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ea:	603b      	str	r3, [r7, #0]
 80052ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80052ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005368 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a1d      	ldr	r2, [pc, #116]	@ (8005368 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052fa:	f7fe fe37 	bl	8003f6c <HAL_GetTick>
 80052fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005300:	e009      	b.n	8005316 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005302:	f7fe fe33 	bl	8003f6c <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005310:	d901      	bls.n	8005316 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e022      	b.n	800535c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005316:	4b14      	ldr	r3, [pc, #80]	@ (8005368 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800531e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005322:	d1ee      	bne.n	8005302 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005324:	4b10      	ldr	r3, [pc, #64]	@ (8005368 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a0f      	ldr	r2, [pc, #60]	@ (8005368 <HAL_PWREx_EnableOverDrive+0x9c>)
 800532a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800532e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005330:	f7fe fe1c 	bl	8003f6c <HAL_GetTick>
 8005334:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005336:	e009      	b.n	800534c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005338:	f7fe fe18 	bl	8003f6c <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005346:	d901      	bls.n	800534c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e007      	b.n	800535c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800534c:	4b06      	ldr	r3, [pc, #24]	@ (8005368 <HAL_PWREx_EnableOverDrive+0x9c>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005354:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005358:	d1ee      	bne.n	8005338 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40023800 	.word	0x40023800
 8005368:	40007000 	.word	0x40007000

0800536c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005374:	2300      	movs	r3, #0
 8005376:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e291      	b.n	80058a6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 8087 	beq.w	800549e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005390:	4b96      	ldr	r3, [pc, #600]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 030c 	and.w	r3, r3, #12
 8005398:	2b04      	cmp	r3, #4
 800539a:	d00c      	beq.n	80053b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800539c:	4b93      	ldr	r3, [pc, #588]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f003 030c 	and.w	r3, r3, #12
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d112      	bne.n	80053ce <HAL_RCC_OscConfig+0x62>
 80053a8:	4b90      	ldr	r3, [pc, #576]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053b4:	d10b      	bne.n	80053ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053b6:	4b8d      	ldr	r3, [pc, #564]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d06c      	beq.n	800549c <HAL_RCC_OscConfig+0x130>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d168      	bne.n	800549c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e26b      	b.n	80058a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053d6:	d106      	bne.n	80053e6 <HAL_RCC_OscConfig+0x7a>
 80053d8:	4b84      	ldr	r3, [pc, #528]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a83      	ldr	r2, [pc, #524]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 80053de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053e2:	6013      	str	r3, [r2, #0]
 80053e4:	e02e      	b.n	8005444 <HAL_RCC_OscConfig+0xd8>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10c      	bne.n	8005408 <HAL_RCC_OscConfig+0x9c>
 80053ee:	4b7f      	ldr	r3, [pc, #508]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a7e      	ldr	r2, [pc, #504]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 80053f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	4b7c      	ldr	r3, [pc, #496]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a7b      	ldr	r2, [pc, #492]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 8005400:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	e01d      	b.n	8005444 <HAL_RCC_OscConfig+0xd8>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005410:	d10c      	bne.n	800542c <HAL_RCC_OscConfig+0xc0>
 8005412:	4b76      	ldr	r3, [pc, #472]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a75      	ldr	r2, [pc, #468]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 8005418:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	4b73      	ldr	r3, [pc, #460]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a72      	ldr	r2, [pc, #456]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 8005424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	e00b      	b.n	8005444 <HAL_RCC_OscConfig+0xd8>
 800542c:	4b6f      	ldr	r3, [pc, #444]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a6e      	ldr	r2, [pc, #440]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 8005432:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005436:	6013      	str	r3, [r2, #0]
 8005438:	4b6c      	ldr	r3, [pc, #432]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a6b      	ldr	r2, [pc, #428]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 800543e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d013      	beq.n	8005474 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800544c:	f7fe fd8e 	bl	8003f6c <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005454:	f7fe fd8a 	bl	8003f6c <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b64      	cmp	r3, #100	@ 0x64
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e21f      	b.n	80058a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005466:	4b61      	ldr	r3, [pc, #388]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0f0      	beq.n	8005454 <HAL_RCC_OscConfig+0xe8>
 8005472:	e014      	b.n	800549e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005474:	f7fe fd7a 	bl	8003f6c <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800547c:	f7fe fd76 	bl	8003f6c <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b64      	cmp	r3, #100	@ 0x64
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e20b      	b.n	80058a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800548e:	4b57      	ldr	r3, [pc, #348]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f0      	bne.n	800547c <HAL_RCC_OscConfig+0x110>
 800549a:	e000      	b.n	800549e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800549c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d069      	beq.n	800557e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054aa:	4b50      	ldr	r3, [pc, #320]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 030c 	and.w	r3, r3, #12
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00b      	beq.n	80054ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054b6:	4b4d      	ldr	r3, [pc, #308]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 030c 	and.w	r3, r3, #12
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d11c      	bne.n	80054fc <HAL_RCC_OscConfig+0x190>
 80054c2:	4b4a      	ldr	r3, [pc, #296]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d116      	bne.n	80054fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ce:	4b47      	ldr	r3, [pc, #284]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d005      	beq.n	80054e6 <HAL_RCC_OscConfig+0x17a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d001      	beq.n	80054e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e1df      	b.n	80058a6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e6:	4b41      	ldr	r3, [pc, #260]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	493d      	ldr	r1, [pc, #244]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054fa:	e040      	b.n	800557e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d023      	beq.n	800554c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005504:	4b39      	ldr	r3, [pc, #228]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a38      	ldr	r2, [pc, #224]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 800550a:	f043 0301 	orr.w	r3, r3, #1
 800550e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005510:	f7fe fd2c 	bl	8003f6c <HAL_GetTick>
 8005514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005518:	f7fe fd28 	bl	8003f6c <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e1bd      	b.n	80058a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800552a:	4b30      	ldr	r3, [pc, #192]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d0f0      	beq.n	8005518 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005536:	4b2d      	ldr	r3, [pc, #180]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	4929      	ldr	r1, [pc, #164]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 8005546:	4313      	orrs	r3, r2
 8005548:	600b      	str	r3, [r1, #0]
 800554a:	e018      	b.n	800557e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800554c:	4b27      	ldr	r3, [pc, #156]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a26      	ldr	r2, [pc, #152]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 8005552:	f023 0301 	bic.w	r3, r3, #1
 8005556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005558:	f7fe fd08 	bl	8003f6c <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005560:	f7fe fd04 	bl	8003f6c <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e199      	b.n	80058a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005572:	4b1e      	ldr	r3, [pc, #120]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1f0      	bne.n	8005560 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b00      	cmp	r3, #0
 8005588:	d038      	beq.n	80055fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d019      	beq.n	80055c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005592:	4b16      	ldr	r3, [pc, #88]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 8005594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005596:	4a15      	ldr	r2, [pc, #84]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 8005598:	f043 0301 	orr.w	r3, r3, #1
 800559c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800559e:	f7fe fce5 	bl	8003f6c <HAL_GetTick>
 80055a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055a4:	e008      	b.n	80055b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055a6:	f7fe fce1 	bl	8003f6c <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d901      	bls.n	80055b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e176      	b.n	80058a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055b8:	4b0c      	ldr	r3, [pc, #48]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 80055ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0f0      	beq.n	80055a6 <HAL_RCC_OscConfig+0x23a>
 80055c4:	e01a      	b.n	80055fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055c6:	4b09      	ldr	r3, [pc, #36]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 80055c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055ca:	4a08      	ldr	r2, [pc, #32]	@ (80055ec <HAL_RCC_OscConfig+0x280>)
 80055cc:	f023 0301 	bic.w	r3, r3, #1
 80055d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d2:	f7fe fccb 	bl	8003f6c <HAL_GetTick>
 80055d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055d8:	e00a      	b.n	80055f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055da:	f7fe fcc7 	bl	8003f6c <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d903      	bls.n	80055f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e15c      	b.n	80058a6 <HAL_RCC_OscConfig+0x53a>
 80055ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055f0:	4b91      	ldr	r3, [pc, #580]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 80055f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1ee      	bne.n	80055da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 80a4 	beq.w	8005752 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800560a:	4b8b      	ldr	r3, [pc, #556]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 800560c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10d      	bne.n	8005632 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005616:	4b88      	ldr	r3, [pc, #544]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 8005618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561a:	4a87      	ldr	r2, [pc, #540]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 800561c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005620:	6413      	str	r3, [r2, #64]	@ 0x40
 8005622:	4b85      	ldr	r3, [pc, #532]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 8005624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800562a:	60bb      	str	r3, [r7, #8]
 800562c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800562e:	2301      	movs	r3, #1
 8005630:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005632:	4b82      	ldr	r3, [pc, #520]	@ (800583c <HAL_RCC_OscConfig+0x4d0>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800563a:	2b00      	cmp	r3, #0
 800563c:	d118      	bne.n	8005670 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800563e:	4b7f      	ldr	r3, [pc, #508]	@ (800583c <HAL_RCC_OscConfig+0x4d0>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a7e      	ldr	r2, [pc, #504]	@ (800583c <HAL_RCC_OscConfig+0x4d0>)
 8005644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800564a:	f7fe fc8f 	bl	8003f6c <HAL_GetTick>
 800564e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005650:	e008      	b.n	8005664 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005652:	f7fe fc8b 	bl	8003f6c <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b64      	cmp	r3, #100	@ 0x64
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e120      	b.n	80058a6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005664:	4b75      	ldr	r3, [pc, #468]	@ (800583c <HAL_RCC_OscConfig+0x4d0>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0f0      	beq.n	8005652 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d106      	bne.n	8005686 <HAL_RCC_OscConfig+0x31a>
 8005678:	4b6f      	ldr	r3, [pc, #444]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 800567a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800567c:	4a6e      	ldr	r2, [pc, #440]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 800567e:	f043 0301 	orr.w	r3, r3, #1
 8005682:	6713      	str	r3, [r2, #112]	@ 0x70
 8005684:	e02d      	b.n	80056e2 <HAL_RCC_OscConfig+0x376>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10c      	bne.n	80056a8 <HAL_RCC_OscConfig+0x33c>
 800568e:	4b6a      	ldr	r3, [pc, #424]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 8005690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005692:	4a69      	ldr	r2, [pc, #420]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 8005694:	f023 0301 	bic.w	r3, r3, #1
 8005698:	6713      	str	r3, [r2, #112]	@ 0x70
 800569a:	4b67      	ldr	r3, [pc, #412]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 800569c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800569e:	4a66      	ldr	r2, [pc, #408]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 80056a0:	f023 0304 	bic.w	r3, r3, #4
 80056a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80056a6:	e01c      	b.n	80056e2 <HAL_RCC_OscConfig+0x376>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	2b05      	cmp	r3, #5
 80056ae:	d10c      	bne.n	80056ca <HAL_RCC_OscConfig+0x35e>
 80056b0:	4b61      	ldr	r3, [pc, #388]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 80056b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b4:	4a60      	ldr	r2, [pc, #384]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 80056b6:	f043 0304 	orr.w	r3, r3, #4
 80056ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80056bc:	4b5e      	ldr	r3, [pc, #376]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 80056be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c0:	4a5d      	ldr	r2, [pc, #372]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 80056c2:	f043 0301 	orr.w	r3, r3, #1
 80056c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80056c8:	e00b      	b.n	80056e2 <HAL_RCC_OscConfig+0x376>
 80056ca:	4b5b      	ldr	r3, [pc, #364]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 80056cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056ce:	4a5a      	ldr	r2, [pc, #360]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 80056d0:	f023 0301 	bic.w	r3, r3, #1
 80056d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80056d6:	4b58      	ldr	r3, [pc, #352]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 80056d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056da:	4a57      	ldr	r2, [pc, #348]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 80056dc:	f023 0304 	bic.w	r3, r3, #4
 80056e0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d015      	beq.n	8005716 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ea:	f7fe fc3f 	bl	8003f6c <HAL_GetTick>
 80056ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f0:	e00a      	b.n	8005708 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056f2:	f7fe fc3b 	bl	8003f6c <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005700:	4293      	cmp	r3, r2
 8005702:	d901      	bls.n	8005708 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e0ce      	b.n	80058a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005708:	4b4b      	ldr	r3, [pc, #300]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 800570a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0ee      	beq.n	80056f2 <HAL_RCC_OscConfig+0x386>
 8005714:	e014      	b.n	8005740 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005716:	f7fe fc29 	bl	8003f6c <HAL_GetTick>
 800571a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800571c:	e00a      	b.n	8005734 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800571e:	f7fe fc25 	bl	8003f6c <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	f241 3288 	movw	r2, #5000	@ 0x1388
 800572c:	4293      	cmp	r3, r2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e0b8      	b.n	80058a6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005734:	4b40      	ldr	r3, [pc, #256]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 8005736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1ee      	bne.n	800571e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005740:	7dfb      	ldrb	r3, [r7, #23]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d105      	bne.n	8005752 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005746:	4b3c      	ldr	r3, [pc, #240]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 8005748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574a:	4a3b      	ldr	r2, [pc, #236]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 800574c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005750:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 80a4 	beq.w	80058a4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800575c:	4b36      	ldr	r3, [pc, #216]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f003 030c 	and.w	r3, r3, #12
 8005764:	2b08      	cmp	r3, #8
 8005766:	d06b      	beq.n	8005840 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	2b02      	cmp	r3, #2
 800576e:	d149      	bne.n	8005804 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005770:	4b31      	ldr	r3, [pc, #196]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a30      	ldr	r2, [pc, #192]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 8005776:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800577a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577c:	f7fe fbf6 	bl	8003f6c <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005784:	f7fe fbf2 	bl	8003f6c <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e087      	b.n	80058a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005796:	4b28      	ldr	r3, [pc, #160]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f0      	bne.n	8005784 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69da      	ldr	r2, [r3, #28]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b0:	019b      	lsls	r3, r3, #6
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b8:	085b      	lsrs	r3, r3, #1
 80057ba:	3b01      	subs	r3, #1
 80057bc:	041b      	lsls	r3, r3, #16
 80057be:	431a      	orrs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c4:	061b      	lsls	r3, r3, #24
 80057c6:	4313      	orrs	r3, r2
 80057c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 80057ca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80057ce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057d0:	4b19      	ldr	r3, [pc, #100]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a18      	ldr	r2, [pc, #96]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 80057d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057dc:	f7fe fbc6 	bl	8003f6c <HAL_GetTick>
 80057e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e4:	f7fe fbc2 	bl	8003f6c <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e057      	b.n	80058a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057f6:	4b10      	ldr	r3, [pc, #64]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0f0      	beq.n	80057e4 <HAL_RCC_OscConfig+0x478>
 8005802:	e04f      	b.n	80058a4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005804:	4b0c      	ldr	r3, [pc, #48]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a0b      	ldr	r2, [pc, #44]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 800580a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800580e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005810:	f7fe fbac 	bl	8003f6c <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005816:	e008      	b.n	800582a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005818:	f7fe fba8 	bl	8003f6c <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b02      	cmp	r3, #2
 8005824:	d901      	bls.n	800582a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e03d      	b.n	80058a6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800582a:	4b03      	ldr	r3, [pc, #12]	@ (8005838 <HAL_RCC_OscConfig+0x4cc>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1f0      	bne.n	8005818 <HAL_RCC_OscConfig+0x4ac>
 8005836:	e035      	b.n	80058a4 <HAL_RCC_OscConfig+0x538>
 8005838:	40023800 	.word	0x40023800
 800583c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005840:	4b1b      	ldr	r3, [pc, #108]	@ (80058b0 <HAL_RCC_OscConfig+0x544>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d028      	beq.n	80058a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005858:	429a      	cmp	r2, r3
 800585a:	d121      	bne.n	80058a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005866:	429a      	cmp	r2, r3
 8005868:	d11a      	bne.n	80058a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005870:	4013      	ands	r3, r2
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005876:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005878:	4293      	cmp	r3, r2
 800587a:	d111      	bne.n	80058a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005886:	085b      	lsrs	r3, r3, #1
 8005888:	3b01      	subs	r3, #1
 800588a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800588c:	429a      	cmp	r2, r3
 800588e:	d107      	bne.n	80058a0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800589c:	429a      	cmp	r2, r3
 800589e:	d001      	beq.n	80058a4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e000      	b.n	80058a6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	40023800 	.word	0x40023800

080058b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80058be:	2300      	movs	r3, #0
 80058c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e0d0      	b.n	8005a6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058cc:	4b6a      	ldr	r3, [pc, #424]	@ (8005a78 <HAL_RCC_ClockConfig+0x1c4>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 030f 	and.w	r3, r3, #15
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d910      	bls.n	80058fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058da:	4b67      	ldr	r3, [pc, #412]	@ (8005a78 <HAL_RCC_ClockConfig+0x1c4>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f023 020f 	bic.w	r2, r3, #15
 80058e2:	4965      	ldr	r1, [pc, #404]	@ (8005a78 <HAL_RCC_ClockConfig+0x1c4>)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ea:	4b63      	ldr	r3, [pc, #396]	@ (8005a78 <HAL_RCC_ClockConfig+0x1c4>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d001      	beq.n	80058fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e0b8      	b.n	8005a6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d020      	beq.n	800594a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	d005      	beq.n	8005920 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005914:	4b59      	ldr	r3, [pc, #356]	@ (8005a7c <HAL_RCC_ClockConfig+0x1c8>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	4a58      	ldr	r2, [pc, #352]	@ (8005a7c <HAL_RCC_ClockConfig+0x1c8>)
 800591a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800591e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0308 	and.w	r3, r3, #8
 8005928:	2b00      	cmp	r3, #0
 800592a:	d005      	beq.n	8005938 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800592c:	4b53      	ldr	r3, [pc, #332]	@ (8005a7c <HAL_RCC_ClockConfig+0x1c8>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	4a52      	ldr	r2, [pc, #328]	@ (8005a7c <HAL_RCC_ClockConfig+0x1c8>)
 8005932:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005936:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005938:	4b50      	ldr	r3, [pc, #320]	@ (8005a7c <HAL_RCC_ClockConfig+0x1c8>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	494d      	ldr	r1, [pc, #308]	@ (8005a7c <HAL_RCC_ClockConfig+0x1c8>)
 8005946:	4313      	orrs	r3, r2
 8005948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d040      	beq.n	80059d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d107      	bne.n	800596e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800595e:	4b47      	ldr	r3, [pc, #284]	@ (8005a7c <HAL_RCC_ClockConfig+0x1c8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d115      	bne.n	8005996 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e07f      	b.n	8005a6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d107      	bne.n	8005986 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005976:	4b41      	ldr	r3, [pc, #260]	@ (8005a7c <HAL_RCC_ClockConfig+0x1c8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d109      	bne.n	8005996 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e073      	b.n	8005a6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005986:	4b3d      	ldr	r3, [pc, #244]	@ (8005a7c <HAL_RCC_ClockConfig+0x1c8>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e06b      	b.n	8005a6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005996:	4b39      	ldr	r3, [pc, #228]	@ (8005a7c <HAL_RCC_ClockConfig+0x1c8>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f023 0203 	bic.w	r2, r3, #3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	4936      	ldr	r1, [pc, #216]	@ (8005a7c <HAL_RCC_ClockConfig+0x1c8>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059a8:	f7fe fae0 	bl	8003f6c <HAL_GetTick>
 80059ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ae:	e00a      	b.n	80059c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059b0:	f7fe fadc 	bl	8003f6c <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059be:	4293      	cmp	r3, r2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e053      	b.n	8005a6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059c6:	4b2d      	ldr	r3, [pc, #180]	@ (8005a7c <HAL_RCC_ClockConfig+0x1c8>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 020c 	and.w	r2, r3, #12
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d1eb      	bne.n	80059b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059d8:	4b27      	ldr	r3, [pc, #156]	@ (8005a78 <HAL_RCC_ClockConfig+0x1c4>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d210      	bcs.n	8005a08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059e6:	4b24      	ldr	r3, [pc, #144]	@ (8005a78 <HAL_RCC_ClockConfig+0x1c4>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f023 020f 	bic.w	r2, r3, #15
 80059ee:	4922      	ldr	r1, [pc, #136]	@ (8005a78 <HAL_RCC_ClockConfig+0x1c4>)
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059f6:	4b20      	ldr	r3, [pc, #128]	@ (8005a78 <HAL_RCC_ClockConfig+0x1c4>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 030f 	and.w	r3, r3, #15
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d001      	beq.n	8005a08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e032      	b.n	8005a6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0304 	and.w	r3, r3, #4
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d008      	beq.n	8005a26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a14:	4b19      	ldr	r3, [pc, #100]	@ (8005a7c <HAL_RCC_ClockConfig+0x1c8>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	4916      	ldr	r1, [pc, #88]	@ (8005a7c <HAL_RCC_ClockConfig+0x1c8>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0308 	and.w	r3, r3, #8
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d009      	beq.n	8005a46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a32:	4b12      	ldr	r3, [pc, #72]	@ (8005a7c <HAL_RCC_ClockConfig+0x1c8>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	490e      	ldr	r1, [pc, #56]	@ (8005a7c <HAL_RCC_ClockConfig+0x1c8>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a46:	f000 f821 	bl	8005a8c <HAL_RCC_GetSysClockFreq>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a7c <HAL_RCC_ClockConfig+0x1c8>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	091b      	lsrs	r3, r3, #4
 8005a52:	f003 030f 	and.w	r3, r3, #15
 8005a56:	490a      	ldr	r1, [pc, #40]	@ (8005a80 <HAL_RCC_ClockConfig+0x1cc>)
 8005a58:	5ccb      	ldrb	r3, [r1, r3]
 8005a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a5e:	4a09      	ldr	r2, [pc, #36]	@ (8005a84 <HAL_RCC_ClockConfig+0x1d0>)
 8005a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a62:	4b09      	ldr	r3, [pc, #36]	@ (8005a88 <HAL_RCC_ClockConfig+0x1d4>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fe fa3c 	bl	8003ee4 <HAL_InitTick>

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	40023c00 	.word	0x40023c00
 8005a7c:	40023800 	.word	0x40023800
 8005a80:	0800c86c 	.word	0x0800c86c
 8005a84:	2000002c 	.word	0x2000002c
 8005a88:	20000030 	.word	0x20000030

08005a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a90:	b094      	sub	sp, #80	@ 0x50
 8005a92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a98:	2300      	movs	r3, #0
 8005a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005aa4:	4b79      	ldr	r3, [pc, #484]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f003 030c 	and.w	r3, r3, #12
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	d00d      	beq.n	8005acc <HAL_RCC_GetSysClockFreq+0x40>
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	f200 80e1 	bhi.w	8005c78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d003      	beq.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005abe:	e0db      	b.n	8005c78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ac0:	4b73      	ldr	r3, [pc, #460]	@ (8005c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ac4:	e0db      	b.n	8005c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ac6:	4b73      	ldr	r3, [pc, #460]	@ (8005c94 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005aca:	e0d8      	b.n	8005c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005acc:	4b6f      	ldr	r3, [pc, #444]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ad4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d063      	beq.n	8005baa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ae2:	4b6a      	ldr	r3, [pc, #424]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	099b      	lsrs	r3, r3, #6
 8005ae8:	2200      	movs	r2, #0
 8005aea:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005aec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005af6:	2300      	movs	r3, #0
 8005af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005afa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005afe:	4622      	mov	r2, r4
 8005b00:	462b      	mov	r3, r5
 8005b02:	f04f 0000 	mov.w	r0, #0
 8005b06:	f04f 0100 	mov.w	r1, #0
 8005b0a:	0159      	lsls	r1, r3, #5
 8005b0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b10:	0150      	lsls	r0, r2, #5
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	4621      	mov	r1, r4
 8005b18:	1a51      	subs	r1, r2, r1
 8005b1a:	6139      	str	r1, [r7, #16]
 8005b1c:	4629      	mov	r1, r5
 8005b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8005b22:	617b      	str	r3, [r7, #20]
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	f04f 0300 	mov.w	r3, #0
 8005b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b30:	4659      	mov	r1, fp
 8005b32:	018b      	lsls	r3, r1, #6
 8005b34:	4651      	mov	r1, sl
 8005b36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b3a:	4651      	mov	r1, sl
 8005b3c:	018a      	lsls	r2, r1, #6
 8005b3e:	4651      	mov	r1, sl
 8005b40:	ebb2 0801 	subs.w	r8, r2, r1
 8005b44:	4659      	mov	r1, fp
 8005b46:	eb63 0901 	sbc.w	r9, r3, r1
 8005b4a:	f04f 0200 	mov.w	r2, #0
 8005b4e:	f04f 0300 	mov.w	r3, #0
 8005b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b5e:	4690      	mov	r8, r2
 8005b60:	4699      	mov	r9, r3
 8005b62:	4623      	mov	r3, r4
 8005b64:	eb18 0303 	adds.w	r3, r8, r3
 8005b68:	60bb      	str	r3, [r7, #8]
 8005b6a:	462b      	mov	r3, r5
 8005b6c:	eb49 0303 	adc.w	r3, r9, r3
 8005b70:	60fb      	str	r3, [r7, #12]
 8005b72:	f04f 0200 	mov.w	r2, #0
 8005b76:	f04f 0300 	mov.w	r3, #0
 8005b7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b7e:	4629      	mov	r1, r5
 8005b80:	024b      	lsls	r3, r1, #9
 8005b82:	4621      	mov	r1, r4
 8005b84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b88:	4621      	mov	r1, r4
 8005b8a:	024a      	lsls	r2, r1, #9
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	4619      	mov	r1, r3
 8005b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b92:	2200      	movs	r2, #0
 8005b94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b9c:	f7fb f874 	bl	8000c88 <__aeabi_uldivmod>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ba8:	e058      	b.n	8005c5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005baa:	4b38      	ldr	r3, [pc, #224]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	099b      	lsrs	r3, r3, #6
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	4611      	mov	r1, r2
 8005bb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005bba:	623b      	str	r3, [r7, #32]
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005bc4:	4642      	mov	r2, r8
 8005bc6:	464b      	mov	r3, r9
 8005bc8:	f04f 0000 	mov.w	r0, #0
 8005bcc:	f04f 0100 	mov.w	r1, #0
 8005bd0:	0159      	lsls	r1, r3, #5
 8005bd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bd6:	0150      	lsls	r0, r2, #5
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4641      	mov	r1, r8
 8005bde:	ebb2 0a01 	subs.w	sl, r2, r1
 8005be2:	4649      	mov	r1, r9
 8005be4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005be8:	f04f 0200 	mov.w	r2, #0
 8005bec:	f04f 0300 	mov.w	r3, #0
 8005bf0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bf4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005bf8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bfc:	ebb2 040a 	subs.w	r4, r2, sl
 8005c00:	eb63 050b 	sbc.w	r5, r3, fp
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	f04f 0300 	mov.w	r3, #0
 8005c0c:	00eb      	lsls	r3, r5, #3
 8005c0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c12:	00e2      	lsls	r2, r4, #3
 8005c14:	4614      	mov	r4, r2
 8005c16:	461d      	mov	r5, r3
 8005c18:	4643      	mov	r3, r8
 8005c1a:	18e3      	adds	r3, r4, r3
 8005c1c:	603b      	str	r3, [r7, #0]
 8005c1e:	464b      	mov	r3, r9
 8005c20:	eb45 0303 	adc.w	r3, r5, r3
 8005c24:	607b      	str	r3, [r7, #4]
 8005c26:	f04f 0200 	mov.w	r2, #0
 8005c2a:	f04f 0300 	mov.w	r3, #0
 8005c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c32:	4629      	mov	r1, r5
 8005c34:	028b      	lsls	r3, r1, #10
 8005c36:	4621      	mov	r1, r4
 8005c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c3c:	4621      	mov	r1, r4
 8005c3e:	028a      	lsls	r2, r1, #10
 8005c40:	4610      	mov	r0, r2
 8005c42:	4619      	mov	r1, r3
 8005c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c46:	2200      	movs	r2, #0
 8005c48:	61bb      	str	r3, [r7, #24]
 8005c4a:	61fa      	str	r2, [r7, #28]
 8005c4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c50:	f7fb f81a 	bl	8000c88 <__aeabi_uldivmod>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4613      	mov	r3, r2
 8005c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	0c1b      	lsrs	r3, r3, #16
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	3301      	adds	r3, #1
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005c6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c76:	e002      	b.n	8005c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c78:	4b05      	ldr	r3, [pc, #20]	@ (8005c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3750      	adds	r7, #80	@ 0x50
 8005c84:	46bd      	mov	sp, r7
 8005c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c8a:	bf00      	nop
 8005c8c:	40023800 	.word	0x40023800
 8005c90:	00f42400 	.word	0x00f42400
 8005c94:	007a1200 	.word	0x007a1200

08005c98 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c9c:	4b03      	ldr	r3, [pc, #12]	@ (8005cac <HAL_RCC_GetHCLKFreq+0x14>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	2000002c 	.word	0x2000002c

08005cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005cb4:	f7ff fff0 	bl	8005c98 <HAL_RCC_GetHCLKFreq>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	4b05      	ldr	r3, [pc, #20]	@ (8005cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	0a9b      	lsrs	r3, r3, #10
 8005cc0:	f003 0307 	and.w	r3, r3, #7
 8005cc4:	4903      	ldr	r1, [pc, #12]	@ (8005cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cc6:	5ccb      	ldrb	r3, [r1, r3]
 8005cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	40023800 	.word	0x40023800
 8005cd4:	0800c87c 	.word	0x0800c87c

08005cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005cdc:	f7ff ffdc 	bl	8005c98 <HAL_RCC_GetHCLKFreq>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	4b05      	ldr	r3, [pc, #20]	@ (8005cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	0b5b      	lsrs	r3, r3, #13
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	4903      	ldr	r1, [pc, #12]	@ (8005cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cee:	5ccb      	ldrb	r3, [r1, r3]
 8005cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	40023800 	.word	0x40023800
 8005cfc:	0800c87c 	.word	0x0800c87c

08005d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b088      	sub	sp, #32
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8005d10:	2300      	movs	r3, #0
 8005d12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005d14:	2300      	movs	r3, #0
 8005d16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d012      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d24:	4b65      	ldr	r3, [pc, #404]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	4a64      	ldr	r2, [pc, #400]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d2a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005d2e:	6093      	str	r3, [r2, #8]
 8005d30:	4b62      	ldr	r3, [pc, #392]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d32:	689a      	ldr	r2, [r3, #8]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d38:	4960      	ldr	r1, [pc, #384]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8005d46:	2301      	movs	r3, #1
 8005d48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d017      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d56:	4b59      	ldr	r3, [pc, #356]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d5c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d64:	4955      	ldr	r1, [pc, #340]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d74:	d101      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8005d76:	2301      	movs	r3, #1
 8005d78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8005d82:	2301      	movs	r3, #1
 8005d84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d017      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d92:	4b4a      	ldr	r3, [pc, #296]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d98:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da0:	4946      	ldr	r1, [pc, #280]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005db0:	d101      	bne.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8005db2:	2301      	movs	r3, #1
 8005db4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 808b 	beq.w	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005dd0:	4b3a      	ldr	r3, [pc, #232]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd4:	4a39      	ldr	r2, [pc, #228]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dda:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ddc:	4b37      	ldr	r3, [pc, #220]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005de8:	4b35      	ldr	r3, [pc, #212]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a34      	ldr	r2, [pc, #208]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005df2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005df4:	f7fe f8ba 	bl	8003f6c <HAL_GetTick>
 8005df8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005dfa:	e008      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dfc:	f7fe f8b6 	bl	8003f6c <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b64      	cmp	r3, #100	@ 0x64
 8005e08:	d901      	bls.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e2bc      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005e0e:	4b2c      	ldr	r3, [pc, #176]	@ (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0f0      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e1a:	4b28      	ldr	r3, [pc, #160]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e22:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d035      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d02e      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e38:	4b20      	ldr	r3, [pc, #128]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e40:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e42:	4b1e      	ldr	r3, [pc, #120]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e46:	4a1d      	ldr	r2, [pc, #116]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e4c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e52:	4a1a      	ldr	r2, [pc, #104]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e58:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005e5a:	4a18      	ldr	r2, [pc, #96]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e60:	4b16      	ldr	r3, [pc, #88]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d114      	bne.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e6c:	f7fe f87e 	bl	8003f6c <HAL_GetTick>
 8005e70:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e72:	e00a      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e74:	f7fe f87a 	bl	8003f6c <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e27e      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0ee      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ea2:	d111      	bne.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8005ea4:	4b05      	ldr	r3, [pc, #20]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005eb0:	4b04      	ldr	r3, [pc, #16]	@ (8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005eb2:	400b      	ands	r3, r1
 8005eb4:	4901      	ldr	r1, [pc, #4]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	608b      	str	r3, [r1, #8]
 8005eba:	e00b      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005ebc:	40023800 	.word	0x40023800
 8005ec0:	40007000 	.word	0x40007000
 8005ec4:	0ffffcff 	.word	0x0ffffcff
 8005ec8:	4ba4      	ldr	r3, [pc, #656]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	4aa3      	ldr	r2, [pc, #652]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ece:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005ed2:	6093      	str	r3, [r2, #8]
 8005ed4:	4ba1      	ldr	r3, [pc, #644]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ed6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ee0:	499e      	ldr	r1, [pc, #632]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0310 	and.w	r3, r3, #16
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d010      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ef2:	4b9a      	ldr	r3, [pc, #616]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ef8:	4a98      	ldr	r2, [pc, #608]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005efa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005efe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005f02:	4b96      	ldr	r3, [pc, #600]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f04:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f0c:	4993      	ldr	r1, [pc, #588]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00a      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f20:	4b8e      	ldr	r3, [pc, #568]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f26:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f2e:	498b      	ldr	r1, [pc, #556]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f42:	4b86      	ldr	r3, [pc, #536]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f50:	4982      	ldr	r1, [pc, #520]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00a      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f64:	4b7d      	ldr	r3, [pc, #500]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f72:	497a      	ldr	r1, [pc, #488]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f86:	4b75      	ldr	r3, [pc, #468]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f8c:	f023 0203 	bic.w	r2, r3, #3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f94:	4971      	ldr	r1, [pc, #452]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00a      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fa8:	4b6c      	ldr	r3, [pc, #432]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fae:	f023 020c 	bic.w	r2, r3, #12
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb6:	4969      	ldr	r1, [pc, #420]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fca:	4b64      	ldr	r3, [pc, #400]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fd0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd8:	4960      	ldr	r1, [pc, #384]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00a      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005fec:	4b5b      	ldr	r3, [pc, #364]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ff2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ffa:	4958      	ldr	r1, [pc, #352]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00a      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800600e:	4b53      	ldr	r3, [pc, #332]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006014:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800601c:	494f      	ldr	r1, [pc, #316]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800601e:	4313      	orrs	r3, r2
 8006020:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00a      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006030:	4b4a      	ldr	r3, [pc, #296]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006036:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800603e:	4947      	ldr	r1, [pc, #284]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006040:	4313      	orrs	r3, r2
 8006042:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00a      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006052:	4b42      	ldr	r3, [pc, #264]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006058:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006060:	493e      	ldr	r1, [pc, #248]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006062:	4313      	orrs	r3, r2
 8006064:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00a      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006074:	4b39      	ldr	r3, [pc, #228]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800607a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006082:	4936      	ldr	r1, [pc, #216]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006084:	4313      	orrs	r3, r2
 8006086:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d011      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006096:	4b31      	ldr	r3, [pc, #196]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800609c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060a4:	492d      	ldr	r1, [pc, #180]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060b4:	d101      	bne.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80060b6:	2301      	movs	r3, #1
 80060b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00a      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060c6:	4b25      	ldr	r3, [pc, #148]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80060c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060cc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060d4:	4921      	ldr	r1, [pc, #132]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00a      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80060e8:	4b1c      	ldr	r3, [pc, #112]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80060ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ee:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060f6:	4919      	ldr	r1, [pc, #100]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80060f8:	4313      	orrs	r3, r2
 80060fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00a      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800610a:	4b14      	ldr	r3, [pc, #80]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800610c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006110:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006118:	4910      	ldr	r1, [pc, #64]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800611a:	4313      	orrs	r3, r2
 800611c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d006      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 809d 	beq.w	800626e <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006134:	4b09      	ldr	r3, [pc, #36]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a08      	ldr	r2, [pc, #32]	@ (800615c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800613a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800613e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006140:	f7fd ff14 	bl	8003f6c <HAL_GetTick>
 8006144:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006146:	e00b      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006148:	f7fd ff10 	bl	8003f6c <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b64      	cmp	r3, #100	@ 0x64
 8006154:	d904      	bls.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e116      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800615a:	bf00      	nop
 800615c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006160:	4b8b      	ldr	r3, [pc, #556]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1ed      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d017      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617c:	2b00      	cmp	r3, #0
 800617e:	d113      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006180:	4b83      	ldr	r3, [pc, #524]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006182:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006186:	0e1b      	lsrs	r3, r3, #24
 8006188:	f003 030f 	and.w	r3, r3, #15
 800618c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	019a      	lsls	r2, r3, #6
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	061b      	lsls	r3, r3, #24
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	071b      	lsls	r3, r3, #28
 80061a0:	497b      	ldr	r1, [pc, #492]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d004      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061bc:	d00a      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d024      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061d2:	d11f      	bne.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80061d4:	4b6e      	ldr	r3, [pc, #440]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80061d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061da:	0f1b      	lsrs	r3, r3, #28
 80061dc:	f003 0307 	and.w	r3, r3, #7
 80061e0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	019a      	lsls	r2, r3, #6
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	061b      	lsls	r3, r3, #24
 80061ee:	431a      	orrs	r2, r3
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	071b      	lsls	r3, r3, #28
 80061f4:	4966      	ldr	r1, [pc, #408]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80061fc:	4b64      	ldr	r3, [pc, #400]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80061fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006202:	f023 021f 	bic.w	r2, r3, #31
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	3b01      	subs	r3, #1
 800620c:	4960      	ldr	r1, [pc, #384]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800620e:	4313      	orrs	r3, r2
 8006210:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00d      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	019a      	lsls	r2, r3, #6
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	061b      	lsls	r3, r3, #24
 800622c:	431a      	orrs	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	071b      	lsls	r3, r3, #28
 8006234:	4956      	ldr	r1, [pc, #344]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006236:	4313      	orrs	r3, r2
 8006238:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800623c:	4b54      	ldr	r3, [pc, #336]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a53      	ldr	r2, [pc, #332]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006242:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006246:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006248:	f7fd fe90 	bl	8003f6c <HAL_GetTick>
 800624c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800624e:	e008      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006250:	f7fd fe8c 	bl	8003f6c <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b64      	cmp	r3, #100	@ 0x64
 800625c:	d901      	bls.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e092      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006262:	4b4b      	ldr	r3, [pc, #300]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0f0      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	2b01      	cmp	r3, #1
 8006272:	f040 8088 	bne.w	8006386 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006276:	4b46      	ldr	r3, [pc, #280]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a45      	ldr	r2, [pc, #276]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800627c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006282:	f7fd fe73 	bl	8003f6c <HAL_GetTick>
 8006286:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006288:	e008      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800628a:	f7fd fe6f 	bl	8003f6c <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	2b64      	cmp	r3, #100	@ 0x64
 8006296:	d901      	bls.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e075      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800629c:	4b3c      	ldr	r3, [pc, #240]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062a8:	d0ef      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d009      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d024      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d120      	bne.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80062d2:	4b2f      	ldr	r3, [pc, #188]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80062d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062d8:	0c1b      	lsrs	r3, r3, #16
 80062da:	f003 0303 	and.w	r3, r3, #3
 80062de:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	019a      	lsls	r2, r3, #6
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	041b      	lsls	r3, r3, #16
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	061b      	lsls	r3, r3, #24
 80062f2:	4927      	ldr	r1, [pc, #156]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80062fa:	4b25      	ldr	r3, [pc, #148]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80062fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006300:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	3b01      	subs	r3, #1
 800630a:	021b      	lsls	r3, r3, #8
 800630c:	4920      	ldr	r1, [pc, #128]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800630e:	4313      	orrs	r3, r2
 8006310:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d018      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006324:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006328:	d113      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800632a:	4b19      	ldr	r3, [pc, #100]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800632c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006330:	0e1b      	lsrs	r3, r3, #24
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	019a      	lsls	r2, r3, #6
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	041b      	lsls	r3, r3, #16
 8006344:	431a      	orrs	r2, r3
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	061b      	lsls	r3, r3, #24
 800634a:	4911      	ldr	r1, [pc, #68]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800634c:	4313      	orrs	r3, r2
 800634e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006352:	4b0f      	ldr	r3, [pc, #60]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a0e      	ldr	r2, [pc, #56]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800635c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800635e:	f7fd fe05 	bl	8003f6c <HAL_GetTick>
 8006362:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006364:	e008      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006366:	f7fd fe01 	bl	8003f6c <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2b64      	cmp	r3, #100	@ 0x64
 8006372:	d901      	bls.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e007      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006378:	4b05      	ldr	r3, [pc, #20]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006380:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006384:	d1ef      	bne.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3720      	adds	r7, #32
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	40023800 	.word	0x40023800

08006394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e049      	b.n	800643a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d106      	bne.n	80063c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7fd f998 	bl	80036f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2202      	movs	r2, #2
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3304      	adds	r3, #4
 80063d0:	4619      	mov	r1, r3
 80063d2:	4610      	mov	r0, r2
 80063d4:	f000 fb6e 	bl	8006ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b082      	sub	sp, #8
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e049      	b.n	80064e8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d106      	bne.n	800646e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f841 	bl	80064f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2202      	movs	r2, #2
 8006472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	3304      	adds	r3, #4
 800647e:	4619      	mov	r1, r3
 8006480:	4610      	mov	r0, r2
 8006482:	f000 fb17 	bl	8006ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2201      	movs	r2, #1
 80064b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80064f8:	bf00      	nop
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d109      	bne.n	8006528 <HAL_TIM_PWM_Start+0x24>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b01      	cmp	r3, #1
 800651e:	bf14      	ite	ne
 8006520:	2301      	movne	r3, #1
 8006522:	2300      	moveq	r3, #0
 8006524:	b2db      	uxtb	r3, r3
 8006526:	e03c      	b.n	80065a2 <HAL_TIM_PWM_Start+0x9e>
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	2b04      	cmp	r3, #4
 800652c:	d109      	bne.n	8006542 <HAL_TIM_PWM_Start+0x3e>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b01      	cmp	r3, #1
 8006538:	bf14      	ite	ne
 800653a:	2301      	movne	r3, #1
 800653c:	2300      	moveq	r3, #0
 800653e:	b2db      	uxtb	r3, r3
 8006540:	e02f      	b.n	80065a2 <HAL_TIM_PWM_Start+0x9e>
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b08      	cmp	r3, #8
 8006546:	d109      	bne.n	800655c <HAL_TIM_PWM_Start+0x58>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b01      	cmp	r3, #1
 8006552:	bf14      	ite	ne
 8006554:	2301      	movne	r3, #1
 8006556:	2300      	moveq	r3, #0
 8006558:	b2db      	uxtb	r3, r3
 800655a:	e022      	b.n	80065a2 <HAL_TIM_PWM_Start+0x9e>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	2b0c      	cmp	r3, #12
 8006560:	d109      	bne.n	8006576 <HAL_TIM_PWM_Start+0x72>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b01      	cmp	r3, #1
 800656c:	bf14      	ite	ne
 800656e:	2301      	movne	r3, #1
 8006570:	2300      	moveq	r3, #0
 8006572:	b2db      	uxtb	r3, r3
 8006574:	e015      	b.n	80065a2 <HAL_TIM_PWM_Start+0x9e>
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	2b10      	cmp	r3, #16
 800657a:	d109      	bne.n	8006590 <HAL_TIM_PWM_Start+0x8c>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b01      	cmp	r3, #1
 8006586:	bf14      	ite	ne
 8006588:	2301      	movne	r3, #1
 800658a:	2300      	moveq	r3, #0
 800658c:	b2db      	uxtb	r3, r3
 800658e:	e008      	b.n	80065a2 <HAL_TIM_PWM_Start+0x9e>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b01      	cmp	r3, #1
 800659a:	bf14      	ite	ne
 800659c:	2301      	movne	r3, #1
 800659e:	2300      	moveq	r3, #0
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e092      	b.n	80066d0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d104      	bne.n	80065ba <HAL_TIM_PWM_Start+0xb6>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2202      	movs	r2, #2
 80065b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065b8:	e023      	b.n	8006602 <HAL_TIM_PWM_Start+0xfe>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d104      	bne.n	80065ca <HAL_TIM_PWM_Start+0xc6>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2202      	movs	r2, #2
 80065c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065c8:	e01b      	b.n	8006602 <HAL_TIM_PWM_Start+0xfe>
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d104      	bne.n	80065da <HAL_TIM_PWM_Start+0xd6>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065d8:	e013      	b.n	8006602 <HAL_TIM_PWM_Start+0xfe>
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	2b0c      	cmp	r3, #12
 80065de:	d104      	bne.n	80065ea <HAL_TIM_PWM_Start+0xe6>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2202      	movs	r2, #2
 80065e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80065e8:	e00b      	b.n	8006602 <HAL_TIM_PWM_Start+0xfe>
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	2b10      	cmp	r3, #16
 80065ee:	d104      	bne.n	80065fa <HAL_TIM_PWM_Start+0xf6>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065f8:	e003      	b.n	8006602 <HAL_TIM_PWM_Start+0xfe>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2202      	movs	r2, #2
 80065fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2201      	movs	r2, #1
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	4618      	mov	r0, r3
 800660c:	f000 fdf0 	bl	80071f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a30      	ldr	r2, [pc, #192]	@ (80066d8 <HAL_TIM_PWM_Start+0x1d4>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d004      	beq.n	8006624 <HAL_TIM_PWM_Start+0x120>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a2f      	ldr	r2, [pc, #188]	@ (80066dc <HAL_TIM_PWM_Start+0x1d8>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d101      	bne.n	8006628 <HAL_TIM_PWM_Start+0x124>
 8006624:	2301      	movs	r3, #1
 8006626:	e000      	b.n	800662a <HAL_TIM_PWM_Start+0x126>
 8006628:	2300      	movs	r3, #0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d007      	beq.n	800663e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800663c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a25      	ldr	r2, [pc, #148]	@ (80066d8 <HAL_TIM_PWM_Start+0x1d4>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d022      	beq.n	800668e <HAL_TIM_PWM_Start+0x18a>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006650:	d01d      	beq.n	800668e <HAL_TIM_PWM_Start+0x18a>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a22      	ldr	r2, [pc, #136]	@ (80066e0 <HAL_TIM_PWM_Start+0x1dc>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d018      	beq.n	800668e <HAL_TIM_PWM_Start+0x18a>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a20      	ldr	r2, [pc, #128]	@ (80066e4 <HAL_TIM_PWM_Start+0x1e0>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d013      	beq.n	800668e <HAL_TIM_PWM_Start+0x18a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a1f      	ldr	r2, [pc, #124]	@ (80066e8 <HAL_TIM_PWM_Start+0x1e4>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d00e      	beq.n	800668e <HAL_TIM_PWM_Start+0x18a>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a19      	ldr	r2, [pc, #100]	@ (80066dc <HAL_TIM_PWM_Start+0x1d8>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d009      	beq.n	800668e <HAL_TIM_PWM_Start+0x18a>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a1b      	ldr	r2, [pc, #108]	@ (80066ec <HAL_TIM_PWM_Start+0x1e8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d004      	beq.n	800668e <HAL_TIM_PWM_Start+0x18a>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a19      	ldr	r2, [pc, #100]	@ (80066f0 <HAL_TIM_PWM_Start+0x1ec>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d115      	bne.n	80066ba <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	4b17      	ldr	r3, [pc, #92]	@ (80066f4 <HAL_TIM_PWM_Start+0x1f0>)
 8006696:	4013      	ands	r3, r2
 8006698:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b06      	cmp	r3, #6
 800669e:	d015      	beq.n	80066cc <HAL_TIM_PWM_Start+0x1c8>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066a6:	d011      	beq.n	80066cc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f042 0201 	orr.w	r2, r2, #1
 80066b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b8:	e008      	b.n	80066cc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f042 0201 	orr.w	r2, r2, #1
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	e000      	b.n	80066ce <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	40010000 	.word	0x40010000
 80066dc:	40010400 	.word	0x40010400
 80066e0:	40000400 	.word	0x40000400
 80066e4:	40000800 	.word	0x40000800
 80066e8:	40000c00 	.word	0x40000c00
 80066ec:	40014000 	.word	0x40014000
 80066f0:	40001800 	.word	0x40001800
 80066f4:	00010007 	.word	0x00010007

080066f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800670e:	2b01      	cmp	r3, #1
 8006710:	d101      	bne.n	8006716 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006712:	2302      	movs	r3, #2
 8006714:	e0ff      	b.n	8006916 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b14      	cmp	r3, #20
 8006722:	f200 80f0 	bhi.w	8006906 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006726:	a201      	add	r2, pc, #4	@ (adr r2, 800672c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672c:	08006781 	.word	0x08006781
 8006730:	08006907 	.word	0x08006907
 8006734:	08006907 	.word	0x08006907
 8006738:	08006907 	.word	0x08006907
 800673c:	080067c1 	.word	0x080067c1
 8006740:	08006907 	.word	0x08006907
 8006744:	08006907 	.word	0x08006907
 8006748:	08006907 	.word	0x08006907
 800674c:	08006803 	.word	0x08006803
 8006750:	08006907 	.word	0x08006907
 8006754:	08006907 	.word	0x08006907
 8006758:	08006907 	.word	0x08006907
 800675c:	08006843 	.word	0x08006843
 8006760:	08006907 	.word	0x08006907
 8006764:	08006907 	.word	0x08006907
 8006768:	08006907 	.word	0x08006907
 800676c:	08006885 	.word	0x08006885
 8006770:	08006907 	.word	0x08006907
 8006774:	08006907 	.word	0x08006907
 8006778:	08006907 	.word	0x08006907
 800677c:	080068c5 	.word	0x080068c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68b9      	ldr	r1, [r7, #8]
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fa3a 	bl	8006c00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	699a      	ldr	r2, [r3, #24]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 0208 	orr.w	r2, r2, #8
 800679a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	699a      	ldr	r2, [r3, #24]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0204 	bic.w	r2, r2, #4
 80067aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6999      	ldr	r1, [r3, #24]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	691a      	ldr	r2, [r3, #16]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	619a      	str	r2, [r3, #24]
      break;
 80067be:	e0a5      	b.n	800690c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68b9      	ldr	r1, [r7, #8]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 fa8c 	bl	8006ce4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	699a      	ldr	r2, [r3, #24]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	699a      	ldr	r2, [r3, #24]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6999      	ldr	r1, [r3, #24]
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	021a      	lsls	r2, r3, #8
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	430a      	orrs	r2, r1
 80067fe:	619a      	str	r2, [r3, #24]
      break;
 8006800:	e084      	b.n	800690c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68b9      	ldr	r1, [r7, #8]
 8006808:	4618      	mov	r0, r3
 800680a:	f000 fae3 	bl	8006dd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	69da      	ldr	r2, [r3, #28]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f042 0208 	orr.w	r2, r2, #8
 800681c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	69da      	ldr	r2, [r3, #28]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0204 	bic.w	r2, r2, #4
 800682c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	69d9      	ldr	r1, [r3, #28]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	691a      	ldr	r2, [r3, #16]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	61da      	str	r2, [r3, #28]
      break;
 8006840:	e064      	b.n	800690c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68b9      	ldr	r1, [r7, #8]
 8006848:	4618      	mov	r0, r3
 800684a:	f000 fb39 	bl	8006ec0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	69da      	ldr	r2, [r3, #28]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800685c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	69da      	ldr	r2, [r3, #28]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800686c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69d9      	ldr	r1, [r3, #28]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	021a      	lsls	r2, r3, #8
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	61da      	str	r2, [r3, #28]
      break;
 8006882:	e043      	b.n	800690c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68b9      	ldr	r1, [r7, #8]
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fb70 	bl	8006f70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f042 0208 	orr.w	r2, r2, #8
 800689e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 0204 	bic.w	r2, r2, #4
 80068ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	691a      	ldr	r2, [r3, #16]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80068c2:	e023      	b.n	800690c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68b9      	ldr	r1, [r7, #8]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 fba2 	bl	8007014 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	021a      	lsls	r2, r3, #8
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006904:	e002      	b.n	800690c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	75fb      	strb	r3, [r7, #23]
      break;
 800690a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006914:	7dfb      	ldrb	r3, [r7, #23]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop

08006920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <HAL_TIM_ConfigClockSource+0x1c>
 8006938:	2302      	movs	r3, #2
 800693a:	e0b4      	b.n	8006aa6 <HAL_TIM_ConfigClockSource+0x186>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	4b56      	ldr	r3, [pc, #344]	@ (8006ab0 <HAL_TIM_ConfigClockSource+0x190>)
 8006958:	4013      	ands	r3, r2
 800695a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006974:	d03e      	beq.n	80069f4 <HAL_TIM_ConfigClockSource+0xd4>
 8006976:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800697a:	f200 8087 	bhi.w	8006a8c <HAL_TIM_ConfigClockSource+0x16c>
 800697e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006982:	f000 8086 	beq.w	8006a92 <HAL_TIM_ConfigClockSource+0x172>
 8006986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800698a:	d87f      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x16c>
 800698c:	2b70      	cmp	r3, #112	@ 0x70
 800698e:	d01a      	beq.n	80069c6 <HAL_TIM_ConfigClockSource+0xa6>
 8006990:	2b70      	cmp	r3, #112	@ 0x70
 8006992:	d87b      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x16c>
 8006994:	2b60      	cmp	r3, #96	@ 0x60
 8006996:	d050      	beq.n	8006a3a <HAL_TIM_ConfigClockSource+0x11a>
 8006998:	2b60      	cmp	r3, #96	@ 0x60
 800699a:	d877      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x16c>
 800699c:	2b50      	cmp	r3, #80	@ 0x50
 800699e:	d03c      	beq.n	8006a1a <HAL_TIM_ConfigClockSource+0xfa>
 80069a0:	2b50      	cmp	r3, #80	@ 0x50
 80069a2:	d873      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x16c>
 80069a4:	2b40      	cmp	r3, #64	@ 0x40
 80069a6:	d058      	beq.n	8006a5a <HAL_TIM_ConfigClockSource+0x13a>
 80069a8:	2b40      	cmp	r3, #64	@ 0x40
 80069aa:	d86f      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x16c>
 80069ac:	2b30      	cmp	r3, #48	@ 0x30
 80069ae:	d064      	beq.n	8006a7a <HAL_TIM_ConfigClockSource+0x15a>
 80069b0:	2b30      	cmp	r3, #48	@ 0x30
 80069b2:	d86b      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x16c>
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	d060      	beq.n	8006a7a <HAL_TIM_ConfigClockSource+0x15a>
 80069b8:	2b20      	cmp	r3, #32
 80069ba:	d867      	bhi.n	8006a8c <HAL_TIM_ConfigClockSource+0x16c>
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d05c      	beq.n	8006a7a <HAL_TIM_ConfigClockSource+0x15a>
 80069c0:	2b10      	cmp	r3, #16
 80069c2:	d05a      	beq.n	8006a7a <HAL_TIM_ConfigClockSource+0x15a>
 80069c4:	e062      	b.n	8006a8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069d6:	f000 fbeb 	bl	80071b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80069e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	609a      	str	r2, [r3, #8]
      break;
 80069f2:	e04f      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a04:	f000 fbd4 	bl	80071b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689a      	ldr	r2, [r3, #8]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a16:	609a      	str	r2, [r3, #8]
      break;
 8006a18:	e03c      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a26:	461a      	mov	r2, r3
 8006a28:	f000 fb48 	bl	80070bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2150      	movs	r1, #80	@ 0x50
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fba1 	bl	800717a <TIM_ITRx_SetConfig>
      break;
 8006a38:	e02c      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a46:	461a      	mov	r2, r3
 8006a48:	f000 fb67 	bl	800711a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2160      	movs	r1, #96	@ 0x60
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fb91 	bl	800717a <TIM_ITRx_SetConfig>
      break;
 8006a58:	e01c      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a66:	461a      	mov	r2, r3
 8006a68:	f000 fb28 	bl	80070bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2140      	movs	r1, #64	@ 0x40
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fb81 	bl	800717a <TIM_ITRx_SetConfig>
      break;
 8006a78:	e00c      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4619      	mov	r1, r3
 8006a84:	4610      	mov	r0, r2
 8006a86:	f000 fb78 	bl	800717a <TIM_ITRx_SetConfig>
      break;
 8006a8a:	e003      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a90:	e000      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	fffeff88 	.word	0xfffeff88

08006ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a43      	ldr	r2, [pc, #268]	@ (8006bd4 <TIM_Base_SetConfig+0x120>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d013      	beq.n	8006af4 <TIM_Base_SetConfig+0x40>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ad2:	d00f      	beq.n	8006af4 <TIM_Base_SetConfig+0x40>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a40      	ldr	r2, [pc, #256]	@ (8006bd8 <TIM_Base_SetConfig+0x124>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d00b      	beq.n	8006af4 <TIM_Base_SetConfig+0x40>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a3f      	ldr	r2, [pc, #252]	@ (8006bdc <TIM_Base_SetConfig+0x128>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d007      	beq.n	8006af4 <TIM_Base_SetConfig+0x40>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a3e      	ldr	r2, [pc, #248]	@ (8006be0 <TIM_Base_SetConfig+0x12c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d003      	beq.n	8006af4 <TIM_Base_SetConfig+0x40>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a3d      	ldr	r2, [pc, #244]	@ (8006be4 <TIM_Base_SetConfig+0x130>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d108      	bne.n	8006b06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a32      	ldr	r2, [pc, #200]	@ (8006bd4 <TIM_Base_SetConfig+0x120>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d02b      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b14:	d027      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a2f      	ldr	r2, [pc, #188]	@ (8006bd8 <TIM_Base_SetConfig+0x124>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d023      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a2e      	ldr	r2, [pc, #184]	@ (8006bdc <TIM_Base_SetConfig+0x128>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d01f      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a2d      	ldr	r2, [pc, #180]	@ (8006be0 <TIM_Base_SetConfig+0x12c>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d01b      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a2c      	ldr	r2, [pc, #176]	@ (8006be4 <TIM_Base_SetConfig+0x130>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d017      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a2b      	ldr	r2, [pc, #172]	@ (8006be8 <TIM_Base_SetConfig+0x134>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d013      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a2a      	ldr	r2, [pc, #168]	@ (8006bec <TIM_Base_SetConfig+0x138>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d00f      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a29      	ldr	r2, [pc, #164]	@ (8006bf0 <TIM_Base_SetConfig+0x13c>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d00b      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a28      	ldr	r2, [pc, #160]	@ (8006bf4 <TIM_Base_SetConfig+0x140>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d007      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a27      	ldr	r2, [pc, #156]	@ (8006bf8 <TIM_Base_SetConfig+0x144>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d003      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a26      	ldr	r2, [pc, #152]	@ (8006bfc <TIM_Base_SetConfig+0x148>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d108      	bne.n	8006b78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	689a      	ldr	r2, [r3, #8]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a0e      	ldr	r2, [pc, #56]	@ (8006bd4 <TIM_Base_SetConfig+0x120>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d003      	beq.n	8006ba6 <TIM_Base_SetConfig+0xf2>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a10      	ldr	r2, [pc, #64]	@ (8006be4 <TIM_Base_SetConfig+0x130>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d103      	bne.n	8006bae <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	691a      	ldr	r2, [r3, #16]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f043 0204 	orr.w	r2, r3, #4
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	601a      	str	r2, [r3, #0]
}
 8006bc6:	bf00      	nop
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	40010000 	.word	0x40010000
 8006bd8:	40000400 	.word	0x40000400
 8006bdc:	40000800 	.word	0x40000800
 8006be0:	40000c00 	.word	0x40000c00
 8006be4:	40010400 	.word	0x40010400
 8006be8:	40014000 	.word	0x40014000
 8006bec:	40014400 	.word	0x40014400
 8006bf0:	40014800 	.word	0x40014800
 8006bf4:	40001800 	.word	0x40001800
 8006bf8:	40001c00 	.word	0x40001c00
 8006bfc:	40002000 	.word	0x40002000

08006c00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	f023 0201 	bic.w	r2, r3, #1
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	4b2b      	ldr	r3, [pc, #172]	@ (8006cd8 <TIM_OC1_SetConfig+0xd8>)
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f023 0303 	bic.w	r3, r3, #3
 8006c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f023 0302 	bic.w	r3, r3, #2
 8006c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a21      	ldr	r2, [pc, #132]	@ (8006cdc <TIM_OC1_SetConfig+0xdc>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d003      	beq.n	8006c64 <TIM_OC1_SetConfig+0x64>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a20      	ldr	r2, [pc, #128]	@ (8006ce0 <TIM_OC1_SetConfig+0xe0>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d10c      	bne.n	8006c7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f023 0308 	bic.w	r3, r3, #8
 8006c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	f023 0304 	bic.w	r3, r3, #4
 8006c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a16      	ldr	r2, [pc, #88]	@ (8006cdc <TIM_OC1_SetConfig+0xdc>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d003      	beq.n	8006c8e <TIM_OC1_SetConfig+0x8e>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a15      	ldr	r2, [pc, #84]	@ (8006ce0 <TIM_OC1_SetConfig+0xe0>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d111      	bne.n	8006cb2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	621a      	str	r2, [r3, #32]
}
 8006ccc:	bf00      	nop
 8006cce:	371c      	adds	r7, #28
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	fffeff8f 	.word	0xfffeff8f
 8006cdc:	40010000 	.word	0x40010000
 8006ce0:	40010400 	.word	0x40010400

08006ce4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	f023 0210 	bic.w	r2, r3, #16
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	4b2e      	ldr	r3, [pc, #184]	@ (8006dc8 <TIM_OC2_SetConfig+0xe4>)
 8006d10:	4013      	ands	r3, r2
 8006d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	021b      	lsls	r3, r3, #8
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f023 0320 	bic.w	r3, r3, #32
 8006d2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	011b      	lsls	r3, r3, #4
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a23      	ldr	r2, [pc, #140]	@ (8006dcc <TIM_OC2_SetConfig+0xe8>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d003      	beq.n	8006d4c <TIM_OC2_SetConfig+0x68>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a22      	ldr	r2, [pc, #136]	@ (8006dd0 <TIM_OC2_SetConfig+0xec>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d10d      	bne.n	8006d68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	011b      	lsls	r3, r3, #4
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a18      	ldr	r2, [pc, #96]	@ (8006dcc <TIM_OC2_SetConfig+0xe8>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d003      	beq.n	8006d78 <TIM_OC2_SetConfig+0x94>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a17      	ldr	r2, [pc, #92]	@ (8006dd0 <TIM_OC2_SetConfig+0xec>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d113      	bne.n	8006da0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	621a      	str	r2, [r3, #32]
}
 8006dba:	bf00      	nop
 8006dbc:	371c      	adds	r7, #28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	feff8fff 	.word	0xfeff8fff
 8006dcc:	40010000 	.word	0x40010000
 8006dd0:	40010400 	.word	0x40010400

08006dd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8006eb4 <TIM_OC3_SetConfig+0xe0>)
 8006e00:	4013      	ands	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 0303 	bic.w	r3, r3, #3
 8006e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	021b      	lsls	r3, r3, #8
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a22      	ldr	r2, [pc, #136]	@ (8006eb8 <TIM_OC3_SetConfig+0xe4>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d003      	beq.n	8006e3a <TIM_OC3_SetConfig+0x66>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a21      	ldr	r2, [pc, #132]	@ (8006ebc <TIM_OC3_SetConfig+0xe8>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d10d      	bne.n	8006e56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	021b      	lsls	r3, r3, #8
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a17      	ldr	r2, [pc, #92]	@ (8006eb8 <TIM_OC3_SetConfig+0xe4>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d003      	beq.n	8006e66 <TIM_OC3_SetConfig+0x92>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a16      	ldr	r2, [pc, #88]	@ (8006ebc <TIM_OC3_SetConfig+0xe8>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d113      	bne.n	8006e8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	011b      	lsls	r3, r3, #4
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	011b      	lsls	r3, r3, #4
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	685a      	ldr	r2, [r3, #4]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	621a      	str	r2, [r3, #32]
}
 8006ea8:	bf00      	nop
 8006eaa:	371c      	adds	r7, #28
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr
 8006eb4:	fffeff8f 	.word	0xfffeff8f
 8006eb8:	40010000 	.word	0x40010000
 8006ebc:	40010400 	.word	0x40010400

08006ec0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	4b1e      	ldr	r3, [pc, #120]	@ (8006f64 <TIM_OC4_SetConfig+0xa4>)
 8006eec:	4013      	ands	r3, r2
 8006eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	021b      	lsls	r3, r3, #8
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	031b      	lsls	r3, r3, #12
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a13      	ldr	r2, [pc, #76]	@ (8006f68 <TIM_OC4_SetConfig+0xa8>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d003      	beq.n	8006f28 <TIM_OC4_SetConfig+0x68>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a12      	ldr	r2, [pc, #72]	@ (8006f6c <TIM_OC4_SetConfig+0xac>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d109      	bne.n	8006f3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	695b      	ldr	r3, [r3, #20]
 8006f34:	019b      	lsls	r3, r3, #6
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	621a      	str	r2, [r3, #32]
}
 8006f56:	bf00      	nop
 8006f58:	371c      	adds	r7, #28
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	feff8fff 	.word	0xfeff8fff
 8006f68:	40010000 	.word	0x40010000
 8006f6c:	40010400 	.word	0x40010400

08006f70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b087      	sub	sp, #28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a1b      	ldr	r3, [r3, #32]
 8006f7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8007008 <TIM_OC5_SetConfig+0x98>)
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006fb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	041b      	lsls	r3, r3, #16
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a12      	ldr	r2, [pc, #72]	@ (800700c <TIM_OC5_SetConfig+0x9c>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d003      	beq.n	8006fce <TIM_OC5_SetConfig+0x5e>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a11      	ldr	r2, [pc, #68]	@ (8007010 <TIM_OC5_SetConfig+0xa0>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d109      	bne.n	8006fe2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	021b      	lsls	r3, r3, #8
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685a      	ldr	r2, [r3, #4]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	621a      	str	r2, [r3, #32]
}
 8006ffc:	bf00      	nop
 8006ffe:	371c      	adds	r7, #28
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr
 8007008:	fffeff8f 	.word	0xfffeff8f
 800700c:	40010000 	.word	0x40010000
 8007010:	40010400 	.word	0x40010400

08007014 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007014:	b480      	push	{r7}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800703a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4b1c      	ldr	r3, [pc, #112]	@ (80070b0 <TIM_OC6_SetConfig+0x9c>)
 8007040:	4013      	ands	r3, r2
 8007042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	021b      	lsls	r3, r3, #8
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	4313      	orrs	r3, r2
 800704e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	051b      	lsls	r3, r3, #20
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	4313      	orrs	r3, r2
 8007062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a13      	ldr	r2, [pc, #76]	@ (80070b4 <TIM_OC6_SetConfig+0xa0>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d003      	beq.n	8007074 <TIM_OC6_SetConfig+0x60>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a12      	ldr	r2, [pc, #72]	@ (80070b8 <TIM_OC6_SetConfig+0xa4>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d109      	bne.n	8007088 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800707a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	695b      	ldr	r3, [r3, #20]
 8007080:	029b      	lsls	r3, r3, #10
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	4313      	orrs	r3, r2
 8007086:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	621a      	str	r2, [r3, #32]
}
 80070a2:	bf00      	nop
 80070a4:	371c      	adds	r7, #28
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	feff8fff 	.word	0xfeff8fff
 80070b4:	40010000 	.word	0x40010000
 80070b8:	40010400 	.word	0x40010400

080070bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6a1b      	ldr	r3, [r3, #32]
 80070cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	f023 0201 	bic.w	r2, r3, #1
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	011b      	lsls	r3, r3, #4
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f023 030a 	bic.w	r3, r3, #10
 80070f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	4313      	orrs	r3, r2
 8007100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	621a      	str	r2, [r3, #32]
}
 800710e:	bf00      	nop
 8007110:	371c      	adds	r7, #28
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr

0800711a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800711a:	b480      	push	{r7}
 800711c:	b087      	sub	sp, #28
 800711e:	af00      	add	r7, sp, #0
 8007120:	60f8      	str	r0, [r7, #12]
 8007122:	60b9      	str	r1, [r7, #8]
 8007124:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	f023 0210 	bic.w	r2, r3, #16
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007144:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	031b      	lsls	r3, r3, #12
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	4313      	orrs	r3, r2
 800714e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007156:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	011b      	lsls	r3, r3, #4
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	4313      	orrs	r3, r2
 8007160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	621a      	str	r2, [r3, #32]
}
 800716e:	bf00      	nop
 8007170:	371c      	adds	r7, #28
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800717a:	b480      	push	{r7}
 800717c:	b085      	sub	sp, #20
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007190:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	4313      	orrs	r3, r2
 8007198:	f043 0307 	orr.w	r3, r3, #7
 800719c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	609a      	str	r2, [r3, #8]
}
 80071a4:	bf00      	nop
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b087      	sub	sp, #28
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
 80071bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	021a      	lsls	r2, r3, #8
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	431a      	orrs	r2, r3
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	4313      	orrs	r3, r2
 80071dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	609a      	str	r2, [r3, #8]
}
 80071e4:	bf00      	nop
 80071e6:	371c      	adds	r7, #28
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	f003 031f 	and.w	r3, r3, #31
 8007202:	2201      	movs	r2, #1
 8007204:	fa02 f303 	lsl.w	r3, r2, r3
 8007208:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6a1a      	ldr	r2, [r3, #32]
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	43db      	mvns	r3, r3
 8007212:	401a      	ands	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6a1a      	ldr	r2, [r3, #32]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	f003 031f 	and.w	r3, r3, #31
 8007222:	6879      	ldr	r1, [r7, #4]
 8007224:	fa01 f303 	lsl.w	r3, r1, r3
 8007228:	431a      	orrs	r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	621a      	str	r2, [r3, #32]
}
 800722e:	bf00      	nop
 8007230:	371c      	adds	r7, #28
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr
	...

0800723c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800724c:	2b01      	cmp	r3, #1
 800724e:	d101      	bne.n	8007254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007250:	2302      	movs	r3, #2
 8007252:	e06d      	b.n	8007330 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2202      	movs	r2, #2
 8007260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a30      	ldr	r2, [pc, #192]	@ (800733c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d004      	beq.n	8007288 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a2f      	ldr	r2, [pc, #188]	@ (8007340 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d108      	bne.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800728e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a20      	ldr	r2, [pc, #128]	@ (800733c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d022      	beq.n	8007304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072c6:	d01d      	beq.n	8007304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a1d      	ldr	r2, [pc, #116]	@ (8007344 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d018      	beq.n	8007304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a1c      	ldr	r2, [pc, #112]	@ (8007348 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d013      	beq.n	8007304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a1a      	ldr	r2, [pc, #104]	@ (800734c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d00e      	beq.n	8007304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a15      	ldr	r2, [pc, #84]	@ (8007340 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d009      	beq.n	8007304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a16      	ldr	r2, [pc, #88]	@ (8007350 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d004      	beq.n	8007304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a15      	ldr	r2, [pc, #84]	@ (8007354 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d10c      	bne.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800730a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	4313      	orrs	r3, r2
 8007314:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68ba      	ldr	r2, [r7, #8]
 800731c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	40010000 	.word	0x40010000
 8007340:	40010400 	.word	0x40010400
 8007344:	40000400 	.word	0x40000400
 8007348:	40000800 	.word	0x40000800
 800734c:	40000c00 	.word	0x40000c00
 8007350:	40014000 	.word	0x40014000
 8007354:	40001800 	.word	0x40001800

08007358 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800736c:	2b01      	cmp	r3, #1
 800736e:	d101      	bne.n	8007374 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007370:	2302      	movs	r3, #2
 8007372:	e065      	b.n	8007440 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	4313      	orrs	r3, r2
 8007388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	4313      	orrs	r3, r2
 8007396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	4313      	orrs	r3, r2
 80073c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073da:	4313      	orrs	r3, r2
 80073dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	041b      	lsls	r3, r3, #16
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a16      	ldr	r2, [pc, #88]	@ (800744c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d004      	beq.n	8007402 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a14      	ldr	r2, [pc, #80]	@ (8007450 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d115      	bne.n	800742e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740c:	051b      	lsls	r3, r3, #20
 800740e:	4313      	orrs	r3, r2
 8007410:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	69db      	ldr	r3, [r3, #28]
 800741c:	4313      	orrs	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3714      	adds	r7, #20
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	40010000 	.word	0x40010000
 8007450:	40010400 	.word	0x40010400

08007454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e040      	b.n	80074e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800746a:	2b00      	cmp	r3, #0
 800746c:	d106      	bne.n	800747c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7fc fa5a 	bl	8003930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2224      	movs	r2, #36	@ 0x24
 8007480:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0201 	bic.w	r2, r2, #1
 8007490:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fe20 	bl	80080e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fbb9 	bl	8007c18 <UART_SetConfig>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d101      	bne.n	80074b0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e01b      	b.n	80074e8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80074be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689a      	ldr	r2, [r3, #8]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80074ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f042 0201 	orr.w	r2, r2, #1
 80074de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fe9f 	bl	8008224 <UART_CheckIdleState>
 80074e6:	4603      	mov	r3, r0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08a      	sub	sp, #40	@ 0x28
 80074f4:	af02      	add	r7, sp, #8
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	603b      	str	r3, [r7, #0]
 80074fc:	4613      	mov	r3, r2
 80074fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007504:	2b20      	cmp	r3, #32
 8007506:	d177      	bne.n	80075f8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d002      	beq.n	8007514 <HAL_UART_Transmit+0x24>
 800750e:	88fb      	ldrh	r3, [r7, #6]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e070      	b.n	80075fa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2221      	movs	r2, #33	@ 0x21
 8007524:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007526:	f7fc fd21 	bl	8003f6c <HAL_GetTick>
 800752a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	88fa      	ldrh	r2, [r7, #6]
 8007530:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	88fa      	ldrh	r2, [r7, #6]
 8007538:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007544:	d108      	bne.n	8007558 <HAL_UART_Transmit+0x68>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d104      	bne.n	8007558 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800754e:	2300      	movs	r3, #0
 8007550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	61bb      	str	r3, [r7, #24]
 8007556:	e003      	b.n	8007560 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800755c:	2300      	movs	r3, #0
 800755e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007560:	e02f      	b.n	80075c2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2200      	movs	r2, #0
 800756a:	2180      	movs	r1, #128	@ 0x80
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f000 feb0 	bl	80082d2 <UART_WaitOnFlagUntilTimeout>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d004      	beq.n	8007582 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2220      	movs	r2, #32
 800757c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e03b      	b.n	80075fa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10b      	bne.n	80075a0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	461a      	mov	r2, r3
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007596:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	3302      	adds	r3, #2
 800759c:	61bb      	str	r3, [r7, #24]
 800759e:	e007      	b.n	80075b0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	781a      	ldrb	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	3301      	adds	r3, #1
 80075ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	3b01      	subs	r3, #1
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1c9      	bne.n	8007562 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2200      	movs	r2, #0
 80075d6:	2140      	movs	r1, #64	@ 0x40
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f000 fe7a 	bl	80082d2 <UART_WaitOnFlagUntilTimeout>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d004      	beq.n	80075ee <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2220      	movs	r2, #32
 80075e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e005      	b.n	80075fa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2220      	movs	r2, #32
 80075f2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	e000      	b.n	80075fa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80075f8:	2302      	movs	r3, #2
  }
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3720      	adds	r7, #32
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
	...

08007604 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b0ba      	sub	sp, #232	@ 0xe8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800762a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800762e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007632:	4013      	ands	r3, r2
 8007634:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007638:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800763c:	2b00      	cmp	r3, #0
 800763e:	d115      	bne.n	800766c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007644:	f003 0320 	and.w	r3, r3, #32
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00f      	beq.n	800766c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800764c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007650:	f003 0320 	and.w	r3, r3, #32
 8007654:	2b00      	cmp	r3, #0
 8007656:	d009      	beq.n	800766c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 82b1 	beq.w	8007bc4 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	4798      	blx	r3
      }
      return;
 800766a:	e2ab      	b.n	8007bc4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800766c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 8117 	beq.w	80078a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	d106      	bne.n	8007690 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007682:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007686:	4b85      	ldr	r3, [pc, #532]	@ (800789c <HAL_UART_IRQHandler+0x298>)
 8007688:	4013      	ands	r3, r2
 800768a:	2b00      	cmp	r3, #0
 800768c:	f000 810a 	beq.w	80078a4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d011      	beq.n	80076c0 <HAL_UART_IRQHandler+0xbc>
 800769c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00b      	beq.n	80076c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2201      	movs	r2, #1
 80076ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076b6:	f043 0201 	orr.w	r2, r3, #1
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076c4:	f003 0302 	and.w	r3, r3, #2
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d011      	beq.n	80076f0 <HAL_UART_IRQHandler+0xec>
 80076cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076d0:	f003 0301 	and.w	r3, r3, #1
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00b      	beq.n	80076f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2202      	movs	r2, #2
 80076de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076e6:	f043 0204 	orr.w	r2, r3, #4
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076f4:	f003 0304 	and.w	r3, r3, #4
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d011      	beq.n	8007720 <HAL_UART_IRQHandler+0x11c>
 80076fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00b      	beq.n	8007720 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2204      	movs	r2, #4
 800770e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007716:	f043 0202 	orr.w	r2, r3, #2
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007724:	f003 0308 	and.w	r3, r3, #8
 8007728:	2b00      	cmp	r3, #0
 800772a:	d017      	beq.n	800775c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800772c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007730:	f003 0320 	and.w	r3, r3, #32
 8007734:	2b00      	cmp	r3, #0
 8007736:	d105      	bne.n	8007744 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800773c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00b      	beq.n	800775c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2208      	movs	r2, #8
 800774a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007752:	f043 0208 	orr.w	r2, r3, #8
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800775c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007764:	2b00      	cmp	r3, #0
 8007766:	d012      	beq.n	800778e <HAL_UART_IRQHandler+0x18a>
 8007768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800776c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00c      	beq.n	800778e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800777c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007784:	f043 0220 	orr.w	r2, r3, #32
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 8217 	beq.w	8007bc8 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800779a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800779e:	f003 0320 	and.w	r3, r3, #32
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00d      	beq.n	80077c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80077a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077aa:	f003 0320 	and.w	r3, r3, #32
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d007      	beq.n	80077c2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077d6:	2b40      	cmp	r3, #64	@ 0x40
 80077d8:	d005      	beq.n	80077e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80077da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d04f      	beq.n	8007886 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fea6 	bl	8008538 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077f6:	2b40      	cmp	r3, #64	@ 0x40
 80077f8:	d141      	bne.n	800787e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	3308      	adds	r3, #8
 8007800:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007808:	e853 3f00 	ldrex	r3, [r3]
 800780c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007810:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007814:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007818:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3308      	adds	r3, #8
 8007822:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007826:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800782a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007832:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007836:	e841 2300 	strex	r3, r2, [r1]
 800783a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800783e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1d9      	bne.n	80077fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800784a:	2b00      	cmp	r3, #0
 800784c:	d013      	beq.n	8007876 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007852:	4a13      	ldr	r2, [pc, #76]	@ (80078a0 <HAL_UART_IRQHandler+0x29c>)
 8007854:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800785a:	4618      	mov	r0, r3
 800785c:	f7fc fd37 	bl	80042ce <HAL_DMA_Abort_IT>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d017      	beq.n	8007896 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800786a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007870:	4610      	mov	r0, r2
 8007872:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007874:	e00f      	b.n	8007896 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f9c4 	bl	8007c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800787c:	e00b      	b.n	8007896 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f9c0 	bl	8007c04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007884:	e007      	b.n	8007896 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f9bc 	bl	8007c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007894:	e198      	b.n	8007bc8 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007896:	bf00      	nop
    return;
 8007898:	e196      	b.n	8007bc8 <HAL_UART_IRQHandler+0x5c4>
 800789a:	bf00      	nop
 800789c:	04000120 	.word	0x04000120
 80078a0:	08008601 	.word	0x08008601

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	f040 8166 	bne.w	8007b7a <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80078ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078b2:	f003 0310 	and.w	r3, r3, #16
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f000 815f 	beq.w	8007b7a <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80078bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078c0:	f003 0310 	and.w	r3, r3, #16
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 8158 	beq.w	8007b7a <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2210      	movs	r2, #16
 80078d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078dc:	2b40      	cmp	r3, #64	@ 0x40
 80078de:	f040 80d0 	bne.w	8007a82 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80078ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 80ab 	beq.w	8007a4e <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80078fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007902:	429a      	cmp	r2, r3
 8007904:	f080 80a3 	bcs.w	8007a4e <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800790e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007916:	69db      	ldr	r3, [r3, #28]
 8007918:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800791c:	f000 8086 	beq.w	8007a2c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007928:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800792c:	e853 3f00 	ldrex	r3, [r3]
 8007930:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007934:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800793c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	461a      	mov	r2, r3
 8007946:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800794a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800794e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007952:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007956:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800795a:	e841 2300 	strex	r3, r2, [r1]
 800795e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007962:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1da      	bne.n	8007920 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3308      	adds	r3, #8
 8007970:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007972:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007974:	e853 3f00 	ldrex	r3, [r3]
 8007978:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800797a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800797c:	f023 0301 	bic.w	r3, r3, #1
 8007980:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3308      	adds	r3, #8
 800798a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800798e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007992:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007994:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007996:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800799a:	e841 2300 	strex	r3, r2, [r1]
 800799e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80079a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1e1      	bne.n	800796a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3308      	adds	r3, #8
 80079ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079b0:	e853 3f00 	ldrex	r3, [r3]
 80079b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80079b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3308      	adds	r3, #8
 80079c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80079ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80079cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80079d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80079d2:	e841 2300 	strex	r3, r2, [r1]
 80079d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80079d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e3      	bne.n	80079a6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2220      	movs	r2, #32
 80079e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80079fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079fc:	f023 0310 	bic.w	r3, r3, #16
 8007a00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a10:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a16:	e841 2300 	strex	r3, r2, [r1]
 8007a1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1e4      	bne.n	80079ec <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fc fbe1 	bl	80041ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	4619      	mov	r1, r3
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7fa fadc 	bl	8002004 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007a4c:	e0be      	b.n	8007bcc <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	f040 80b7 	bne.w	8007bcc <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a68:	f040 80b0 	bne.w	8007bcc <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2202      	movs	r2, #2
 8007a70:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7fa fac2 	bl	8002004 <HAL_UARTEx_RxEventCallback>
      return;
 8007a80:	e0a4      	b.n	8007bcc <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 8096 	beq.w	8007bd0 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 8007aa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f000 8091 	beq.w	8007bd0 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab6:	e853 3f00 	ldrex	r3, [r3]
 8007aba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007abe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ac2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	461a      	mov	r2, r3
 8007acc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ad0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ad2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ad6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ad8:	e841 2300 	strex	r3, r2, [r1]
 8007adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1e4      	bne.n	8007aae <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3308      	adds	r3, #8
 8007aea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aee:	e853 3f00 	ldrex	r3, [r3]
 8007af2:	623b      	str	r3, [r7, #32]
   return(result);
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	f023 0301 	bic.w	r3, r3, #1
 8007afa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3308      	adds	r3, #8
 8007b04:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007b08:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b10:	e841 2300 	strex	r3, r2, [r1]
 8007b14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1e3      	bne.n	8007ae4 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2220      	movs	r2, #32
 8007b20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	e853 3f00 	ldrex	r3, [r3]
 8007b3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f023 0310 	bic.w	r3, r3, #16
 8007b44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007b52:	61fb      	str	r3, [r7, #28]
 8007b54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b56:	69b9      	ldr	r1, [r7, #24]
 8007b58:	69fa      	ldr	r2, [r7, #28]
 8007b5a:	e841 2300 	strex	r3, r2, [r1]
 8007b5e:	617b      	str	r3, [r7, #20]
   return(result);
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1e4      	bne.n	8007b30 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2202      	movs	r2, #2
 8007b6a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b70:	4619      	mov	r1, r3
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7fa fa46 	bl	8002004 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b78:	e02a      	b.n	8007bd0 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00e      	beq.n	8007ba4 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d008      	beq.n	8007ba4 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d01c      	beq.n	8007bd4 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	4798      	blx	r3
    }
    return;
 8007ba2:	e017      	b.n	8007bd4 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d012      	beq.n	8007bd6 <HAL_UART_IRQHandler+0x5d2>
 8007bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00c      	beq.n	8007bd6 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fd31 	bl	8008624 <UART_EndTransmit_IT>
    return;
 8007bc2:	e008      	b.n	8007bd6 <HAL_UART_IRQHandler+0x5d2>
      return;
 8007bc4:	bf00      	nop
 8007bc6:	e006      	b.n	8007bd6 <HAL_UART_IRQHandler+0x5d2>
    return;
 8007bc8:	bf00      	nop
 8007bca:	e004      	b.n	8007bd6 <HAL_UART_IRQHandler+0x5d2>
      return;
 8007bcc:	bf00      	nop
 8007bce:	e002      	b.n	8007bd6 <HAL_UART_IRQHandler+0x5d2>
      return;
 8007bd0:	bf00      	nop
 8007bd2:	e000      	b.n	8007bd6 <HAL_UART_IRQHandler+0x5d2>
    return;
 8007bd4:	bf00      	nop
  }

}
 8007bd6:	37e8      	adds	r7, #232	@ 0xe8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c0c:	bf00      	nop
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b088      	sub	sp, #32
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c20:	2300      	movs	r3, #0
 8007c22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	689a      	ldr	r2, [r3, #8]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	431a      	orrs	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	431a      	orrs	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	69db      	ldr	r3, [r3, #28]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	4ba6      	ldr	r3, [pc, #664]	@ (8007edc <UART_SetConfig+0x2c4>)
 8007c44:	4013      	ands	r3, r2
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	6812      	ldr	r2, [r2, #0]
 8007c4a:	6979      	ldr	r1, [r7, #20]
 8007c4c:	430b      	orrs	r3, r1
 8007c4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68da      	ldr	r2, [r3, #12]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	430a      	orrs	r2, r1
 8007c64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a1b      	ldr	r3, [r3, #32]
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a94      	ldr	r2, [pc, #592]	@ (8007ee0 <UART_SetConfig+0x2c8>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d120      	bne.n	8007cd6 <UART_SetConfig+0xbe>
 8007c94:	4b93      	ldr	r3, [pc, #588]	@ (8007ee4 <UART_SetConfig+0x2cc>)
 8007c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c9a:	f003 0303 	and.w	r3, r3, #3
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	d816      	bhi.n	8007cd0 <UART_SetConfig+0xb8>
 8007ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca8 <UART_SetConfig+0x90>)
 8007ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca8:	08007cb9 	.word	0x08007cb9
 8007cac:	08007cc5 	.word	0x08007cc5
 8007cb0:	08007cbf 	.word	0x08007cbf
 8007cb4:	08007ccb 	.word	0x08007ccb
 8007cb8:	2301      	movs	r3, #1
 8007cba:	77fb      	strb	r3, [r7, #31]
 8007cbc:	e150      	b.n	8007f60 <UART_SetConfig+0x348>
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	77fb      	strb	r3, [r7, #31]
 8007cc2:	e14d      	b.n	8007f60 <UART_SetConfig+0x348>
 8007cc4:	2304      	movs	r3, #4
 8007cc6:	77fb      	strb	r3, [r7, #31]
 8007cc8:	e14a      	b.n	8007f60 <UART_SetConfig+0x348>
 8007cca:	2308      	movs	r3, #8
 8007ccc:	77fb      	strb	r3, [r7, #31]
 8007cce:	e147      	b.n	8007f60 <UART_SetConfig+0x348>
 8007cd0:	2310      	movs	r3, #16
 8007cd2:	77fb      	strb	r3, [r7, #31]
 8007cd4:	e144      	b.n	8007f60 <UART_SetConfig+0x348>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a83      	ldr	r2, [pc, #524]	@ (8007ee8 <UART_SetConfig+0x2d0>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d132      	bne.n	8007d46 <UART_SetConfig+0x12e>
 8007ce0:	4b80      	ldr	r3, [pc, #512]	@ (8007ee4 <UART_SetConfig+0x2cc>)
 8007ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ce6:	f003 030c 	and.w	r3, r3, #12
 8007cea:	2b0c      	cmp	r3, #12
 8007cec:	d828      	bhi.n	8007d40 <UART_SetConfig+0x128>
 8007cee:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf4 <UART_SetConfig+0xdc>)
 8007cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf4:	08007d29 	.word	0x08007d29
 8007cf8:	08007d41 	.word	0x08007d41
 8007cfc:	08007d41 	.word	0x08007d41
 8007d00:	08007d41 	.word	0x08007d41
 8007d04:	08007d35 	.word	0x08007d35
 8007d08:	08007d41 	.word	0x08007d41
 8007d0c:	08007d41 	.word	0x08007d41
 8007d10:	08007d41 	.word	0x08007d41
 8007d14:	08007d2f 	.word	0x08007d2f
 8007d18:	08007d41 	.word	0x08007d41
 8007d1c:	08007d41 	.word	0x08007d41
 8007d20:	08007d41 	.word	0x08007d41
 8007d24:	08007d3b 	.word	0x08007d3b
 8007d28:	2300      	movs	r3, #0
 8007d2a:	77fb      	strb	r3, [r7, #31]
 8007d2c:	e118      	b.n	8007f60 <UART_SetConfig+0x348>
 8007d2e:	2302      	movs	r3, #2
 8007d30:	77fb      	strb	r3, [r7, #31]
 8007d32:	e115      	b.n	8007f60 <UART_SetConfig+0x348>
 8007d34:	2304      	movs	r3, #4
 8007d36:	77fb      	strb	r3, [r7, #31]
 8007d38:	e112      	b.n	8007f60 <UART_SetConfig+0x348>
 8007d3a:	2308      	movs	r3, #8
 8007d3c:	77fb      	strb	r3, [r7, #31]
 8007d3e:	e10f      	b.n	8007f60 <UART_SetConfig+0x348>
 8007d40:	2310      	movs	r3, #16
 8007d42:	77fb      	strb	r3, [r7, #31]
 8007d44:	e10c      	b.n	8007f60 <UART_SetConfig+0x348>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a68      	ldr	r2, [pc, #416]	@ (8007eec <UART_SetConfig+0x2d4>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d120      	bne.n	8007d92 <UART_SetConfig+0x17a>
 8007d50:	4b64      	ldr	r3, [pc, #400]	@ (8007ee4 <UART_SetConfig+0x2cc>)
 8007d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d56:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007d5a:	2b30      	cmp	r3, #48	@ 0x30
 8007d5c:	d013      	beq.n	8007d86 <UART_SetConfig+0x16e>
 8007d5e:	2b30      	cmp	r3, #48	@ 0x30
 8007d60:	d814      	bhi.n	8007d8c <UART_SetConfig+0x174>
 8007d62:	2b20      	cmp	r3, #32
 8007d64:	d009      	beq.n	8007d7a <UART_SetConfig+0x162>
 8007d66:	2b20      	cmp	r3, #32
 8007d68:	d810      	bhi.n	8007d8c <UART_SetConfig+0x174>
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d002      	beq.n	8007d74 <UART_SetConfig+0x15c>
 8007d6e:	2b10      	cmp	r3, #16
 8007d70:	d006      	beq.n	8007d80 <UART_SetConfig+0x168>
 8007d72:	e00b      	b.n	8007d8c <UART_SetConfig+0x174>
 8007d74:	2300      	movs	r3, #0
 8007d76:	77fb      	strb	r3, [r7, #31]
 8007d78:	e0f2      	b.n	8007f60 <UART_SetConfig+0x348>
 8007d7a:	2302      	movs	r3, #2
 8007d7c:	77fb      	strb	r3, [r7, #31]
 8007d7e:	e0ef      	b.n	8007f60 <UART_SetConfig+0x348>
 8007d80:	2304      	movs	r3, #4
 8007d82:	77fb      	strb	r3, [r7, #31]
 8007d84:	e0ec      	b.n	8007f60 <UART_SetConfig+0x348>
 8007d86:	2308      	movs	r3, #8
 8007d88:	77fb      	strb	r3, [r7, #31]
 8007d8a:	e0e9      	b.n	8007f60 <UART_SetConfig+0x348>
 8007d8c:	2310      	movs	r3, #16
 8007d8e:	77fb      	strb	r3, [r7, #31]
 8007d90:	e0e6      	b.n	8007f60 <UART_SetConfig+0x348>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a56      	ldr	r2, [pc, #344]	@ (8007ef0 <UART_SetConfig+0x2d8>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d120      	bne.n	8007dde <UART_SetConfig+0x1c6>
 8007d9c:	4b51      	ldr	r3, [pc, #324]	@ (8007ee4 <UART_SetConfig+0x2cc>)
 8007d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007da2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007da6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007da8:	d013      	beq.n	8007dd2 <UART_SetConfig+0x1ba>
 8007daa:	2bc0      	cmp	r3, #192	@ 0xc0
 8007dac:	d814      	bhi.n	8007dd8 <UART_SetConfig+0x1c0>
 8007dae:	2b80      	cmp	r3, #128	@ 0x80
 8007db0:	d009      	beq.n	8007dc6 <UART_SetConfig+0x1ae>
 8007db2:	2b80      	cmp	r3, #128	@ 0x80
 8007db4:	d810      	bhi.n	8007dd8 <UART_SetConfig+0x1c0>
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <UART_SetConfig+0x1a8>
 8007dba:	2b40      	cmp	r3, #64	@ 0x40
 8007dbc:	d006      	beq.n	8007dcc <UART_SetConfig+0x1b4>
 8007dbe:	e00b      	b.n	8007dd8 <UART_SetConfig+0x1c0>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	77fb      	strb	r3, [r7, #31]
 8007dc4:	e0cc      	b.n	8007f60 <UART_SetConfig+0x348>
 8007dc6:	2302      	movs	r3, #2
 8007dc8:	77fb      	strb	r3, [r7, #31]
 8007dca:	e0c9      	b.n	8007f60 <UART_SetConfig+0x348>
 8007dcc:	2304      	movs	r3, #4
 8007dce:	77fb      	strb	r3, [r7, #31]
 8007dd0:	e0c6      	b.n	8007f60 <UART_SetConfig+0x348>
 8007dd2:	2308      	movs	r3, #8
 8007dd4:	77fb      	strb	r3, [r7, #31]
 8007dd6:	e0c3      	b.n	8007f60 <UART_SetConfig+0x348>
 8007dd8:	2310      	movs	r3, #16
 8007dda:	77fb      	strb	r3, [r7, #31]
 8007ddc:	e0c0      	b.n	8007f60 <UART_SetConfig+0x348>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a44      	ldr	r2, [pc, #272]	@ (8007ef4 <UART_SetConfig+0x2dc>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d125      	bne.n	8007e34 <UART_SetConfig+0x21c>
 8007de8:	4b3e      	ldr	r3, [pc, #248]	@ (8007ee4 <UART_SetConfig+0x2cc>)
 8007dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007df2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007df6:	d017      	beq.n	8007e28 <UART_SetConfig+0x210>
 8007df8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dfc:	d817      	bhi.n	8007e2e <UART_SetConfig+0x216>
 8007dfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e02:	d00b      	beq.n	8007e1c <UART_SetConfig+0x204>
 8007e04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e08:	d811      	bhi.n	8007e2e <UART_SetConfig+0x216>
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d003      	beq.n	8007e16 <UART_SetConfig+0x1fe>
 8007e0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e12:	d006      	beq.n	8007e22 <UART_SetConfig+0x20a>
 8007e14:	e00b      	b.n	8007e2e <UART_SetConfig+0x216>
 8007e16:	2300      	movs	r3, #0
 8007e18:	77fb      	strb	r3, [r7, #31]
 8007e1a:	e0a1      	b.n	8007f60 <UART_SetConfig+0x348>
 8007e1c:	2302      	movs	r3, #2
 8007e1e:	77fb      	strb	r3, [r7, #31]
 8007e20:	e09e      	b.n	8007f60 <UART_SetConfig+0x348>
 8007e22:	2304      	movs	r3, #4
 8007e24:	77fb      	strb	r3, [r7, #31]
 8007e26:	e09b      	b.n	8007f60 <UART_SetConfig+0x348>
 8007e28:	2308      	movs	r3, #8
 8007e2a:	77fb      	strb	r3, [r7, #31]
 8007e2c:	e098      	b.n	8007f60 <UART_SetConfig+0x348>
 8007e2e:	2310      	movs	r3, #16
 8007e30:	77fb      	strb	r3, [r7, #31]
 8007e32:	e095      	b.n	8007f60 <UART_SetConfig+0x348>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a2f      	ldr	r2, [pc, #188]	@ (8007ef8 <UART_SetConfig+0x2e0>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d125      	bne.n	8007e8a <UART_SetConfig+0x272>
 8007e3e:	4b29      	ldr	r3, [pc, #164]	@ (8007ee4 <UART_SetConfig+0x2cc>)
 8007e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e44:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007e48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e4c:	d017      	beq.n	8007e7e <UART_SetConfig+0x266>
 8007e4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e52:	d817      	bhi.n	8007e84 <UART_SetConfig+0x26c>
 8007e54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e58:	d00b      	beq.n	8007e72 <UART_SetConfig+0x25a>
 8007e5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e5e:	d811      	bhi.n	8007e84 <UART_SetConfig+0x26c>
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d003      	beq.n	8007e6c <UART_SetConfig+0x254>
 8007e64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e68:	d006      	beq.n	8007e78 <UART_SetConfig+0x260>
 8007e6a:	e00b      	b.n	8007e84 <UART_SetConfig+0x26c>
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	77fb      	strb	r3, [r7, #31]
 8007e70:	e076      	b.n	8007f60 <UART_SetConfig+0x348>
 8007e72:	2302      	movs	r3, #2
 8007e74:	77fb      	strb	r3, [r7, #31]
 8007e76:	e073      	b.n	8007f60 <UART_SetConfig+0x348>
 8007e78:	2304      	movs	r3, #4
 8007e7a:	77fb      	strb	r3, [r7, #31]
 8007e7c:	e070      	b.n	8007f60 <UART_SetConfig+0x348>
 8007e7e:	2308      	movs	r3, #8
 8007e80:	77fb      	strb	r3, [r7, #31]
 8007e82:	e06d      	b.n	8007f60 <UART_SetConfig+0x348>
 8007e84:	2310      	movs	r3, #16
 8007e86:	77fb      	strb	r3, [r7, #31]
 8007e88:	e06a      	b.n	8007f60 <UART_SetConfig+0x348>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a1b      	ldr	r2, [pc, #108]	@ (8007efc <UART_SetConfig+0x2e4>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d138      	bne.n	8007f06 <UART_SetConfig+0x2ee>
 8007e94:	4b13      	ldr	r3, [pc, #76]	@ (8007ee4 <UART_SetConfig+0x2cc>)
 8007e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e9a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007e9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ea2:	d017      	beq.n	8007ed4 <UART_SetConfig+0x2bc>
 8007ea4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ea8:	d82a      	bhi.n	8007f00 <UART_SetConfig+0x2e8>
 8007eaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eae:	d00b      	beq.n	8007ec8 <UART_SetConfig+0x2b0>
 8007eb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eb4:	d824      	bhi.n	8007f00 <UART_SetConfig+0x2e8>
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d003      	beq.n	8007ec2 <UART_SetConfig+0x2aa>
 8007eba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ebe:	d006      	beq.n	8007ece <UART_SetConfig+0x2b6>
 8007ec0:	e01e      	b.n	8007f00 <UART_SetConfig+0x2e8>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	77fb      	strb	r3, [r7, #31]
 8007ec6:	e04b      	b.n	8007f60 <UART_SetConfig+0x348>
 8007ec8:	2302      	movs	r3, #2
 8007eca:	77fb      	strb	r3, [r7, #31]
 8007ecc:	e048      	b.n	8007f60 <UART_SetConfig+0x348>
 8007ece:	2304      	movs	r3, #4
 8007ed0:	77fb      	strb	r3, [r7, #31]
 8007ed2:	e045      	b.n	8007f60 <UART_SetConfig+0x348>
 8007ed4:	2308      	movs	r3, #8
 8007ed6:	77fb      	strb	r3, [r7, #31]
 8007ed8:	e042      	b.n	8007f60 <UART_SetConfig+0x348>
 8007eda:	bf00      	nop
 8007edc:	efff69f3 	.word	0xefff69f3
 8007ee0:	40011000 	.word	0x40011000
 8007ee4:	40023800 	.word	0x40023800
 8007ee8:	40004400 	.word	0x40004400
 8007eec:	40004800 	.word	0x40004800
 8007ef0:	40004c00 	.word	0x40004c00
 8007ef4:	40005000 	.word	0x40005000
 8007ef8:	40011400 	.word	0x40011400
 8007efc:	40007800 	.word	0x40007800
 8007f00:	2310      	movs	r3, #16
 8007f02:	77fb      	strb	r3, [r7, #31]
 8007f04:	e02c      	b.n	8007f60 <UART_SetConfig+0x348>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a72      	ldr	r2, [pc, #456]	@ (80080d4 <UART_SetConfig+0x4bc>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d125      	bne.n	8007f5c <UART_SetConfig+0x344>
 8007f10:	4b71      	ldr	r3, [pc, #452]	@ (80080d8 <UART_SetConfig+0x4c0>)
 8007f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f16:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007f1a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007f1e:	d017      	beq.n	8007f50 <UART_SetConfig+0x338>
 8007f20:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007f24:	d817      	bhi.n	8007f56 <UART_SetConfig+0x33e>
 8007f26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f2a:	d00b      	beq.n	8007f44 <UART_SetConfig+0x32c>
 8007f2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f30:	d811      	bhi.n	8007f56 <UART_SetConfig+0x33e>
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d003      	beq.n	8007f3e <UART_SetConfig+0x326>
 8007f36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f3a:	d006      	beq.n	8007f4a <UART_SetConfig+0x332>
 8007f3c:	e00b      	b.n	8007f56 <UART_SetConfig+0x33e>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	77fb      	strb	r3, [r7, #31]
 8007f42:	e00d      	b.n	8007f60 <UART_SetConfig+0x348>
 8007f44:	2302      	movs	r3, #2
 8007f46:	77fb      	strb	r3, [r7, #31]
 8007f48:	e00a      	b.n	8007f60 <UART_SetConfig+0x348>
 8007f4a:	2304      	movs	r3, #4
 8007f4c:	77fb      	strb	r3, [r7, #31]
 8007f4e:	e007      	b.n	8007f60 <UART_SetConfig+0x348>
 8007f50:	2308      	movs	r3, #8
 8007f52:	77fb      	strb	r3, [r7, #31]
 8007f54:	e004      	b.n	8007f60 <UART_SetConfig+0x348>
 8007f56:	2310      	movs	r3, #16
 8007f58:	77fb      	strb	r3, [r7, #31]
 8007f5a:	e001      	b.n	8007f60 <UART_SetConfig+0x348>
 8007f5c:	2310      	movs	r3, #16
 8007f5e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	69db      	ldr	r3, [r3, #28]
 8007f64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f68:	d15b      	bne.n	8008022 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007f6a:	7ffb      	ldrb	r3, [r7, #31]
 8007f6c:	2b08      	cmp	r3, #8
 8007f6e:	d828      	bhi.n	8007fc2 <UART_SetConfig+0x3aa>
 8007f70:	a201      	add	r2, pc, #4	@ (adr r2, 8007f78 <UART_SetConfig+0x360>)
 8007f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f76:	bf00      	nop
 8007f78:	08007f9d 	.word	0x08007f9d
 8007f7c:	08007fa5 	.word	0x08007fa5
 8007f80:	08007fad 	.word	0x08007fad
 8007f84:	08007fc3 	.word	0x08007fc3
 8007f88:	08007fb3 	.word	0x08007fb3
 8007f8c:	08007fc3 	.word	0x08007fc3
 8007f90:	08007fc3 	.word	0x08007fc3
 8007f94:	08007fc3 	.word	0x08007fc3
 8007f98:	08007fbb 	.word	0x08007fbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f9c:	f7fd fe88 	bl	8005cb0 <HAL_RCC_GetPCLK1Freq>
 8007fa0:	61b8      	str	r0, [r7, #24]
        break;
 8007fa2:	e013      	b.n	8007fcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fa4:	f7fd fe98 	bl	8005cd8 <HAL_RCC_GetPCLK2Freq>
 8007fa8:	61b8      	str	r0, [r7, #24]
        break;
 8007faa:	e00f      	b.n	8007fcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fac:	4b4b      	ldr	r3, [pc, #300]	@ (80080dc <UART_SetConfig+0x4c4>)
 8007fae:	61bb      	str	r3, [r7, #24]
        break;
 8007fb0:	e00c      	b.n	8007fcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fb2:	f7fd fd6b 	bl	8005a8c <HAL_RCC_GetSysClockFreq>
 8007fb6:	61b8      	str	r0, [r7, #24]
        break;
 8007fb8:	e008      	b.n	8007fcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fbe:	61bb      	str	r3, [r7, #24]
        break;
 8007fc0:	e004      	b.n	8007fcc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	77bb      	strb	r3, [r7, #30]
        break;
 8007fca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d074      	beq.n	80080bc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	005a      	lsls	r2, r3, #1
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	085b      	lsrs	r3, r3, #1
 8007fdc:	441a      	add	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fe6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	2b0f      	cmp	r3, #15
 8007fec:	d916      	bls.n	800801c <UART_SetConfig+0x404>
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ff4:	d212      	bcs.n	800801c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	f023 030f 	bic.w	r3, r3, #15
 8007ffe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	085b      	lsrs	r3, r3, #1
 8008004:	b29b      	uxth	r3, r3
 8008006:	f003 0307 	and.w	r3, r3, #7
 800800a:	b29a      	uxth	r2, r3
 800800c:	89fb      	ldrh	r3, [r7, #14]
 800800e:	4313      	orrs	r3, r2
 8008010:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	89fa      	ldrh	r2, [r7, #14]
 8008018:	60da      	str	r2, [r3, #12]
 800801a:	e04f      	b.n	80080bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	77bb      	strb	r3, [r7, #30]
 8008020:	e04c      	b.n	80080bc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008022:	7ffb      	ldrb	r3, [r7, #31]
 8008024:	2b08      	cmp	r3, #8
 8008026:	d828      	bhi.n	800807a <UART_SetConfig+0x462>
 8008028:	a201      	add	r2, pc, #4	@ (adr r2, 8008030 <UART_SetConfig+0x418>)
 800802a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802e:	bf00      	nop
 8008030:	08008055 	.word	0x08008055
 8008034:	0800805d 	.word	0x0800805d
 8008038:	08008065 	.word	0x08008065
 800803c:	0800807b 	.word	0x0800807b
 8008040:	0800806b 	.word	0x0800806b
 8008044:	0800807b 	.word	0x0800807b
 8008048:	0800807b 	.word	0x0800807b
 800804c:	0800807b 	.word	0x0800807b
 8008050:	08008073 	.word	0x08008073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008054:	f7fd fe2c 	bl	8005cb0 <HAL_RCC_GetPCLK1Freq>
 8008058:	61b8      	str	r0, [r7, #24]
        break;
 800805a:	e013      	b.n	8008084 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800805c:	f7fd fe3c 	bl	8005cd8 <HAL_RCC_GetPCLK2Freq>
 8008060:	61b8      	str	r0, [r7, #24]
        break;
 8008062:	e00f      	b.n	8008084 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008064:	4b1d      	ldr	r3, [pc, #116]	@ (80080dc <UART_SetConfig+0x4c4>)
 8008066:	61bb      	str	r3, [r7, #24]
        break;
 8008068:	e00c      	b.n	8008084 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800806a:	f7fd fd0f 	bl	8005a8c <HAL_RCC_GetSysClockFreq>
 800806e:	61b8      	str	r0, [r7, #24]
        break;
 8008070:	e008      	b.n	8008084 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008076:	61bb      	str	r3, [r7, #24]
        break;
 8008078:	e004      	b.n	8008084 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800807a:	2300      	movs	r3, #0
 800807c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	77bb      	strb	r3, [r7, #30]
        break;
 8008082:	bf00      	nop
    }

    if (pclk != 0U)
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d018      	beq.n	80080bc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	085a      	lsrs	r2, r3, #1
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	441a      	add	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	fbb2 f3f3 	udiv	r3, r2, r3
 800809c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	2b0f      	cmp	r3, #15
 80080a2:	d909      	bls.n	80080b8 <UART_SetConfig+0x4a0>
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080aa:	d205      	bcs.n	80080b8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	60da      	str	r2, [r3, #12]
 80080b6:	e001      	b.n	80080bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80080c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3720      	adds	r7, #32
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	40007c00 	.word	0x40007c00
 80080d8:	40023800 	.word	0x40023800
 80080dc:	00f42400 	.word	0x00f42400

080080e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ec:	f003 0308 	and.w	r3, r3, #8
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00a      	beq.n	800810a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	430a      	orrs	r2, r1
 8008108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800810e:	f003 0301 	and.w	r3, r3, #1
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00a      	beq.n	800812c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	430a      	orrs	r2, r1
 800812a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008130:	f003 0302 	and.w	r3, r3, #2
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00a      	beq.n	800814e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	430a      	orrs	r2, r1
 800814c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008152:	f003 0304 	and.w	r3, r3, #4
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00a      	beq.n	8008170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	430a      	orrs	r2, r1
 800816e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008174:	f003 0310 	and.w	r3, r3, #16
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00a      	beq.n	8008192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	430a      	orrs	r2, r1
 8008190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008196:	f003 0320 	and.w	r3, r3, #32
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00a      	beq.n	80081b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	430a      	orrs	r2, r1
 80081b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d01a      	beq.n	80081f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	430a      	orrs	r2, r1
 80081d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081de:	d10a      	bne.n	80081f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	430a      	orrs	r2, r1
 80081f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00a      	beq.n	8008218 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	430a      	orrs	r2, r1
 8008216:	605a      	str	r2, [r3, #4]
  }
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b08c      	sub	sp, #48	@ 0x30
 8008228:	af02      	add	r7, sp, #8
 800822a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008234:	f7fb fe9a 	bl	8003f6c <HAL_GetTick>
 8008238:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0308 	and.w	r3, r3, #8
 8008244:	2b08      	cmp	r3, #8
 8008246:	d12e      	bne.n	80082a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008248:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008250:	2200      	movs	r2, #0
 8008252:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f83b 	bl	80082d2 <UART_WaitOnFlagUntilTimeout>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d021      	beq.n	80082a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	e853 3f00 	ldrex	r3, [r3]
 800826e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008276:	623b      	str	r3, [r7, #32]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	461a      	mov	r2, r3
 800827e:	6a3b      	ldr	r3, [r7, #32]
 8008280:	61fb      	str	r3, [r7, #28]
 8008282:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008284:	69b9      	ldr	r1, [r7, #24]
 8008286:	69fa      	ldr	r2, [r7, #28]
 8008288:	e841 2300 	strex	r3, r2, [r1]
 800828c:	617b      	str	r3, [r7, #20]
   return(result);
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1e6      	bne.n	8008262 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2220      	movs	r2, #32
 8008298:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e011      	b.n	80082ca <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2220      	movs	r2, #32
 80082aa:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2220      	movs	r2, #32
 80082b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3728      	adds	r7, #40	@ 0x28
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	60f8      	str	r0, [r7, #12]
 80082da:	60b9      	str	r1, [r7, #8]
 80082dc:	603b      	str	r3, [r7, #0]
 80082de:	4613      	mov	r3, r2
 80082e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082e2:	e04f      	b.n	8008384 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ea:	d04b      	beq.n	8008384 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ec:	f7fb fe3e 	bl	8003f6c <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	69ba      	ldr	r2, [r7, #24]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d302      	bcc.n	8008302 <UART_WaitOnFlagUntilTimeout+0x30>
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e04e      	b.n	80083a4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0304 	and.w	r3, r3, #4
 8008310:	2b00      	cmp	r3, #0
 8008312:	d037      	beq.n	8008384 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	2b80      	cmp	r3, #128	@ 0x80
 8008318:	d034      	beq.n	8008384 <UART_WaitOnFlagUntilTimeout+0xb2>
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	2b40      	cmp	r3, #64	@ 0x40
 800831e:	d031      	beq.n	8008384 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	f003 0308 	and.w	r3, r3, #8
 800832a:	2b08      	cmp	r3, #8
 800832c:	d110      	bne.n	8008350 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2208      	movs	r2, #8
 8008334:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f000 f8fe 	bl	8008538 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2208      	movs	r2, #8
 8008340:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e029      	b.n	80083a4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	69db      	ldr	r3, [r3, #28]
 8008356:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800835a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800835e:	d111      	bne.n	8008384 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008368:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f000 f8e4 	bl	8008538 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2220      	movs	r2, #32
 8008374:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2200      	movs	r2, #0
 800837c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008380:	2303      	movs	r3, #3
 8008382:	e00f      	b.n	80083a4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	69da      	ldr	r2, [r3, #28]
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	4013      	ands	r3, r2
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	429a      	cmp	r2, r3
 8008392:	bf0c      	ite	eq
 8008394:	2301      	moveq	r3, #1
 8008396:	2300      	movne	r3, #0
 8008398:	b2db      	uxtb	r3, r3
 800839a:	461a      	mov	r2, r3
 800839c:	79fb      	ldrb	r3, [r7, #7]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d0a0      	beq.n	80082e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b097      	sub	sp, #92	@ 0x5c
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	4613      	mov	r3, r2
 80083b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	68ba      	ldr	r2, [r7, #8]
 80083be:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	88fa      	ldrh	r2, [r7, #6]
 80083c4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	88fa      	ldrh	r2, [r7, #6]
 80083cc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083de:	d10e      	bne.n	80083fe <UART_Start_Receive_IT+0x52>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d105      	bne.n	80083f4 <UART_Start_Receive_IT+0x48>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80083ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80083f2:	e02d      	b.n	8008450 <UART_Start_Receive_IT+0xa4>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	22ff      	movs	r2, #255	@ 0xff
 80083f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80083fc:	e028      	b.n	8008450 <UART_Start_Receive_IT+0xa4>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d10d      	bne.n	8008422 <UART_Start_Receive_IT+0x76>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d104      	bne.n	8008418 <UART_Start_Receive_IT+0x6c>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	22ff      	movs	r2, #255	@ 0xff
 8008412:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008416:	e01b      	b.n	8008450 <UART_Start_Receive_IT+0xa4>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	227f      	movs	r2, #127	@ 0x7f
 800841c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008420:	e016      	b.n	8008450 <UART_Start_Receive_IT+0xa4>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800842a:	d10d      	bne.n	8008448 <UART_Start_Receive_IT+0x9c>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d104      	bne.n	800843e <UART_Start_Receive_IT+0x92>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	227f      	movs	r2, #127	@ 0x7f
 8008438:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800843c:	e008      	b.n	8008450 <UART_Start_Receive_IT+0xa4>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	223f      	movs	r2, #63	@ 0x3f
 8008442:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008446:	e003      	b.n	8008450 <UART_Start_Receive_IT+0xa4>
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2222      	movs	r2, #34	@ 0x22
 800845c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3308      	adds	r3, #8
 8008466:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800846a:	e853 3f00 	ldrex	r3, [r3]
 800846e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008472:	f043 0301 	orr.w	r3, r3, #1
 8008476:	657b      	str	r3, [r7, #84]	@ 0x54
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3308      	adds	r3, #8
 800847e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008480:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008482:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008484:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008486:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008488:	e841 2300 	strex	r3, r2, [r1]
 800848c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800848e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1e5      	bne.n	8008460 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800849c:	d107      	bne.n	80084ae <UART_Start_Receive_IT+0x102>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d103      	bne.n	80084ae <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	4a21      	ldr	r2, [pc, #132]	@ (8008530 <UART_Start_Receive_IT+0x184>)
 80084aa:	669a      	str	r2, [r3, #104]	@ 0x68
 80084ac:	e002      	b.n	80084b4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	4a20      	ldr	r2, [pc, #128]	@ (8008534 <UART_Start_Receive_IT+0x188>)
 80084b2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d019      	beq.n	80084f0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084c4:	e853 3f00 	ldrex	r3, [r3]
 80084c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084cc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80084d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	461a      	mov	r2, r3
 80084d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084da:	637b      	str	r3, [r7, #52]	@ 0x34
 80084dc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80084e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084e2:	e841 2300 	strex	r3, r2, [r1]
 80084e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80084e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1e6      	bne.n	80084bc <UART_Start_Receive_IT+0x110>
 80084ee:	e018      	b.n	8008522 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	e853 3f00 	ldrex	r3, [r3]
 80084fc:	613b      	str	r3, [r7, #16]
   return(result);
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	f043 0320 	orr.w	r3, r3, #32
 8008504:	653b      	str	r3, [r7, #80]	@ 0x50
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	461a      	mov	r2, r3
 800850c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800850e:	623b      	str	r3, [r7, #32]
 8008510:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008512:	69f9      	ldr	r1, [r7, #28]
 8008514:	6a3a      	ldr	r2, [r7, #32]
 8008516:	e841 2300 	strex	r3, r2, [r1]
 800851a:	61bb      	str	r3, [r7, #24]
   return(result);
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1e6      	bne.n	80084f0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	375c      	adds	r7, #92	@ 0x5c
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr
 8008530:	08008821 	.word	0x08008821
 8008534:	08008679 	.word	0x08008679

08008538 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008538:	b480      	push	{r7}
 800853a:	b095      	sub	sp, #84	@ 0x54
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008548:	e853 3f00 	ldrex	r3, [r3]
 800854c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800854e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008550:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008554:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	461a      	mov	r2, r3
 800855c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800855e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008560:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008562:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008564:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008566:	e841 2300 	strex	r3, r2, [r1]
 800856a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800856c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1e6      	bne.n	8008540 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	3308      	adds	r3, #8
 8008578:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	e853 3f00 	ldrex	r3, [r3]
 8008580:	61fb      	str	r3, [r7, #28]
   return(result);
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	f023 0301 	bic.w	r3, r3, #1
 8008588:	64bb      	str	r3, [r7, #72]	@ 0x48
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	3308      	adds	r3, #8
 8008590:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008592:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008594:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008596:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008598:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800859a:	e841 2300 	strex	r3, r2, [r1]
 800859e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e5      	bne.n	8008572 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d118      	bne.n	80085e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	e853 3f00 	ldrex	r3, [r3]
 80085ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	f023 0310 	bic.w	r3, r3, #16
 80085c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	461a      	mov	r2, r3
 80085ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085cc:	61bb      	str	r3, [r7, #24]
 80085ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d0:	6979      	ldr	r1, [r7, #20]
 80085d2:	69ba      	ldr	r2, [r7, #24]
 80085d4:	e841 2300 	strex	r3, r2, [r1]
 80085d8:	613b      	str	r3, [r7, #16]
   return(result);
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1e6      	bne.n	80085ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2220      	movs	r2, #32
 80085e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80085f4:	bf00      	nop
 80085f6:	3754      	adds	r7, #84	@ 0x54
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800860c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f7ff faf4 	bl	8007c04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800861c:	bf00      	nop
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b088      	sub	sp, #32
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	e853 3f00 	ldrex	r3, [r3]
 8008638:	60bb      	str	r3, [r7, #8]
   return(result);
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008640:	61fb      	str	r3, [r7, #28]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	61bb      	str	r3, [r7, #24]
 800864c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	6979      	ldr	r1, [r7, #20]
 8008650:	69ba      	ldr	r2, [r7, #24]
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	613b      	str	r3, [r7, #16]
   return(result);
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1e6      	bne.n	800862c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2220      	movs	r2, #32
 8008662:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7ff fab6 	bl	8007bdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008670:	bf00      	nop
 8008672:	3720      	adds	r7, #32
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b09c      	sub	sp, #112	@ 0x70
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008686:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008690:	2b22      	cmp	r3, #34	@ 0x22
 8008692:	f040 80b9 	bne.w	8008808 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800869c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80086a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80086a4:	b2d9      	uxtb	r1, r3
 80086a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80086aa:	b2da      	uxtb	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086b0:	400a      	ands	r2, r1
 80086b2:	b2d2      	uxtb	r2, r2
 80086b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ba:	1c5a      	adds	r2, r3, #1
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	3b01      	subs	r3, #1
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80086d8:	b29b      	uxth	r3, r3
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f040 809c 	bne.w	8008818 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086e8:	e853 3f00 	ldrex	r3, [r3]
 80086ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80086ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	461a      	mov	r2, r3
 80086fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008700:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008702:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008704:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008706:	e841 2300 	strex	r3, r2, [r1]
 800870a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800870c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1e6      	bne.n	80086e0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	3308      	adds	r3, #8
 8008718:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800871c:	e853 3f00 	ldrex	r3, [r3]
 8008720:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008724:	f023 0301 	bic.w	r3, r3, #1
 8008728:	667b      	str	r3, [r7, #100]	@ 0x64
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	3308      	adds	r3, #8
 8008730:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008732:	647a      	str	r2, [r7, #68]	@ 0x44
 8008734:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008736:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008738:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800873a:	e841 2300 	strex	r3, r2, [r1]
 800873e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1e5      	bne.n	8008712 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2220      	movs	r2, #32
 800874a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d018      	beq.n	800879a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008770:	e853 3f00 	ldrex	r3, [r3]
 8008774:	623b      	str	r3, [r7, #32]
   return(result);
 8008776:	6a3b      	ldr	r3, [r7, #32]
 8008778:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800877c:	663b      	str	r3, [r7, #96]	@ 0x60
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008786:	633b      	str	r3, [r7, #48]	@ 0x30
 8008788:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800878c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800878e:	e841 2300 	strex	r3, r2, [r1]
 8008792:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1e6      	bne.n	8008768 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d12e      	bne.n	8008800 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	e853 3f00 	ldrex	r3, [r3]
 80087b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f023 0310 	bic.w	r3, r3, #16
 80087bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	461a      	mov	r2, r3
 80087c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087c6:	61fb      	str	r3, [r7, #28]
 80087c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ca:	69b9      	ldr	r1, [r7, #24]
 80087cc:	69fa      	ldr	r2, [r7, #28]
 80087ce:	e841 2300 	strex	r3, r2, [r1]
 80087d2:	617b      	str	r3, [r7, #20]
   return(result);
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1e6      	bne.n	80087a8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	69db      	ldr	r3, [r3, #28]
 80087e0:	f003 0310 	and.w	r3, r3, #16
 80087e4:	2b10      	cmp	r3, #16
 80087e6:	d103      	bne.n	80087f0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2210      	movs	r2, #16
 80087ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80087f6:	4619      	mov	r1, r3
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f7f9 fc03 	bl	8002004 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087fe:	e00b      	b.n	8008818 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7ff f9f5 	bl	8007bf0 <HAL_UART_RxCpltCallback>
}
 8008806:	e007      	b.n	8008818 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	699a      	ldr	r2, [r3, #24]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f042 0208 	orr.w	r2, r2, #8
 8008816:	619a      	str	r2, [r3, #24]
}
 8008818:	bf00      	nop
 800881a:	3770      	adds	r7, #112	@ 0x70
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b09c      	sub	sp, #112	@ 0x70
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800882e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008838:	2b22      	cmp	r3, #34	@ 0x22
 800883a:	f040 80b9 	bne.w	80089b0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008844:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800884c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800884e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008852:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008856:	4013      	ands	r3, r2
 8008858:	b29a      	uxth	r2, r3
 800885a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800885c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008862:	1c9a      	adds	r2, r3, #2
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800886e:	b29b      	uxth	r3, r3
 8008870:	3b01      	subs	r3, #1
 8008872:	b29a      	uxth	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008880:	b29b      	uxth	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	f040 809c 	bne.w	80089c0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800888e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008890:	e853 3f00 	ldrex	r3, [r3]
 8008894:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008896:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008898:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800889c:	667b      	str	r3, [r7, #100]	@ 0x64
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	461a      	mov	r2, r3
 80088a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80088a8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80088ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80088ae:	e841 2300 	strex	r3, r2, [r1]
 80088b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80088b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1e6      	bne.n	8008888 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	3308      	adds	r3, #8
 80088c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088c4:	e853 3f00 	ldrex	r3, [r3]
 80088c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80088ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088cc:	f023 0301 	bic.w	r3, r3, #1
 80088d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	3308      	adds	r3, #8
 80088d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80088da:	643a      	str	r2, [r7, #64]	@ 0x40
 80088dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80088e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80088e2:	e841 2300 	strex	r3, r2, [r1]
 80088e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80088e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1e5      	bne.n	80088ba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2220      	movs	r2, #32
 80088f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800890c:	2b00      	cmp	r3, #0
 800890e:	d018      	beq.n	8008942 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	e853 3f00 	ldrex	r3, [r3]
 800891c:	61fb      	str	r3, [r7, #28]
   return(result);
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008924:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	461a      	mov	r2, r3
 800892c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800892e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008930:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008932:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008934:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008936:	e841 2300 	strex	r3, r2, [r1]
 800893a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800893c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1e6      	bne.n	8008910 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008946:	2b01      	cmp	r3, #1
 8008948:	d12e      	bne.n	80089a8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	e853 3f00 	ldrex	r3, [r3]
 800895c:	60bb      	str	r3, [r7, #8]
   return(result);
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	f023 0310 	bic.w	r3, r3, #16
 8008964:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800896e:	61bb      	str	r3, [r7, #24]
 8008970:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008972:	6979      	ldr	r1, [r7, #20]
 8008974:	69ba      	ldr	r2, [r7, #24]
 8008976:	e841 2300 	strex	r3, r2, [r1]
 800897a:	613b      	str	r3, [r7, #16]
   return(result);
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1e6      	bne.n	8008950 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	f003 0310 	and.w	r3, r3, #16
 800898c:	2b10      	cmp	r3, #16
 800898e:	d103      	bne.n	8008998 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2210      	movs	r2, #16
 8008996:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800899e:	4619      	mov	r1, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7f9 fb2f 	bl	8002004 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089a6:	e00b      	b.n	80089c0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f7ff f921 	bl	8007bf0 <HAL_UART_RxCpltCallback>
}
 80089ae:	e007      	b.n	80089c0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	699a      	ldr	r2, [r3, #24]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f042 0208 	orr.w	r2, r2, #8
 80089be:	619a      	str	r2, [r3, #24]
}
 80089c0:	bf00      	nop
 80089c2:	3770      	adds	r7, #112	@ 0x70
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b08c      	sub	sp, #48	@ 0x30
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	4613      	mov	r3, r2
 80089d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089e2:	2b20      	cmp	r3, #32
 80089e4:	d13b      	bne.n	8008a5e <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d002      	beq.n	80089f2 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 80089ec:	88fb      	ldrh	r3, [r7, #6]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e034      	b.n	8008a60 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2201      	movs	r2, #1
 80089fa:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	665a      	str	r2, [r3, #100]	@ 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8008a02:	88fb      	ldrh	r3, [r7, #6]
 8008a04:	461a      	mov	r2, r3
 8008a06:	68b9      	ldr	r1, [r7, #8]
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f7ff fccf 	bl	80083ac <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d11d      	bne.n	8008a52 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2210      	movs	r2, #16
 8008a1c:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	e853 3f00 	ldrex	r3, [r3]
 8008a2a:	617b      	str	r3, [r7, #20]
   return(result);
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	f043 0310 	orr.w	r3, r3, #16
 8008a32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	461a      	mov	r2, r3
 8008a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a3e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a40:	6a39      	ldr	r1, [r7, #32]
 8008a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a44:	e841 2300 	strex	r3, r2, [r1]
 8008a48:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1e6      	bne.n	8008a1e <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8008a50:	e002      	b.n	8008a58 <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8008a58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a5c:	e000      	b.n	8008a60 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8008a5e:	2302      	movs	r3, #2
  }
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3730      	adds	r7, #48	@ 0x30
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <atoi>:
 8008a68:	220a      	movs	r2, #10
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	f000 b87a 	b.w	8008b64 <strtol>

08008a70 <_strtol_l.isra.0>:
 8008a70:	2b24      	cmp	r3, #36	@ 0x24
 8008a72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a76:	4686      	mov	lr, r0
 8008a78:	4690      	mov	r8, r2
 8008a7a:	d801      	bhi.n	8008a80 <_strtol_l.isra.0+0x10>
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d106      	bne.n	8008a8e <_strtol_l.isra.0+0x1e>
 8008a80:	f000 fb50 	bl	8009124 <__errno>
 8008a84:	2316      	movs	r3, #22
 8008a86:	6003      	str	r3, [r0, #0]
 8008a88:	2000      	movs	r0, #0
 8008a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a8e:	4834      	ldr	r0, [pc, #208]	@ (8008b60 <_strtol_l.isra.0+0xf0>)
 8008a90:	460d      	mov	r5, r1
 8008a92:	462a      	mov	r2, r5
 8008a94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a98:	5d06      	ldrb	r6, [r0, r4]
 8008a9a:	f016 0608 	ands.w	r6, r6, #8
 8008a9e:	d1f8      	bne.n	8008a92 <_strtol_l.isra.0+0x22>
 8008aa0:	2c2d      	cmp	r4, #45	@ 0x2d
 8008aa2:	d110      	bne.n	8008ac6 <_strtol_l.isra.0+0x56>
 8008aa4:	782c      	ldrb	r4, [r5, #0]
 8008aa6:	2601      	movs	r6, #1
 8008aa8:	1c95      	adds	r5, r2, #2
 8008aaa:	f033 0210 	bics.w	r2, r3, #16
 8008aae:	d115      	bne.n	8008adc <_strtol_l.isra.0+0x6c>
 8008ab0:	2c30      	cmp	r4, #48	@ 0x30
 8008ab2:	d10d      	bne.n	8008ad0 <_strtol_l.isra.0+0x60>
 8008ab4:	782a      	ldrb	r2, [r5, #0]
 8008ab6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008aba:	2a58      	cmp	r2, #88	@ 0x58
 8008abc:	d108      	bne.n	8008ad0 <_strtol_l.isra.0+0x60>
 8008abe:	786c      	ldrb	r4, [r5, #1]
 8008ac0:	3502      	adds	r5, #2
 8008ac2:	2310      	movs	r3, #16
 8008ac4:	e00a      	b.n	8008adc <_strtol_l.isra.0+0x6c>
 8008ac6:	2c2b      	cmp	r4, #43	@ 0x2b
 8008ac8:	bf04      	itt	eq
 8008aca:	782c      	ldrbeq	r4, [r5, #0]
 8008acc:	1c95      	addeq	r5, r2, #2
 8008ace:	e7ec      	b.n	8008aaa <_strtol_l.isra.0+0x3a>
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1f6      	bne.n	8008ac2 <_strtol_l.isra.0+0x52>
 8008ad4:	2c30      	cmp	r4, #48	@ 0x30
 8008ad6:	bf14      	ite	ne
 8008ad8:	230a      	movne	r3, #10
 8008ada:	2308      	moveq	r3, #8
 8008adc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008ae0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	fbbc f9f3 	udiv	r9, ip, r3
 8008aea:	4610      	mov	r0, r2
 8008aec:	fb03 ca19 	mls	sl, r3, r9, ip
 8008af0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008af4:	2f09      	cmp	r7, #9
 8008af6:	d80f      	bhi.n	8008b18 <_strtol_l.isra.0+0xa8>
 8008af8:	463c      	mov	r4, r7
 8008afa:	42a3      	cmp	r3, r4
 8008afc:	dd1b      	ble.n	8008b36 <_strtol_l.isra.0+0xc6>
 8008afe:	1c57      	adds	r7, r2, #1
 8008b00:	d007      	beq.n	8008b12 <_strtol_l.isra.0+0xa2>
 8008b02:	4581      	cmp	r9, r0
 8008b04:	d314      	bcc.n	8008b30 <_strtol_l.isra.0+0xc0>
 8008b06:	d101      	bne.n	8008b0c <_strtol_l.isra.0+0x9c>
 8008b08:	45a2      	cmp	sl, r4
 8008b0a:	db11      	blt.n	8008b30 <_strtol_l.isra.0+0xc0>
 8008b0c:	fb00 4003 	mla	r0, r0, r3, r4
 8008b10:	2201      	movs	r2, #1
 8008b12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b16:	e7eb      	b.n	8008af0 <_strtol_l.isra.0+0x80>
 8008b18:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008b1c:	2f19      	cmp	r7, #25
 8008b1e:	d801      	bhi.n	8008b24 <_strtol_l.isra.0+0xb4>
 8008b20:	3c37      	subs	r4, #55	@ 0x37
 8008b22:	e7ea      	b.n	8008afa <_strtol_l.isra.0+0x8a>
 8008b24:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008b28:	2f19      	cmp	r7, #25
 8008b2a:	d804      	bhi.n	8008b36 <_strtol_l.isra.0+0xc6>
 8008b2c:	3c57      	subs	r4, #87	@ 0x57
 8008b2e:	e7e4      	b.n	8008afa <_strtol_l.isra.0+0x8a>
 8008b30:	f04f 32ff 	mov.w	r2, #4294967295
 8008b34:	e7ed      	b.n	8008b12 <_strtol_l.isra.0+0xa2>
 8008b36:	1c53      	adds	r3, r2, #1
 8008b38:	d108      	bne.n	8008b4c <_strtol_l.isra.0+0xdc>
 8008b3a:	2322      	movs	r3, #34	@ 0x22
 8008b3c:	f8ce 3000 	str.w	r3, [lr]
 8008b40:	4660      	mov	r0, ip
 8008b42:	f1b8 0f00 	cmp.w	r8, #0
 8008b46:	d0a0      	beq.n	8008a8a <_strtol_l.isra.0+0x1a>
 8008b48:	1e69      	subs	r1, r5, #1
 8008b4a:	e006      	b.n	8008b5a <_strtol_l.isra.0+0xea>
 8008b4c:	b106      	cbz	r6, 8008b50 <_strtol_l.isra.0+0xe0>
 8008b4e:	4240      	negs	r0, r0
 8008b50:	f1b8 0f00 	cmp.w	r8, #0
 8008b54:	d099      	beq.n	8008a8a <_strtol_l.isra.0+0x1a>
 8008b56:	2a00      	cmp	r2, #0
 8008b58:	d1f6      	bne.n	8008b48 <_strtol_l.isra.0+0xd8>
 8008b5a:	f8c8 1000 	str.w	r1, [r8]
 8008b5e:	e794      	b.n	8008a8a <_strtol_l.isra.0+0x1a>
 8008b60:	0800c885 	.word	0x0800c885

08008b64 <strtol>:
 8008b64:	4613      	mov	r3, r2
 8008b66:	460a      	mov	r2, r1
 8008b68:	4601      	mov	r1, r0
 8008b6a:	4802      	ldr	r0, [pc, #8]	@ (8008b74 <strtol+0x10>)
 8008b6c:	6800      	ldr	r0, [r0, #0]
 8008b6e:	f7ff bf7f 	b.w	8008a70 <_strtol_l.isra.0>
 8008b72:	bf00      	nop
 8008b74:	20000044 	.word	0x20000044

08008b78 <std>:
 8008b78:	2300      	movs	r3, #0
 8008b7a:	b510      	push	{r4, lr}
 8008b7c:	4604      	mov	r4, r0
 8008b7e:	e9c0 3300 	strd	r3, r3, [r0]
 8008b82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b86:	6083      	str	r3, [r0, #8]
 8008b88:	8181      	strh	r1, [r0, #12]
 8008b8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008b8c:	81c2      	strh	r2, [r0, #14]
 8008b8e:	6183      	str	r3, [r0, #24]
 8008b90:	4619      	mov	r1, r3
 8008b92:	2208      	movs	r2, #8
 8008b94:	305c      	adds	r0, #92	@ 0x5c
 8008b96:	f000 fa1b 	bl	8008fd0 <memset>
 8008b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8008bd0 <std+0x58>)
 8008b9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8008bd4 <std+0x5c>)
 8008ba0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8008bd8 <std+0x60>)
 8008ba4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8008bdc <std+0x64>)
 8008ba8:	6323      	str	r3, [r4, #48]	@ 0x30
 8008baa:	4b0d      	ldr	r3, [pc, #52]	@ (8008be0 <std+0x68>)
 8008bac:	6224      	str	r4, [r4, #32]
 8008bae:	429c      	cmp	r4, r3
 8008bb0:	d006      	beq.n	8008bc0 <std+0x48>
 8008bb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008bb6:	4294      	cmp	r4, r2
 8008bb8:	d002      	beq.n	8008bc0 <std+0x48>
 8008bba:	33d0      	adds	r3, #208	@ 0xd0
 8008bbc:	429c      	cmp	r4, r3
 8008bbe:	d105      	bne.n	8008bcc <std+0x54>
 8008bc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bc8:	f000 bad6 	b.w	8009178 <__retarget_lock_init_recursive>
 8008bcc:	bd10      	pop	{r4, pc}
 8008bce:	bf00      	nop
 8008bd0:	08008e21 	.word	0x08008e21
 8008bd4:	08008e43 	.word	0x08008e43
 8008bd8:	08008e7b 	.word	0x08008e7b
 8008bdc:	08008e9f 	.word	0x08008e9f
 8008be0:	20000568 	.word	0x20000568

08008be4 <stdio_exit_handler>:
 8008be4:	4a02      	ldr	r2, [pc, #8]	@ (8008bf0 <stdio_exit_handler+0xc>)
 8008be6:	4903      	ldr	r1, [pc, #12]	@ (8008bf4 <stdio_exit_handler+0x10>)
 8008be8:	4803      	ldr	r0, [pc, #12]	@ (8008bf8 <stdio_exit_handler+0x14>)
 8008bea:	f000 b869 	b.w	8008cc0 <_fwalk_sglue>
 8008bee:	bf00      	nop
 8008bf0:	20000038 	.word	0x20000038
 8008bf4:	08009d2d 	.word	0x08009d2d
 8008bf8:	20000048 	.word	0x20000048

08008bfc <cleanup_stdio>:
 8008bfc:	6841      	ldr	r1, [r0, #4]
 8008bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8008c30 <cleanup_stdio+0x34>)
 8008c00:	4299      	cmp	r1, r3
 8008c02:	b510      	push	{r4, lr}
 8008c04:	4604      	mov	r4, r0
 8008c06:	d001      	beq.n	8008c0c <cleanup_stdio+0x10>
 8008c08:	f001 f890 	bl	8009d2c <_fflush_r>
 8008c0c:	68a1      	ldr	r1, [r4, #8]
 8008c0e:	4b09      	ldr	r3, [pc, #36]	@ (8008c34 <cleanup_stdio+0x38>)
 8008c10:	4299      	cmp	r1, r3
 8008c12:	d002      	beq.n	8008c1a <cleanup_stdio+0x1e>
 8008c14:	4620      	mov	r0, r4
 8008c16:	f001 f889 	bl	8009d2c <_fflush_r>
 8008c1a:	68e1      	ldr	r1, [r4, #12]
 8008c1c:	4b06      	ldr	r3, [pc, #24]	@ (8008c38 <cleanup_stdio+0x3c>)
 8008c1e:	4299      	cmp	r1, r3
 8008c20:	d004      	beq.n	8008c2c <cleanup_stdio+0x30>
 8008c22:	4620      	mov	r0, r4
 8008c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c28:	f001 b880 	b.w	8009d2c <_fflush_r>
 8008c2c:	bd10      	pop	{r4, pc}
 8008c2e:	bf00      	nop
 8008c30:	20000568 	.word	0x20000568
 8008c34:	200005d0 	.word	0x200005d0
 8008c38:	20000638 	.word	0x20000638

08008c3c <global_stdio_init.part.0>:
 8008c3c:	b510      	push	{r4, lr}
 8008c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8008c6c <global_stdio_init.part.0+0x30>)
 8008c40:	4c0b      	ldr	r4, [pc, #44]	@ (8008c70 <global_stdio_init.part.0+0x34>)
 8008c42:	4a0c      	ldr	r2, [pc, #48]	@ (8008c74 <global_stdio_init.part.0+0x38>)
 8008c44:	601a      	str	r2, [r3, #0]
 8008c46:	4620      	mov	r0, r4
 8008c48:	2200      	movs	r2, #0
 8008c4a:	2104      	movs	r1, #4
 8008c4c:	f7ff ff94 	bl	8008b78 <std>
 8008c50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008c54:	2201      	movs	r2, #1
 8008c56:	2109      	movs	r1, #9
 8008c58:	f7ff ff8e 	bl	8008b78 <std>
 8008c5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008c60:	2202      	movs	r2, #2
 8008c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c66:	2112      	movs	r1, #18
 8008c68:	f7ff bf86 	b.w	8008b78 <std>
 8008c6c:	200006a0 	.word	0x200006a0
 8008c70:	20000568 	.word	0x20000568
 8008c74:	08008be5 	.word	0x08008be5

08008c78 <__sfp_lock_acquire>:
 8008c78:	4801      	ldr	r0, [pc, #4]	@ (8008c80 <__sfp_lock_acquire+0x8>)
 8008c7a:	f000 ba7e 	b.w	800917a <__retarget_lock_acquire_recursive>
 8008c7e:	bf00      	nop
 8008c80:	200006a9 	.word	0x200006a9

08008c84 <__sfp_lock_release>:
 8008c84:	4801      	ldr	r0, [pc, #4]	@ (8008c8c <__sfp_lock_release+0x8>)
 8008c86:	f000 ba79 	b.w	800917c <__retarget_lock_release_recursive>
 8008c8a:	bf00      	nop
 8008c8c:	200006a9 	.word	0x200006a9

08008c90 <__sinit>:
 8008c90:	b510      	push	{r4, lr}
 8008c92:	4604      	mov	r4, r0
 8008c94:	f7ff fff0 	bl	8008c78 <__sfp_lock_acquire>
 8008c98:	6a23      	ldr	r3, [r4, #32]
 8008c9a:	b11b      	cbz	r3, 8008ca4 <__sinit+0x14>
 8008c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ca0:	f7ff bff0 	b.w	8008c84 <__sfp_lock_release>
 8008ca4:	4b04      	ldr	r3, [pc, #16]	@ (8008cb8 <__sinit+0x28>)
 8008ca6:	6223      	str	r3, [r4, #32]
 8008ca8:	4b04      	ldr	r3, [pc, #16]	@ (8008cbc <__sinit+0x2c>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1f5      	bne.n	8008c9c <__sinit+0xc>
 8008cb0:	f7ff ffc4 	bl	8008c3c <global_stdio_init.part.0>
 8008cb4:	e7f2      	b.n	8008c9c <__sinit+0xc>
 8008cb6:	bf00      	nop
 8008cb8:	08008bfd 	.word	0x08008bfd
 8008cbc:	200006a0 	.word	0x200006a0

08008cc0 <_fwalk_sglue>:
 8008cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cc4:	4607      	mov	r7, r0
 8008cc6:	4688      	mov	r8, r1
 8008cc8:	4614      	mov	r4, r2
 8008cca:	2600      	movs	r6, #0
 8008ccc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008cd0:	f1b9 0901 	subs.w	r9, r9, #1
 8008cd4:	d505      	bpl.n	8008ce2 <_fwalk_sglue+0x22>
 8008cd6:	6824      	ldr	r4, [r4, #0]
 8008cd8:	2c00      	cmp	r4, #0
 8008cda:	d1f7      	bne.n	8008ccc <_fwalk_sglue+0xc>
 8008cdc:	4630      	mov	r0, r6
 8008cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ce2:	89ab      	ldrh	r3, [r5, #12]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d907      	bls.n	8008cf8 <_fwalk_sglue+0x38>
 8008ce8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cec:	3301      	adds	r3, #1
 8008cee:	d003      	beq.n	8008cf8 <_fwalk_sglue+0x38>
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	4638      	mov	r0, r7
 8008cf4:	47c0      	blx	r8
 8008cf6:	4306      	orrs	r6, r0
 8008cf8:	3568      	adds	r5, #104	@ 0x68
 8008cfa:	e7e9      	b.n	8008cd0 <_fwalk_sglue+0x10>

08008cfc <iprintf>:
 8008cfc:	b40f      	push	{r0, r1, r2, r3}
 8008cfe:	b507      	push	{r0, r1, r2, lr}
 8008d00:	4906      	ldr	r1, [pc, #24]	@ (8008d1c <iprintf+0x20>)
 8008d02:	ab04      	add	r3, sp, #16
 8008d04:	6808      	ldr	r0, [r1, #0]
 8008d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d0a:	6881      	ldr	r1, [r0, #8]
 8008d0c:	9301      	str	r3, [sp, #4]
 8008d0e:	f000 fce5 	bl	80096dc <_vfiprintf_r>
 8008d12:	b003      	add	sp, #12
 8008d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d18:	b004      	add	sp, #16
 8008d1a:	4770      	bx	lr
 8008d1c:	20000044 	.word	0x20000044

08008d20 <_puts_r>:
 8008d20:	6a03      	ldr	r3, [r0, #32]
 8008d22:	b570      	push	{r4, r5, r6, lr}
 8008d24:	6884      	ldr	r4, [r0, #8]
 8008d26:	4605      	mov	r5, r0
 8008d28:	460e      	mov	r6, r1
 8008d2a:	b90b      	cbnz	r3, 8008d30 <_puts_r+0x10>
 8008d2c:	f7ff ffb0 	bl	8008c90 <__sinit>
 8008d30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d32:	07db      	lsls	r3, r3, #31
 8008d34:	d405      	bmi.n	8008d42 <_puts_r+0x22>
 8008d36:	89a3      	ldrh	r3, [r4, #12]
 8008d38:	0598      	lsls	r0, r3, #22
 8008d3a:	d402      	bmi.n	8008d42 <_puts_r+0x22>
 8008d3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d3e:	f000 fa1c 	bl	800917a <__retarget_lock_acquire_recursive>
 8008d42:	89a3      	ldrh	r3, [r4, #12]
 8008d44:	0719      	lsls	r1, r3, #28
 8008d46:	d502      	bpl.n	8008d4e <_puts_r+0x2e>
 8008d48:	6923      	ldr	r3, [r4, #16]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d135      	bne.n	8008dba <_puts_r+0x9a>
 8008d4e:	4621      	mov	r1, r4
 8008d50:	4628      	mov	r0, r5
 8008d52:	f000 f8e7 	bl	8008f24 <__swsetup_r>
 8008d56:	b380      	cbz	r0, 8008dba <_puts_r+0x9a>
 8008d58:	f04f 35ff 	mov.w	r5, #4294967295
 8008d5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d5e:	07da      	lsls	r2, r3, #31
 8008d60:	d405      	bmi.n	8008d6e <_puts_r+0x4e>
 8008d62:	89a3      	ldrh	r3, [r4, #12]
 8008d64:	059b      	lsls	r3, r3, #22
 8008d66:	d402      	bmi.n	8008d6e <_puts_r+0x4e>
 8008d68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d6a:	f000 fa07 	bl	800917c <__retarget_lock_release_recursive>
 8008d6e:	4628      	mov	r0, r5
 8008d70:	bd70      	pop	{r4, r5, r6, pc}
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	da04      	bge.n	8008d80 <_puts_r+0x60>
 8008d76:	69a2      	ldr	r2, [r4, #24]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	dc17      	bgt.n	8008dac <_puts_r+0x8c>
 8008d7c:	290a      	cmp	r1, #10
 8008d7e:	d015      	beq.n	8008dac <_puts_r+0x8c>
 8008d80:	6823      	ldr	r3, [r4, #0]
 8008d82:	1c5a      	adds	r2, r3, #1
 8008d84:	6022      	str	r2, [r4, #0]
 8008d86:	7019      	strb	r1, [r3, #0]
 8008d88:	68a3      	ldr	r3, [r4, #8]
 8008d8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	60a3      	str	r3, [r4, #8]
 8008d92:	2900      	cmp	r1, #0
 8008d94:	d1ed      	bne.n	8008d72 <_puts_r+0x52>
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	da11      	bge.n	8008dbe <_puts_r+0x9e>
 8008d9a:	4622      	mov	r2, r4
 8008d9c:	210a      	movs	r1, #10
 8008d9e:	4628      	mov	r0, r5
 8008da0:	f000 f881 	bl	8008ea6 <__swbuf_r>
 8008da4:	3001      	adds	r0, #1
 8008da6:	d0d7      	beq.n	8008d58 <_puts_r+0x38>
 8008da8:	250a      	movs	r5, #10
 8008daa:	e7d7      	b.n	8008d5c <_puts_r+0x3c>
 8008dac:	4622      	mov	r2, r4
 8008dae:	4628      	mov	r0, r5
 8008db0:	f000 f879 	bl	8008ea6 <__swbuf_r>
 8008db4:	3001      	adds	r0, #1
 8008db6:	d1e7      	bne.n	8008d88 <_puts_r+0x68>
 8008db8:	e7ce      	b.n	8008d58 <_puts_r+0x38>
 8008dba:	3e01      	subs	r6, #1
 8008dbc:	e7e4      	b.n	8008d88 <_puts_r+0x68>
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	1c5a      	adds	r2, r3, #1
 8008dc2:	6022      	str	r2, [r4, #0]
 8008dc4:	220a      	movs	r2, #10
 8008dc6:	701a      	strb	r2, [r3, #0]
 8008dc8:	e7ee      	b.n	8008da8 <_puts_r+0x88>
	...

08008dcc <puts>:
 8008dcc:	4b02      	ldr	r3, [pc, #8]	@ (8008dd8 <puts+0xc>)
 8008dce:	4601      	mov	r1, r0
 8008dd0:	6818      	ldr	r0, [r3, #0]
 8008dd2:	f7ff bfa5 	b.w	8008d20 <_puts_r>
 8008dd6:	bf00      	nop
 8008dd8:	20000044 	.word	0x20000044

08008ddc <siprintf>:
 8008ddc:	b40e      	push	{r1, r2, r3}
 8008dde:	b510      	push	{r4, lr}
 8008de0:	b09d      	sub	sp, #116	@ 0x74
 8008de2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008de4:	9002      	str	r0, [sp, #8]
 8008de6:	9006      	str	r0, [sp, #24]
 8008de8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008dec:	480a      	ldr	r0, [pc, #40]	@ (8008e18 <siprintf+0x3c>)
 8008dee:	9107      	str	r1, [sp, #28]
 8008df0:	9104      	str	r1, [sp, #16]
 8008df2:	490a      	ldr	r1, [pc, #40]	@ (8008e1c <siprintf+0x40>)
 8008df4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008df8:	9105      	str	r1, [sp, #20]
 8008dfa:	2400      	movs	r4, #0
 8008dfc:	a902      	add	r1, sp, #8
 8008dfe:	6800      	ldr	r0, [r0, #0]
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008e04:	f000 fb44 	bl	8009490 <_svfiprintf_r>
 8008e08:	9b02      	ldr	r3, [sp, #8]
 8008e0a:	701c      	strb	r4, [r3, #0]
 8008e0c:	b01d      	add	sp, #116	@ 0x74
 8008e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e12:	b003      	add	sp, #12
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	20000044 	.word	0x20000044
 8008e1c:	ffff0208 	.word	0xffff0208

08008e20 <__sread>:
 8008e20:	b510      	push	{r4, lr}
 8008e22:	460c      	mov	r4, r1
 8008e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e28:	f000 f958 	bl	80090dc <_read_r>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	bfab      	itete	ge
 8008e30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008e32:	89a3      	ldrhlt	r3, [r4, #12]
 8008e34:	181b      	addge	r3, r3, r0
 8008e36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008e3a:	bfac      	ite	ge
 8008e3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008e3e:	81a3      	strhlt	r3, [r4, #12]
 8008e40:	bd10      	pop	{r4, pc}

08008e42 <__swrite>:
 8008e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e46:	461f      	mov	r7, r3
 8008e48:	898b      	ldrh	r3, [r1, #12]
 8008e4a:	05db      	lsls	r3, r3, #23
 8008e4c:	4605      	mov	r5, r0
 8008e4e:	460c      	mov	r4, r1
 8008e50:	4616      	mov	r6, r2
 8008e52:	d505      	bpl.n	8008e60 <__swrite+0x1e>
 8008e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e58:	2302      	movs	r3, #2
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f000 f92c 	bl	80090b8 <_lseek_r>
 8008e60:	89a3      	ldrh	r3, [r4, #12]
 8008e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e6a:	81a3      	strh	r3, [r4, #12]
 8008e6c:	4632      	mov	r2, r6
 8008e6e:	463b      	mov	r3, r7
 8008e70:	4628      	mov	r0, r5
 8008e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e76:	f000 b943 	b.w	8009100 <_write_r>

08008e7a <__sseek>:
 8008e7a:	b510      	push	{r4, lr}
 8008e7c:	460c      	mov	r4, r1
 8008e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e82:	f000 f919 	bl	80090b8 <_lseek_r>
 8008e86:	1c43      	adds	r3, r0, #1
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	bf15      	itete	ne
 8008e8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008e8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008e92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008e96:	81a3      	strheq	r3, [r4, #12]
 8008e98:	bf18      	it	ne
 8008e9a:	81a3      	strhne	r3, [r4, #12]
 8008e9c:	bd10      	pop	{r4, pc}

08008e9e <__sclose>:
 8008e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ea2:	f000 b8f9 	b.w	8009098 <_close_r>

08008ea6 <__swbuf_r>:
 8008ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea8:	460e      	mov	r6, r1
 8008eaa:	4614      	mov	r4, r2
 8008eac:	4605      	mov	r5, r0
 8008eae:	b118      	cbz	r0, 8008eb8 <__swbuf_r+0x12>
 8008eb0:	6a03      	ldr	r3, [r0, #32]
 8008eb2:	b90b      	cbnz	r3, 8008eb8 <__swbuf_r+0x12>
 8008eb4:	f7ff feec 	bl	8008c90 <__sinit>
 8008eb8:	69a3      	ldr	r3, [r4, #24]
 8008eba:	60a3      	str	r3, [r4, #8]
 8008ebc:	89a3      	ldrh	r3, [r4, #12]
 8008ebe:	071a      	lsls	r2, r3, #28
 8008ec0:	d501      	bpl.n	8008ec6 <__swbuf_r+0x20>
 8008ec2:	6923      	ldr	r3, [r4, #16]
 8008ec4:	b943      	cbnz	r3, 8008ed8 <__swbuf_r+0x32>
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	4628      	mov	r0, r5
 8008eca:	f000 f82b 	bl	8008f24 <__swsetup_r>
 8008ece:	b118      	cbz	r0, 8008ed8 <__swbuf_r+0x32>
 8008ed0:	f04f 37ff 	mov.w	r7, #4294967295
 8008ed4:	4638      	mov	r0, r7
 8008ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ed8:	6823      	ldr	r3, [r4, #0]
 8008eda:	6922      	ldr	r2, [r4, #16]
 8008edc:	1a98      	subs	r0, r3, r2
 8008ede:	6963      	ldr	r3, [r4, #20]
 8008ee0:	b2f6      	uxtb	r6, r6
 8008ee2:	4283      	cmp	r3, r0
 8008ee4:	4637      	mov	r7, r6
 8008ee6:	dc05      	bgt.n	8008ef4 <__swbuf_r+0x4e>
 8008ee8:	4621      	mov	r1, r4
 8008eea:	4628      	mov	r0, r5
 8008eec:	f000 ff1e 	bl	8009d2c <_fflush_r>
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d1ed      	bne.n	8008ed0 <__swbuf_r+0x2a>
 8008ef4:	68a3      	ldr	r3, [r4, #8]
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	60a3      	str	r3, [r4, #8]
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	1c5a      	adds	r2, r3, #1
 8008efe:	6022      	str	r2, [r4, #0]
 8008f00:	701e      	strb	r6, [r3, #0]
 8008f02:	6962      	ldr	r2, [r4, #20]
 8008f04:	1c43      	adds	r3, r0, #1
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d004      	beq.n	8008f14 <__swbuf_r+0x6e>
 8008f0a:	89a3      	ldrh	r3, [r4, #12]
 8008f0c:	07db      	lsls	r3, r3, #31
 8008f0e:	d5e1      	bpl.n	8008ed4 <__swbuf_r+0x2e>
 8008f10:	2e0a      	cmp	r6, #10
 8008f12:	d1df      	bne.n	8008ed4 <__swbuf_r+0x2e>
 8008f14:	4621      	mov	r1, r4
 8008f16:	4628      	mov	r0, r5
 8008f18:	f000 ff08 	bl	8009d2c <_fflush_r>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	d0d9      	beq.n	8008ed4 <__swbuf_r+0x2e>
 8008f20:	e7d6      	b.n	8008ed0 <__swbuf_r+0x2a>
	...

08008f24 <__swsetup_r>:
 8008f24:	b538      	push	{r3, r4, r5, lr}
 8008f26:	4b29      	ldr	r3, [pc, #164]	@ (8008fcc <__swsetup_r+0xa8>)
 8008f28:	4605      	mov	r5, r0
 8008f2a:	6818      	ldr	r0, [r3, #0]
 8008f2c:	460c      	mov	r4, r1
 8008f2e:	b118      	cbz	r0, 8008f38 <__swsetup_r+0x14>
 8008f30:	6a03      	ldr	r3, [r0, #32]
 8008f32:	b90b      	cbnz	r3, 8008f38 <__swsetup_r+0x14>
 8008f34:	f7ff feac 	bl	8008c90 <__sinit>
 8008f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f3c:	0719      	lsls	r1, r3, #28
 8008f3e:	d422      	bmi.n	8008f86 <__swsetup_r+0x62>
 8008f40:	06da      	lsls	r2, r3, #27
 8008f42:	d407      	bmi.n	8008f54 <__swsetup_r+0x30>
 8008f44:	2209      	movs	r2, #9
 8008f46:	602a      	str	r2, [r5, #0]
 8008f48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f4c:	81a3      	strh	r3, [r4, #12]
 8008f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f52:	e033      	b.n	8008fbc <__swsetup_r+0x98>
 8008f54:	0758      	lsls	r0, r3, #29
 8008f56:	d512      	bpl.n	8008f7e <__swsetup_r+0x5a>
 8008f58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f5a:	b141      	cbz	r1, 8008f6e <__swsetup_r+0x4a>
 8008f5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f60:	4299      	cmp	r1, r3
 8008f62:	d002      	beq.n	8008f6a <__swsetup_r+0x46>
 8008f64:	4628      	mov	r0, r5
 8008f66:	f000 f937 	bl	80091d8 <_free_r>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f6e:	89a3      	ldrh	r3, [r4, #12]
 8008f70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f74:	81a3      	strh	r3, [r4, #12]
 8008f76:	2300      	movs	r3, #0
 8008f78:	6063      	str	r3, [r4, #4]
 8008f7a:	6923      	ldr	r3, [r4, #16]
 8008f7c:	6023      	str	r3, [r4, #0]
 8008f7e:	89a3      	ldrh	r3, [r4, #12]
 8008f80:	f043 0308 	orr.w	r3, r3, #8
 8008f84:	81a3      	strh	r3, [r4, #12]
 8008f86:	6923      	ldr	r3, [r4, #16]
 8008f88:	b94b      	cbnz	r3, 8008f9e <__swsetup_r+0x7a>
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f94:	d003      	beq.n	8008f9e <__swsetup_r+0x7a>
 8008f96:	4621      	mov	r1, r4
 8008f98:	4628      	mov	r0, r5
 8008f9a:	f000 ff27 	bl	8009dec <__smakebuf_r>
 8008f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fa2:	f013 0201 	ands.w	r2, r3, #1
 8008fa6:	d00a      	beq.n	8008fbe <__swsetup_r+0x9a>
 8008fa8:	2200      	movs	r2, #0
 8008faa:	60a2      	str	r2, [r4, #8]
 8008fac:	6962      	ldr	r2, [r4, #20]
 8008fae:	4252      	negs	r2, r2
 8008fb0:	61a2      	str	r2, [r4, #24]
 8008fb2:	6922      	ldr	r2, [r4, #16]
 8008fb4:	b942      	cbnz	r2, 8008fc8 <__swsetup_r+0xa4>
 8008fb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008fba:	d1c5      	bne.n	8008f48 <__swsetup_r+0x24>
 8008fbc:	bd38      	pop	{r3, r4, r5, pc}
 8008fbe:	0799      	lsls	r1, r3, #30
 8008fc0:	bf58      	it	pl
 8008fc2:	6962      	ldrpl	r2, [r4, #20]
 8008fc4:	60a2      	str	r2, [r4, #8]
 8008fc6:	e7f4      	b.n	8008fb2 <__swsetup_r+0x8e>
 8008fc8:	2000      	movs	r0, #0
 8008fca:	e7f7      	b.n	8008fbc <__swsetup_r+0x98>
 8008fcc:	20000044 	.word	0x20000044

08008fd0 <memset>:
 8008fd0:	4402      	add	r2, r0
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d100      	bne.n	8008fda <memset+0xa>
 8008fd8:	4770      	bx	lr
 8008fda:	f803 1b01 	strb.w	r1, [r3], #1
 8008fde:	e7f9      	b.n	8008fd4 <memset+0x4>

08008fe0 <strtok>:
 8008fe0:	4b16      	ldr	r3, [pc, #88]	@ (800903c <strtok+0x5c>)
 8008fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe6:	681f      	ldr	r7, [r3, #0]
 8008fe8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008fea:	4605      	mov	r5, r0
 8008fec:	460e      	mov	r6, r1
 8008fee:	b9ec      	cbnz	r4, 800902c <strtok+0x4c>
 8008ff0:	2050      	movs	r0, #80	@ 0x50
 8008ff2:	f000 f93b 	bl	800926c <malloc>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	6478      	str	r0, [r7, #68]	@ 0x44
 8008ffa:	b920      	cbnz	r0, 8009006 <strtok+0x26>
 8008ffc:	4b10      	ldr	r3, [pc, #64]	@ (8009040 <strtok+0x60>)
 8008ffe:	4811      	ldr	r0, [pc, #68]	@ (8009044 <strtok+0x64>)
 8009000:	215b      	movs	r1, #91	@ 0x5b
 8009002:	f000 f8cb 	bl	800919c <__assert_func>
 8009006:	e9c0 4400 	strd	r4, r4, [r0]
 800900a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800900e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009012:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009016:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800901a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800901e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009022:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009026:	6184      	str	r4, [r0, #24]
 8009028:	7704      	strb	r4, [r0, #28]
 800902a:	6244      	str	r4, [r0, #36]	@ 0x24
 800902c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800902e:	4631      	mov	r1, r6
 8009030:	4628      	mov	r0, r5
 8009032:	2301      	movs	r3, #1
 8009034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009038:	f000 b806 	b.w	8009048 <__strtok_r>
 800903c:	20000044 	.word	0x20000044
 8009040:	0800c985 	.word	0x0800c985
 8009044:	0800c99c 	.word	0x0800c99c

08009048 <__strtok_r>:
 8009048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800904a:	4604      	mov	r4, r0
 800904c:	b908      	cbnz	r0, 8009052 <__strtok_r+0xa>
 800904e:	6814      	ldr	r4, [r2, #0]
 8009050:	b144      	cbz	r4, 8009064 <__strtok_r+0x1c>
 8009052:	4620      	mov	r0, r4
 8009054:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009058:	460f      	mov	r7, r1
 800905a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800905e:	b91e      	cbnz	r6, 8009068 <__strtok_r+0x20>
 8009060:	b965      	cbnz	r5, 800907c <__strtok_r+0x34>
 8009062:	6015      	str	r5, [r2, #0]
 8009064:	2000      	movs	r0, #0
 8009066:	e005      	b.n	8009074 <__strtok_r+0x2c>
 8009068:	42b5      	cmp	r5, r6
 800906a:	d1f6      	bne.n	800905a <__strtok_r+0x12>
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1f0      	bne.n	8009052 <__strtok_r+0xa>
 8009070:	6014      	str	r4, [r2, #0]
 8009072:	7003      	strb	r3, [r0, #0]
 8009074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009076:	461c      	mov	r4, r3
 8009078:	e00c      	b.n	8009094 <__strtok_r+0x4c>
 800907a:	b91d      	cbnz	r5, 8009084 <__strtok_r+0x3c>
 800907c:	4627      	mov	r7, r4
 800907e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009082:	460e      	mov	r6, r1
 8009084:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009088:	42ab      	cmp	r3, r5
 800908a:	d1f6      	bne.n	800907a <__strtok_r+0x32>
 800908c:	2b00      	cmp	r3, #0
 800908e:	d0f2      	beq.n	8009076 <__strtok_r+0x2e>
 8009090:	2300      	movs	r3, #0
 8009092:	703b      	strb	r3, [r7, #0]
 8009094:	6014      	str	r4, [r2, #0]
 8009096:	e7ed      	b.n	8009074 <__strtok_r+0x2c>

08009098 <_close_r>:
 8009098:	b538      	push	{r3, r4, r5, lr}
 800909a:	4d06      	ldr	r5, [pc, #24]	@ (80090b4 <_close_r+0x1c>)
 800909c:	2300      	movs	r3, #0
 800909e:	4604      	mov	r4, r0
 80090a0:	4608      	mov	r0, r1
 80090a2:	602b      	str	r3, [r5, #0]
 80090a4:	f7fa fe6c 	bl	8003d80 <_close>
 80090a8:	1c43      	adds	r3, r0, #1
 80090aa:	d102      	bne.n	80090b2 <_close_r+0x1a>
 80090ac:	682b      	ldr	r3, [r5, #0]
 80090ae:	b103      	cbz	r3, 80090b2 <_close_r+0x1a>
 80090b0:	6023      	str	r3, [r4, #0]
 80090b2:	bd38      	pop	{r3, r4, r5, pc}
 80090b4:	200006a4 	.word	0x200006a4

080090b8 <_lseek_r>:
 80090b8:	b538      	push	{r3, r4, r5, lr}
 80090ba:	4d07      	ldr	r5, [pc, #28]	@ (80090d8 <_lseek_r+0x20>)
 80090bc:	4604      	mov	r4, r0
 80090be:	4608      	mov	r0, r1
 80090c0:	4611      	mov	r1, r2
 80090c2:	2200      	movs	r2, #0
 80090c4:	602a      	str	r2, [r5, #0]
 80090c6:	461a      	mov	r2, r3
 80090c8:	f7fa fe81 	bl	8003dce <_lseek>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	d102      	bne.n	80090d6 <_lseek_r+0x1e>
 80090d0:	682b      	ldr	r3, [r5, #0]
 80090d2:	b103      	cbz	r3, 80090d6 <_lseek_r+0x1e>
 80090d4:	6023      	str	r3, [r4, #0]
 80090d6:	bd38      	pop	{r3, r4, r5, pc}
 80090d8:	200006a4 	.word	0x200006a4

080090dc <_read_r>:
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	4d07      	ldr	r5, [pc, #28]	@ (80090fc <_read_r+0x20>)
 80090e0:	4604      	mov	r4, r0
 80090e2:	4608      	mov	r0, r1
 80090e4:	4611      	mov	r1, r2
 80090e6:	2200      	movs	r2, #0
 80090e8:	602a      	str	r2, [r5, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	f7fa fe0f 	bl	8003d0e <_read>
 80090f0:	1c43      	adds	r3, r0, #1
 80090f2:	d102      	bne.n	80090fa <_read_r+0x1e>
 80090f4:	682b      	ldr	r3, [r5, #0]
 80090f6:	b103      	cbz	r3, 80090fa <_read_r+0x1e>
 80090f8:	6023      	str	r3, [r4, #0]
 80090fa:	bd38      	pop	{r3, r4, r5, pc}
 80090fc:	200006a4 	.word	0x200006a4

08009100 <_write_r>:
 8009100:	b538      	push	{r3, r4, r5, lr}
 8009102:	4d07      	ldr	r5, [pc, #28]	@ (8009120 <_write_r+0x20>)
 8009104:	4604      	mov	r4, r0
 8009106:	4608      	mov	r0, r1
 8009108:	4611      	mov	r1, r2
 800910a:	2200      	movs	r2, #0
 800910c:	602a      	str	r2, [r5, #0]
 800910e:	461a      	mov	r2, r3
 8009110:	f7fa fe1a 	bl	8003d48 <_write>
 8009114:	1c43      	adds	r3, r0, #1
 8009116:	d102      	bne.n	800911e <_write_r+0x1e>
 8009118:	682b      	ldr	r3, [r5, #0]
 800911a:	b103      	cbz	r3, 800911e <_write_r+0x1e>
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	bd38      	pop	{r3, r4, r5, pc}
 8009120:	200006a4 	.word	0x200006a4

08009124 <__errno>:
 8009124:	4b01      	ldr	r3, [pc, #4]	@ (800912c <__errno+0x8>)
 8009126:	6818      	ldr	r0, [r3, #0]
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	20000044 	.word	0x20000044

08009130 <__libc_init_array>:
 8009130:	b570      	push	{r4, r5, r6, lr}
 8009132:	4d0d      	ldr	r5, [pc, #52]	@ (8009168 <__libc_init_array+0x38>)
 8009134:	4c0d      	ldr	r4, [pc, #52]	@ (800916c <__libc_init_array+0x3c>)
 8009136:	1b64      	subs	r4, r4, r5
 8009138:	10a4      	asrs	r4, r4, #2
 800913a:	2600      	movs	r6, #0
 800913c:	42a6      	cmp	r6, r4
 800913e:	d109      	bne.n	8009154 <__libc_init_array+0x24>
 8009140:	4d0b      	ldr	r5, [pc, #44]	@ (8009170 <__libc_init_array+0x40>)
 8009142:	4c0c      	ldr	r4, [pc, #48]	@ (8009174 <__libc_init_array+0x44>)
 8009144:	f003 fa74 	bl	800c630 <_init>
 8009148:	1b64      	subs	r4, r4, r5
 800914a:	10a4      	asrs	r4, r4, #2
 800914c:	2600      	movs	r6, #0
 800914e:	42a6      	cmp	r6, r4
 8009150:	d105      	bne.n	800915e <__libc_init_array+0x2e>
 8009152:	bd70      	pop	{r4, r5, r6, pc}
 8009154:	f855 3b04 	ldr.w	r3, [r5], #4
 8009158:	4798      	blx	r3
 800915a:	3601      	adds	r6, #1
 800915c:	e7ee      	b.n	800913c <__libc_init_array+0xc>
 800915e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009162:	4798      	blx	r3
 8009164:	3601      	adds	r6, #1
 8009166:	e7f2      	b.n	800914e <__libc_init_array+0x1e>
 8009168:	0800cd08 	.word	0x0800cd08
 800916c:	0800cd08 	.word	0x0800cd08
 8009170:	0800cd08 	.word	0x0800cd08
 8009174:	0800cd0c 	.word	0x0800cd0c

08009178 <__retarget_lock_init_recursive>:
 8009178:	4770      	bx	lr

0800917a <__retarget_lock_acquire_recursive>:
 800917a:	4770      	bx	lr

0800917c <__retarget_lock_release_recursive>:
 800917c:	4770      	bx	lr

0800917e <memcpy>:
 800917e:	440a      	add	r2, r1
 8009180:	4291      	cmp	r1, r2
 8009182:	f100 33ff 	add.w	r3, r0, #4294967295
 8009186:	d100      	bne.n	800918a <memcpy+0xc>
 8009188:	4770      	bx	lr
 800918a:	b510      	push	{r4, lr}
 800918c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009190:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009194:	4291      	cmp	r1, r2
 8009196:	d1f9      	bne.n	800918c <memcpy+0xe>
 8009198:	bd10      	pop	{r4, pc}
	...

0800919c <__assert_func>:
 800919c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800919e:	4614      	mov	r4, r2
 80091a0:	461a      	mov	r2, r3
 80091a2:	4b09      	ldr	r3, [pc, #36]	@ (80091c8 <__assert_func+0x2c>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4605      	mov	r5, r0
 80091a8:	68d8      	ldr	r0, [r3, #12]
 80091aa:	b14c      	cbz	r4, 80091c0 <__assert_func+0x24>
 80091ac:	4b07      	ldr	r3, [pc, #28]	@ (80091cc <__assert_func+0x30>)
 80091ae:	9100      	str	r1, [sp, #0]
 80091b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091b4:	4906      	ldr	r1, [pc, #24]	@ (80091d0 <__assert_func+0x34>)
 80091b6:	462b      	mov	r3, r5
 80091b8:	f000 fde0 	bl	8009d7c <fiprintf>
 80091bc:	f000 fe9e 	bl	8009efc <abort>
 80091c0:	4b04      	ldr	r3, [pc, #16]	@ (80091d4 <__assert_func+0x38>)
 80091c2:	461c      	mov	r4, r3
 80091c4:	e7f3      	b.n	80091ae <__assert_func+0x12>
 80091c6:	bf00      	nop
 80091c8:	20000044 	.word	0x20000044
 80091cc:	0800c9f6 	.word	0x0800c9f6
 80091d0:	0800ca03 	.word	0x0800ca03
 80091d4:	0800ca31 	.word	0x0800ca31

080091d8 <_free_r>:
 80091d8:	b538      	push	{r3, r4, r5, lr}
 80091da:	4605      	mov	r5, r0
 80091dc:	2900      	cmp	r1, #0
 80091de:	d041      	beq.n	8009264 <_free_r+0x8c>
 80091e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091e4:	1f0c      	subs	r4, r1, #4
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	bfb8      	it	lt
 80091ea:	18e4      	addlt	r4, r4, r3
 80091ec:	f000 f8e8 	bl	80093c0 <__malloc_lock>
 80091f0:	4a1d      	ldr	r2, [pc, #116]	@ (8009268 <_free_r+0x90>)
 80091f2:	6813      	ldr	r3, [r2, #0]
 80091f4:	b933      	cbnz	r3, 8009204 <_free_r+0x2c>
 80091f6:	6063      	str	r3, [r4, #4]
 80091f8:	6014      	str	r4, [r2, #0]
 80091fa:	4628      	mov	r0, r5
 80091fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009200:	f000 b8e4 	b.w	80093cc <__malloc_unlock>
 8009204:	42a3      	cmp	r3, r4
 8009206:	d908      	bls.n	800921a <_free_r+0x42>
 8009208:	6820      	ldr	r0, [r4, #0]
 800920a:	1821      	adds	r1, r4, r0
 800920c:	428b      	cmp	r3, r1
 800920e:	bf01      	itttt	eq
 8009210:	6819      	ldreq	r1, [r3, #0]
 8009212:	685b      	ldreq	r3, [r3, #4]
 8009214:	1809      	addeq	r1, r1, r0
 8009216:	6021      	streq	r1, [r4, #0]
 8009218:	e7ed      	b.n	80091f6 <_free_r+0x1e>
 800921a:	461a      	mov	r2, r3
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	b10b      	cbz	r3, 8009224 <_free_r+0x4c>
 8009220:	42a3      	cmp	r3, r4
 8009222:	d9fa      	bls.n	800921a <_free_r+0x42>
 8009224:	6811      	ldr	r1, [r2, #0]
 8009226:	1850      	adds	r0, r2, r1
 8009228:	42a0      	cmp	r0, r4
 800922a:	d10b      	bne.n	8009244 <_free_r+0x6c>
 800922c:	6820      	ldr	r0, [r4, #0]
 800922e:	4401      	add	r1, r0
 8009230:	1850      	adds	r0, r2, r1
 8009232:	4283      	cmp	r3, r0
 8009234:	6011      	str	r1, [r2, #0]
 8009236:	d1e0      	bne.n	80091fa <_free_r+0x22>
 8009238:	6818      	ldr	r0, [r3, #0]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	6053      	str	r3, [r2, #4]
 800923e:	4408      	add	r0, r1
 8009240:	6010      	str	r0, [r2, #0]
 8009242:	e7da      	b.n	80091fa <_free_r+0x22>
 8009244:	d902      	bls.n	800924c <_free_r+0x74>
 8009246:	230c      	movs	r3, #12
 8009248:	602b      	str	r3, [r5, #0]
 800924a:	e7d6      	b.n	80091fa <_free_r+0x22>
 800924c:	6820      	ldr	r0, [r4, #0]
 800924e:	1821      	adds	r1, r4, r0
 8009250:	428b      	cmp	r3, r1
 8009252:	bf04      	itt	eq
 8009254:	6819      	ldreq	r1, [r3, #0]
 8009256:	685b      	ldreq	r3, [r3, #4]
 8009258:	6063      	str	r3, [r4, #4]
 800925a:	bf04      	itt	eq
 800925c:	1809      	addeq	r1, r1, r0
 800925e:	6021      	streq	r1, [r4, #0]
 8009260:	6054      	str	r4, [r2, #4]
 8009262:	e7ca      	b.n	80091fa <_free_r+0x22>
 8009264:	bd38      	pop	{r3, r4, r5, pc}
 8009266:	bf00      	nop
 8009268:	200006b0 	.word	0x200006b0

0800926c <malloc>:
 800926c:	4b02      	ldr	r3, [pc, #8]	@ (8009278 <malloc+0xc>)
 800926e:	4601      	mov	r1, r0
 8009270:	6818      	ldr	r0, [r3, #0]
 8009272:	f000 b825 	b.w	80092c0 <_malloc_r>
 8009276:	bf00      	nop
 8009278:	20000044 	.word	0x20000044

0800927c <sbrk_aligned>:
 800927c:	b570      	push	{r4, r5, r6, lr}
 800927e:	4e0f      	ldr	r6, [pc, #60]	@ (80092bc <sbrk_aligned+0x40>)
 8009280:	460c      	mov	r4, r1
 8009282:	6831      	ldr	r1, [r6, #0]
 8009284:	4605      	mov	r5, r0
 8009286:	b911      	cbnz	r1, 800928e <sbrk_aligned+0x12>
 8009288:	f000 fe28 	bl	8009edc <_sbrk_r>
 800928c:	6030      	str	r0, [r6, #0]
 800928e:	4621      	mov	r1, r4
 8009290:	4628      	mov	r0, r5
 8009292:	f000 fe23 	bl	8009edc <_sbrk_r>
 8009296:	1c43      	adds	r3, r0, #1
 8009298:	d103      	bne.n	80092a2 <sbrk_aligned+0x26>
 800929a:	f04f 34ff 	mov.w	r4, #4294967295
 800929e:	4620      	mov	r0, r4
 80092a0:	bd70      	pop	{r4, r5, r6, pc}
 80092a2:	1cc4      	adds	r4, r0, #3
 80092a4:	f024 0403 	bic.w	r4, r4, #3
 80092a8:	42a0      	cmp	r0, r4
 80092aa:	d0f8      	beq.n	800929e <sbrk_aligned+0x22>
 80092ac:	1a21      	subs	r1, r4, r0
 80092ae:	4628      	mov	r0, r5
 80092b0:	f000 fe14 	bl	8009edc <_sbrk_r>
 80092b4:	3001      	adds	r0, #1
 80092b6:	d1f2      	bne.n	800929e <sbrk_aligned+0x22>
 80092b8:	e7ef      	b.n	800929a <sbrk_aligned+0x1e>
 80092ba:	bf00      	nop
 80092bc:	200006ac 	.word	0x200006ac

080092c0 <_malloc_r>:
 80092c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092c4:	1ccd      	adds	r5, r1, #3
 80092c6:	f025 0503 	bic.w	r5, r5, #3
 80092ca:	3508      	adds	r5, #8
 80092cc:	2d0c      	cmp	r5, #12
 80092ce:	bf38      	it	cc
 80092d0:	250c      	movcc	r5, #12
 80092d2:	2d00      	cmp	r5, #0
 80092d4:	4606      	mov	r6, r0
 80092d6:	db01      	blt.n	80092dc <_malloc_r+0x1c>
 80092d8:	42a9      	cmp	r1, r5
 80092da:	d904      	bls.n	80092e6 <_malloc_r+0x26>
 80092dc:	230c      	movs	r3, #12
 80092de:	6033      	str	r3, [r6, #0]
 80092e0:	2000      	movs	r0, #0
 80092e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80093bc <_malloc_r+0xfc>
 80092ea:	f000 f869 	bl	80093c0 <__malloc_lock>
 80092ee:	f8d8 3000 	ldr.w	r3, [r8]
 80092f2:	461c      	mov	r4, r3
 80092f4:	bb44      	cbnz	r4, 8009348 <_malloc_r+0x88>
 80092f6:	4629      	mov	r1, r5
 80092f8:	4630      	mov	r0, r6
 80092fa:	f7ff ffbf 	bl	800927c <sbrk_aligned>
 80092fe:	1c43      	adds	r3, r0, #1
 8009300:	4604      	mov	r4, r0
 8009302:	d158      	bne.n	80093b6 <_malloc_r+0xf6>
 8009304:	f8d8 4000 	ldr.w	r4, [r8]
 8009308:	4627      	mov	r7, r4
 800930a:	2f00      	cmp	r7, #0
 800930c:	d143      	bne.n	8009396 <_malloc_r+0xd6>
 800930e:	2c00      	cmp	r4, #0
 8009310:	d04b      	beq.n	80093aa <_malloc_r+0xea>
 8009312:	6823      	ldr	r3, [r4, #0]
 8009314:	4639      	mov	r1, r7
 8009316:	4630      	mov	r0, r6
 8009318:	eb04 0903 	add.w	r9, r4, r3
 800931c:	f000 fdde 	bl	8009edc <_sbrk_r>
 8009320:	4581      	cmp	r9, r0
 8009322:	d142      	bne.n	80093aa <_malloc_r+0xea>
 8009324:	6821      	ldr	r1, [r4, #0]
 8009326:	1a6d      	subs	r5, r5, r1
 8009328:	4629      	mov	r1, r5
 800932a:	4630      	mov	r0, r6
 800932c:	f7ff ffa6 	bl	800927c <sbrk_aligned>
 8009330:	3001      	adds	r0, #1
 8009332:	d03a      	beq.n	80093aa <_malloc_r+0xea>
 8009334:	6823      	ldr	r3, [r4, #0]
 8009336:	442b      	add	r3, r5
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	f8d8 3000 	ldr.w	r3, [r8]
 800933e:	685a      	ldr	r2, [r3, #4]
 8009340:	bb62      	cbnz	r2, 800939c <_malloc_r+0xdc>
 8009342:	f8c8 7000 	str.w	r7, [r8]
 8009346:	e00f      	b.n	8009368 <_malloc_r+0xa8>
 8009348:	6822      	ldr	r2, [r4, #0]
 800934a:	1b52      	subs	r2, r2, r5
 800934c:	d420      	bmi.n	8009390 <_malloc_r+0xd0>
 800934e:	2a0b      	cmp	r2, #11
 8009350:	d917      	bls.n	8009382 <_malloc_r+0xc2>
 8009352:	1961      	adds	r1, r4, r5
 8009354:	42a3      	cmp	r3, r4
 8009356:	6025      	str	r5, [r4, #0]
 8009358:	bf18      	it	ne
 800935a:	6059      	strne	r1, [r3, #4]
 800935c:	6863      	ldr	r3, [r4, #4]
 800935e:	bf08      	it	eq
 8009360:	f8c8 1000 	streq.w	r1, [r8]
 8009364:	5162      	str	r2, [r4, r5]
 8009366:	604b      	str	r3, [r1, #4]
 8009368:	4630      	mov	r0, r6
 800936a:	f000 f82f 	bl	80093cc <__malloc_unlock>
 800936e:	f104 000b 	add.w	r0, r4, #11
 8009372:	1d23      	adds	r3, r4, #4
 8009374:	f020 0007 	bic.w	r0, r0, #7
 8009378:	1ac2      	subs	r2, r0, r3
 800937a:	bf1c      	itt	ne
 800937c:	1a1b      	subne	r3, r3, r0
 800937e:	50a3      	strne	r3, [r4, r2]
 8009380:	e7af      	b.n	80092e2 <_malloc_r+0x22>
 8009382:	6862      	ldr	r2, [r4, #4]
 8009384:	42a3      	cmp	r3, r4
 8009386:	bf0c      	ite	eq
 8009388:	f8c8 2000 	streq.w	r2, [r8]
 800938c:	605a      	strne	r2, [r3, #4]
 800938e:	e7eb      	b.n	8009368 <_malloc_r+0xa8>
 8009390:	4623      	mov	r3, r4
 8009392:	6864      	ldr	r4, [r4, #4]
 8009394:	e7ae      	b.n	80092f4 <_malloc_r+0x34>
 8009396:	463c      	mov	r4, r7
 8009398:	687f      	ldr	r7, [r7, #4]
 800939a:	e7b6      	b.n	800930a <_malloc_r+0x4a>
 800939c:	461a      	mov	r2, r3
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	42a3      	cmp	r3, r4
 80093a2:	d1fb      	bne.n	800939c <_malloc_r+0xdc>
 80093a4:	2300      	movs	r3, #0
 80093a6:	6053      	str	r3, [r2, #4]
 80093a8:	e7de      	b.n	8009368 <_malloc_r+0xa8>
 80093aa:	230c      	movs	r3, #12
 80093ac:	6033      	str	r3, [r6, #0]
 80093ae:	4630      	mov	r0, r6
 80093b0:	f000 f80c 	bl	80093cc <__malloc_unlock>
 80093b4:	e794      	b.n	80092e0 <_malloc_r+0x20>
 80093b6:	6005      	str	r5, [r0, #0]
 80093b8:	e7d6      	b.n	8009368 <_malloc_r+0xa8>
 80093ba:	bf00      	nop
 80093bc:	200006b0 	.word	0x200006b0

080093c0 <__malloc_lock>:
 80093c0:	4801      	ldr	r0, [pc, #4]	@ (80093c8 <__malloc_lock+0x8>)
 80093c2:	f7ff beda 	b.w	800917a <__retarget_lock_acquire_recursive>
 80093c6:	bf00      	nop
 80093c8:	200006a8 	.word	0x200006a8

080093cc <__malloc_unlock>:
 80093cc:	4801      	ldr	r0, [pc, #4]	@ (80093d4 <__malloc_unlock+0x8>)
 80093ce:	f7ff bed5 	b.w	800917c <__retarget_lock_release_recursive>
 80093d2:	bf00      	nop
 80093d4:	200006a8 	.word	0x200006a8

080093d8 <__ssputs_r>:
 80093d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093dc:	688e      	ldr	r6, [r1, #8]
 80093de:	461f      	mov	r7, r3
 80093e0:	42be      	cmp	r6, r7
 80093e2:	680b      	ldr	r3, [r1, #0]
 80093e4:	4682      	mov	sl, r0
 80093e6:	460c      	mov	r4, r1
 80093e8:	4690      	mov	r8, r2
 80093ea:	d82d      	bhi.n	8009448 <__ssputs_r+0x70>
 80093ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80093f4:	d026      	beq.n	8009444 <__ssputs_r+0x6c>
 80093f6:	6965      	ldr	r5, [r4, #20]
 80093f8:	6909      	ldr	r1, [r1, #16]
 80093fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093fe:	eba3 0901 	sub.w	r9, r3, r1
 8009402:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009406:	1c7b      	adds	r3, r7, #1
 8009408:	444b      	add	r3, r9
 800940a:	106d      	asrs	r5, r5, #1
 800940c:	429d      	cmp	r5, r3
 800940e:	bf38      	it	cc
 8009410:	461d      	movcc	r5, r3
 8009412:	0553      	lsls	r3, r2, #21
 8009414:	d527      	bpl.n	8009466 <__ssputs_r+0x8e>
 8009416:	4629      	mov	r1, r5
 8009418:	f7ff ff52 	bl	80092c0 <_malloc_r>
 800941c:	4606      	mov	r6, r0
 800941e:	b360      	cbz	r0, 800947a <__ssputs_r+0xa2>
 8009420:	6921      	ldr	r1, [r4, #16]
 8009422:	464a      	mov	r2, r9
 8009424:	f7ff feab 	bl	800917e <memcpy>
 8009428:	89a3      	ldrh	r3, [r4, #12]
 800942a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800942e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009432:	81a3      	strh	r3, [r4, #12]
 8009434:	6126      	str	r6, [r4, #16]
 8009436:	6165      	str	r5, [r4, #20]
 8009438:	444e      	add	r6, r9
 800943a:	eba5 0509 	sub.w	r5, r5, r9
 800943e:	6026      	str	r6, [r4, #0]
 8009440:	60a5      	str	r5, [r4, #8]
 8009442:	463e      	mov	r6, r7
 8009444:	42be      	cmp	r6, r7
 8009446:	d900      	bls.n	800944a <__ssputs_r+0x72>
 8009448:	463e      	mov	r6, r7
 800944a:	6820      	ldr	r0, [r4, #0]
 800944c:	4632      	mov	r2, r6
 800944e:	4641      	mov	r1, r8
 8009450:	f000 fd08 	bl	8009e64 <memmove>
 8009454:	68a3      	ldr	r3, [r4, #8]
 8009456:	1b9b      	subs	r3, r3, r6
 8009458:	60a3      	str	r3, [r4, #8]
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	4433      	add	r3, r6
 800945e:	6023      	str	r3, [r4, #0]
 8009460:	2000      	movs	r0, #0
 8009462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009466:	462a      	mov	r2, r5
 8009468:	f000 fd4f 	bl	8009f0a <_realloc_r>
 800946c:	4606      	mov	r6, r0
 800946e:	2800      	cmp	r0, #0
 8009470:	d1e0      	bne.n	8009434 <__ssputs_r+0x5c>
 8009472:	6921      	ldr	r1, [r4, #16]
 8009474:	4650      	mov	r0, sl
 8009476:	f7ff feaf 	bl	80091d8 <_free_r>
 800947a:	230c      	movs	r3, #12
 800947c:	f8ca 3000 	str.w	r3, [sl]
 8009480:	89a3      	ldrh	r3, [r4, #12]
 8009482:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009486:	81a3      	strh	r3, [r4, #12]
 8009488:	f04f 30ff 	mov.w	r0, #4294967295
 800948c:	e7e9      	b.n	8009462 <__ssputs_r+0x8a>
	...

08009490 <_svfiprintf_r>:
 8009490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009494:	4698      	mov	r8, r3
 8009496:	898b      	ldrh	r3, [r1, #12]
 8009498:	061b      	lsls	r3, r3, #24
 800949a:	b09d      	sub	sp, #116	@ 0x74
 800949c:	4607      	mov	r7, r0
 800949e:	460d      	mov	r5, r1
 80094a0:	4614      	mov	r4, r2
 80094a2:	d510      	bpl.n	80094c6 <_svfiprintf_r+0x36>
 80094a4:	690b      	ldr	r3, [r1, #16]
 80094a6:	b973      	cbnz	r3, 80094c6 <_svfiprintf_r+0x36>
 80094a8:	2140      	movs	r1, #64	@ 0x40
 80094aa:	f7ff ff09 	bl	80092c0 <_malloc_r>
 80094ae:	6028      	str	r0, [r5, #0]
 80094b0:	6128      	str	r0, [r5, #16]
 80094b2:	b930      	cbnz	r0, 80094c2 <_svfiprintf_r+0x32>
 80094b4:	230c      	movs	r3, #12
 80094b6:	603b      	str	r3, [r7, #0]
 80094b8:	f04f 30ff 	mov.w	r0, #4294967295
 80094bc:	b01d      	add	sp, #116	@ 0x74
 80094be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c2:	2340      	movs	r3, #64	@ 0x40
 80094c4:	616b      	str	r3, [r5, #20]
 80094c6:	2300      	movs	r3, #0
 80094c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80094ca:	2320      	movs	r3, #32
 80094cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80094d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80094d4:	2330      	movs	r3, #48	@ 0x30
 80094d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009674 <_svfiprintf_r+0x1e4>
 80094da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80094de:	f04f 0901 	mov.w	r9, #1
 80094e2:	4623      	mov	r3, r4
 80094e4:	469a      	mov	sl, r3
 80094e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094ea:	b10a      	cbz	r2, 80094f0 <_svfiprintf_r+0x60>
 80094ec:	2a25      	cmp	r2, #37	@ 0x25
 80094ee:	d1f9      	bne.n	80094e4 <_svfiprintf_r+0x54>
 80094f0:	ebba 0b04 	subs.w	fp, sl, r4
 80094f4:	d00b      	beq.n	800950e <_svfiprintf_r+0x7e>
 80094f6:	465b      	mov	r3, fp
 80094f8:	4622      	mov	r2, r4
 80094fa:	4629      	mov	r1, r5
 80094fc:	4638      	mov	r0, r7
 80094fe:	f7ff ff6b 	bl	80093d8 <__ssputs_r>
 8009502:	3001      	adds	r0, #1
 8009504:	f000 80a7 	beq.w	8009656 <_svfiprintf_r+0x1c6>
 8009508:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800950a:	445a      	add	r2, fp
 800950c:	9209      	str	r2, [sp, #36]	@ 0x24
 800950e:	f89a 3000 	ldrb.w	r3, [sl]
 8009512:	2b00      	cmp	r3, #0
 8009514:	f000 809f 	beq.w	8009656 <_svfiprintf_r+0x1c6>
 8009518:	2300      	movs	r3, #0
 800951a:	f04f 32ff 	mov.w	r2, #4294967295
 800951e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009522:	f10a 0a01 	add.w	sl, sl, #1
 8009526:	9304      	str	r3, [sp, #16]
 8009528:	9307      	str	r3, [sp, #28]
 800952a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800952e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009530:	4654      	mov	r4, sl
 8009532:	2205      	movs	r2, #5
 8009534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009538:	484e      	ldr	r0, [pc, #312]	@ (8009674 <_svfiprintf_r+0x1e4>)
 800953a:	f7f6 fe71 	bl	8000220 <memchr>
 800953e:	9a04      	ldr	r2, [sp, #16]
 8009540:	b9d8      	cbnz	r0, 800957a <_svfiprintf_r+0xea>
 8009542:	06d0      	lsls	r0, r2, #27
 8009544:	bf44      	itt	mi
 8009546:	2320      	movmi	r3, #32
 8009548:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800954c:	0711      	lsls	r1, r2, #28
 800954e:	bf44      	itt	mi
 8009550:	232b      	movmi	r3, #43	@ 0x2b
 8009552:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009556:	f89a 3000 	ldrb.w	r3, [sl]
 800955a:	2b2a      	cmp	r3, #42	@ 0x2a
 800955c:	d015      	beq.n	800958a <_svfiprintf_r+0xfa>
 800955e:	9a07      	ldr	r2, [sp, #28]
 8009560:	4654      	mov	r4, sl
 8009562:	2000      	movs	r0, #0
 8009564:	f04f 0c0a 	mov.w	ip, #10
 8009568:	4621      	mov	r1, r4
 800956a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800956e:	3b30      	subs	r3, #48	@ 0x30
 8009570:	2b09      	cmp	r3, #9
 8009572:	d94b      	bls.n	800960c <_svfiprintf_r+0x17c>
 8009574:	b1b0      	cbz	r0, 80095a4 <_svfiprintf_r+0x114>
 8009576:	9207      	str	r2, [sp, #28]
 8009578:	e014      	b.n	80095a4 <_svfiprintf_r+0x114>
 800957a:	eba0 0308 	sub.w	r3, r0, r8
 800957e:	fa09 f303 	lsl.w	r3, r9, r3
 8009582:	4313      	orrs	r3, r2
 8009584:	9304      	str	r3, [sp, #16]
 8009586:	46a2      	mov	sl, r4
 8009588:	e7d2      	b.n	8009530 <_svfiprintf_r+0xa0>
 800958a:	9b03      	ldr	r3, [sp, #12]
 800958c:	1d19      	adds	r1, r3, #4
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	9103      	str	r1, [sp, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	bfbb      	ittet	lt
 8009596:	425b      	neglt	r3, r3
 8009598:	f042 0202 	orrlt.w	r2, r2, #2
 800959c:	9307      	strge	r3, [sp, #28]
 800959e:	9307      	strlt	r3, [sp, #28]
 80095a0:	bfb8      	it	lt
 80095a2:	9204      	strlt	r2, [sp, #16]
 80095a4:	7823      	ldrb	r3, [r4, #0]
 80095a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80095a8:	d10a      	bne.n	80095c0 <_svfiprintf_r+0x130>
 80095aa:	7863      	ldrb	r3, [r4, #1]
 80095ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80095ae:	d132      	bne.n	8009616 <_svfiprintf_r+0x186>
 80095b0:	9b03      	ldr	r3, [sp, #12]
 80095b2:	1d1a      	adds	r2, r3, #4
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	9203      	str	r2, [sp, #12]
 80095b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80095bc:	3402      	adds	r4, #2
 80095be:	9305      	str	r3, [sp, #20]
 80095c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009684 <_svfiprintf_r+0x1f4>
 80095c4:	7821      	ldrb	r1, [r4, #0]
 80095c6:	2203      	movs	r2, #3
 80095c8:	4650      	mov	r0, sl
 80095ca:	f7f6 fe29 	bl	8000220 <memchr>
 80095ce:	b138      	cbz	r0, 80095e0 <_svfiprintf_r+0x150>
 80095d0:	9b04      	ldr	r3, [sp, #16]
 80095d2:	eba0 000a 	sub.w	r0, r0, sl
 80095d6:	2240      	movs	r2, #64	@ 0x40
 80095d8:	4082      	lsls	r2, r0
 80095da:	4313      	orrs	r3, r2
 80095dc:	3401      	adds	r4, #1
 80095de:	9304      	str	r3, [sp, #16]
 80095e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e4:	4824      	ldr	r0, [pc, #144]	@ (8009678 <_svfiprintf_r+0x1e8>)
 80095e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095ea:	2206      	movs	r2, #6
 80095ec:	f7f6 fe18 	bl	8000220 <memchr>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d036      	beq.n	8009662 <_svfiprintf_r+0x1d2>
 80095f4:	4b21      	ldr	r3, [pc, #132]	@ (800967c <_svfiprintf_r+0x1ec>)
 80095f6:	bb1b      	cbnz	r3, 8009640 <_svfiprintf_r+0x1b0>
 80095f8:	9b03      	ldr	r3, [sp, #12]
 80095fa:	3307      	adds	r3, #7
 80095fc:	f023 0307 	bic.w	r3, r3, #7
 8009600:	3308      	adds	r3, #8
 8009602:	9303      	str	r3, [sp, #12]
 8009604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009606:	4433      	add	r3, r6
 8009608:	9309      	str	r3, [sp, #36]	@ 0x24
 800960a:	e76a      	b.n	80094e2 <_svfiprintf_r+0x52>
 800960c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009610:	460c      	mov	r4, r1
 8009612:	2001      	movs	r0, #1
 8009614:	e7a8      	b.n	8009568 <_svfiprintf_r+0xd8>
 8009616:	2300      	movs	r3, #0
 8009618:	3401      	adds	r4, #1
 800961a:	9305      	str	r3, [sp, #20]
 800961c:	4619      	mov	r1, r3
 800961e:	f04f 0c0a 	mov.w	ip, #10
 8009622:	4620      	mov	r0, r4
 8009624:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009628:	3a30      	subs	r2, #48	@ 0x30
 800962a:	2a09      	cmp	r2, #9
 800962c:	d903      	bls.n	8009636 <_svfiprintf_r+0x1a6>
 800962e:	2b00      	cmp	r3, #0
 8009630:	d0c6      	beq.n	80095c0 <_svfiprintf_r+0x130>
 8009632:	9105      	str	r1, [sp, #20]
 8009634:	e7c4      	b.n	80095c0 <_svfiprintf_r+0x130>
 8009636:	fb0c 2101 	mla	r1, ip, r1, r2
 800963a:	4604      	mov	r4, r0
 800963c:	2301      	movs	r3, #1
 800963e:	e7f0      	b.n	8009622 <_svfiprintf_r+0x192>
 8009640:	ab03      	add	r3, sp, #12
 8009642:	9300      	str	r3, [sp, #0]
 8009644:	462a      	mov	r2, r5
 8009646:	4b0e      	ldr	r3, [pc, #56]	@ (8009680 <_svfiprintf_r+0x1f0>)
 8009648:	a904      	add	r1, sp, #16
 800964a:	4638      	mov	r0, r7
 800964c:	f3af 8000 	nop.w
 8009650:	1c42      	adds	r2, r0, #1
 8009652:	4606      	mov	r6, r0
 8009654:	d1d6      	bne.n	8009604 <_svfiprintf_r+0x174>
 8009656:	89ab      	ldrh	r3, [r5, #12]
 8009658:	065b      	lsls	r3, r3, #25
 800965a:	f53f af2d 	bmi.w	80094b8 <_svfiprintf_r+0x28>
 800965e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009660:	e72c      	b.n	80094bc <_svfiprintf_r+0x2c>
 8009662:	ab03      	add	r3, sp, #12
 8009664:	9300      	str	r3, [sp, #0]
 8009666:	462a      	mov	r2, r5
 8009668:	4b05      	ldr	r3, [pc, #20]	@ (8009680 <_svfiprintf_r+0x1f0>)
 800966a:	a904      	add	r1, sp, #16
 800966c:	4638      	mov	r0, r7
 800966e:	f000 f9bb 	bl	80099e8 <_printf_i>
 8009672:	e7ed      	b.n	8009650 <_svfiprintf_r+0x1c0>
 8009674:	0800ca32 	.word	0x0800ca32
 8009678:	0800ca3c 	.word	0x0800ca3c
 800967c:	00000000 	.word	0x00000000
 8009680:	080093d9 	.word	0x080093d9
 8009684:	0800ca38 	.word	0x0800ca38

08009688 <__sfputc_r>:
 8009688:	6893      	ldr	r3, [r2, #8]
 800968a:	3b01      	subs	r3, #1
 800968c:	2b00      	cmp	r3, #0
 800968e:	b410      	push	{r4}
 8009690:	6093      	str	r3, [r2, #8]
 8009692:	da08      	bge.n	80096a6 <__sfputc_r+0x1e>
 8009694:	6994      	ldr	r4, [r2, #24]
 8009696:	42a3      	cmp	r3, r4
 8009698:	db01      	blt.n	800969e <__sfputc_r+0x16>
 800969a:	290a      	cmp	r1, #10
 800969c:	d103      	bne.n	80096a6 <__sfputc_r+0x1e>
 800969e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096a2:	f7ff bc00 	b.w	8008ea6 <__swbuf_r>
 80096a6:	6813      	ldr	r3, [r2, #0]
 80096a8:	1c58      	adds	r0, r3, #1
 80096aa:	6010      	str	r0, [r2, #0]
 80096ac:	7019      	strb	r1, [r3, #0]
 80096ae:	4608      	mov	r0, r1
 80096b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096b4:	4770      	bx	lr

080096b6 <__sfputs_r>:
 80096b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b8:	4606      	mov	r6, r0
 80096ba:	460f      	mov	r7, r1
 80096bc:	4614      	mov	r4, r2
 80096be:	18d5      	adds	r5, r2, r3
 80096c0:	42ac      	cmp	r4, r5
 80096c2:	d101      	bne.n	80096c8 <__sfputs_r+0x12>
 80096c4:	2000      	movs	r0, #0
 80096c6:	e007      	b.n	80096d8 <__sfputs_r+0x22>
 80096c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096cc:	463a      	mov	r2, r7
 80096ce:	4630      	mov	r0, r6
 80096d0:	f7ff ffda 	bl	8009688 <__sfputc_r>
 80096d4:	1c43      	adds	r3, r0, #1
 80096d6:	d1f3      	bne.n	80096c0 <__sfputs_r+0xa>
 80096d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096dc <_vfiprintf_r>:
 80096dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e0:	460d      	mov	r5, r1
 80096e2:	b09d      	sub	sp, #116	@ 0x74
 80096e4:	4614      	mov	r4, r2
 80096e6:	4698      	mov	r8, r3
 80096e8:	4606      	mov	r6, r0
 80096ea:	b118      	cbz	r0, 80096f4 <_vfiprintf_r+0x18>
 80096ec:	6a03      	ldr	r3, [r0, #32]
 80096ee:	b90b      	cbnz	r3, 80096f4 <_vfiprintf_r+0x18>
 80096f0:	f7ff face 	bl	8008c90 <__sinit>
 80096f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096f6:	07d9      	lsls	r1, r3, #31
 80096f8:	d405      	bmi.n	8009706 <_vfiprintf_r+0x2a>
 80096fa:	89ab      	ldrh	r3, [r5, #12]
 80096fc:	059a      	lsls	r2, r3, #22
 80096fe:	d402      	bmi.n	8009706 <_vfiprintf_r+0x2a>
 8009700:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009702:	f7ff fd3a 	bl	800917a <__retarget_lock_acquire_recursive>
 8009706:	89ab      	ldrh	r3, [r5, #12]
 8009708:	071b      	lsls	r3, r3, #28
 800970a:	d501      	bpl.n	8009710 <_vfiprintf_r+0x34>
 800970c:	692b      	ldr	r3, [r5, #16]
 800970e:	b99b      	cbnz	r3, 8009738 <_vfiprintf_r+0x5c>
 8009710:	4629      	mov	r1, r5
 8009712:	4630      	mov	r0, r6
 8009714:	f7ff fc06 	bl	8008f24 <__swsetup_r>
 8009718:	b170      	cbz	r0, 8009738 <_vfiprintf_r+0x5c>
 800971a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800971c:	07dc      	lsls	r4, r3, #31
 800971e:	d504      	bpl.n	800972a <_vfiprintf_r+0x4e>
 8009720:	f04f 30ff 	mov.w	r0, #4294967295
 8009724:	b01d      	add	sp, #116	@ 0x74
 8009726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800972a:	89ab      	ldrh	r3, [r5, #12]
 800972c:	0598      	lsls	r0, r3, #22
 800972e:	d4f7      	bmi.n	8009720 <_vfiprintf_r+0x44>
 8009730:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009732:	f7ff fd23 	bl	800917c <__retarget_lock_release_recursive>
 8009736:	e7f3      	b.n	8009720 <_vfiprintf_r+0x44>
 8009738:	2300      	movs	r3, #0
 800973a:	9309      	str	r3, [sp, #36]	@ 0x24
 800973c:	2320      	movs	r3, #32
 800973e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009742:	f8cd 800c 	str.w	r8, [sp, #12]
 8009746:	2330      	movs	r3, #48	@ 0x30
 8009748:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80098f8 <_vfiprintf_r+0x21c>
 800974c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009750:	f04f 0901 	mov.w	r9, #1
 8009754:	4623      	mov	r3, r4
 8009756:	469a      	mov	sl, r3
 8009758:	f813 2b01 	ldrb.w	r2, [r3], #1
 800975c:	b10a      	cbz	r2, 8009762 <_vfiprintf_r+0x86>
 800975e:	2a25      	cmp	r2, #37	@ 0x25
 8009760:	d1f9      	bne.n	8009756 <_vfiprintf_r+0x7a>
 8009762:	ebba 0b04 	subs.w	fp, sl, r4
 8009766:	d00b      	beq.n	8009780 <_vfiprintf_r+0xa4>
 8009768:	465b      	mov	r3, fp
 800976a:	4622      	mov	r2, r4
 800976c:	4629      	mov	r1, r5
 800976e:	4630      	mov	r0, r6
 8009770:	f7ff ffa1 	bl	80096b6 <__sfputs_r>
 8009774:	3001      	adds	r0, #1
 8009776:	f000 80a7 	beq.w	80098c8 <_vfiprintf_r+0x1ec>
 800977a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800977c:	445a      	add	r2, fp
 800977e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009780:	f89a 3000 	ldrb.w	r3, [sl]
 8009784:	2b00      	cmp	r3, #0
 8009786:	f000 809f 	beq.w	80098c8 <_vfiprintf_r+0x1ec>
 800978a:	2300      	movs	r3, #0
 800978c:	f04f 32ff 	mov.w	r2, #4294967295
 8009790:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009794:	f10a 0a01 	add.w	sl, sl, #1
 8009798:	9304      	str	r3, [sp, #16]
 800979a:	9307      	str	r3, [sp, #28]
 800979c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80097a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80097a2:	4654      	mov	r4, sl
 80097a4:	2205      	movs	r2, #5
 80097a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097aa:	4853      	ldr	r0, [pc, #332]	@ (80098f8 <_vfiprintf_r+0x21c>)
 80097ac:	f7f6 fd38 	bl	8000220 <memchr>
 80097b0:	9a04      	ldr	r2, [sp, #16]
 80097b2:	b9d8      	cbnz	r0, 80097ec <_vfiprintf_r+0x110>
 80097b4:	06d1      	lsls	r1, r2, #27
 80097b6:	bf44      	itt	mi
 80097b8:	2320      	movmi	r3, #32
 80097ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097be:	0713      	lsls	r3, r2, #28
 80097c0:	bf44      	itt	mi
 80097c2:	232b      	movmi	r3, #43	@ 0x2b
 80097c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097c8:	f89a 3000 	ldrb.w	r3, [sl]
 80097cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80097ce:	d015      	beq.n	80097fc <_vfiprintf_r+0x120>
 80097d0:	9a07      	ldr	r2, [sp, #28]
 80097d2:	4654      	mov	r4, sl
 80097d4:	2000      	movs	r0, #0
 80097d6:	f04f 0c0a 	mov.w	ip, #10
 80097da:	4621      	mov	r1, r4
 80097dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097e0:	3b30      	subs	r3, #48	@ 0x30
 80097e2:	2b09      	cmp	r3, #9
 80097e4:	d94b      	bls.n	800987e <_vfiprintf_r+0x1a2>
 80097e6:	b1b0      	cbz	r0, 8009816 <_vfiprintf_r+0x13a>
 80097e8:	9207      	str	r2, [sp, #28]
 80097ea:	e014      	b.n	8009816 <_vfiprintf_r+0x13a>
 80097ec:	eba0 0308 	sub.w	r3, r0, r8
 80097f0:	fa09 f303 	lsl.w	r3, r9, r3
 80097f4:	4313      	orrs	r3, r2
 80097f6:	9304      	str	r3, [sp, #16]
 80097f8:	46a2      	mov	sl, r4
 80097fa:	e7d2      	b.n	80097a2 <_vfiprintf_r+0xc6>
 80097fc:	9b03      	ldr	r3, [sp, #12]
 80097fe:	1d19      	adds	r1, r3, #4
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	9103      	str	r1, [sp, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	bfbb      	ittet	lt
 8009808:	425b      	neglt	r3, r3
 800980a:	f042 0202 	orrlt.w	r2, r2, #2
 800980e:	9307      	strge	r3, [sp, #28]
 8009810:	9307      	strlt	r3, [sp, #28]
 8009812:	bfb8      	it	lt
 8009814:	9204      	strlt	r2, [sp, #16]
 8009816:	7823      	ldrb	r3, [r4, #0]
 8009818:	2b2e      	cmp	r3, #46	@ 0x2e
 800981a:	d10a      	bne.n	8009832 <_vfiprintf_r+0x156>
 800981c:	7863      	ldrb	r3, [r4, #1]
 800981e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009820:	d132      	bne.n	8009888 <_vfiprintf_r+0x1ac>
 8009822:	9b03      	ldr	r3, [sp, #12]
 8009824:	1d1a      	adds	r2, r3, #4
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	9203      	str	r2, [sp, #12]
 800982a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800982e:	3402      	adds	r4, #2
 8009830:	9305      	str	r3, [sp, #20]
 8009832:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009908 <_vfiprintf_r+0x22c>
 8009836:	7821      	ldrb	r1, [r4, #0]
 8009838:	2203      	movs	r2, #3
 800983a:	4650      	mov	r0, sl
 800983c:	f7f6 fcf0 	bl	8000220 <memchr>
 8009840:	b138      	cbz	r0, 8009852 <_vfiprintf_r+0x176>
 8009842:	9b04      	ldr	r3, [sp, #16]
 8009844:	eba0 000a 	sub.w	r0, r0, sl
 8009848:	2240      	movs	r2, #64	@ 0x40
 800984a:	4082      	lsls	r2, r0
 800984c:	4313      	orrs	r3, r2
 800984e:	3401      	adds	r4, #1
 8009850:	9304      	str	r3, [sp, #16]
 8009852:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009856:	4829      	ldr	r0, [pc, #164]	@ (80098fc <_vfiprintf_r+0x220>)
 8009858:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800985c:	2206      	movs	r2, #6
 800985e:	f7f6 fcdf 	bl	8000220 <memchr>
 8009862:	2800      	cmp	r0, #0
 8009864:	d03f      	beq.n	80098e6 <_vfiprintf_r+0x20a>
 8009866:	4b26      	ldr	r3, [pc, #152]	@ (8009900 <_vfiprintf_r+0x224>)
 8009868:	bb1b      	cbnz	r3, 80098b2 <_vfiprintf_r+0x1d6>
 800986a:	9b03      	ldr	r3, [sp, #12]
 800986c:	3307      	adds	r3, #7
 800986e:	f023 0307 	bic.w	r3, r3, #7
 8009872:	3308      	adds	r3, #8
 8009874:	9303      	str	r3, [sp, #12]
 8009876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009878:	443b      	add	r3, r7
 800987a:	9309      	str	r3, [sp, #36]	@ 0x24
 800987c:	e76a      	b.n	8009754 <_vfiprintf_r+0x78>
 800987e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009882:	460c      	mov	r4, r1
 8009884:	2001      	movs	r0, #1
 8009886:	e7a8      	b.n	80097da <_vfiprintf_r+0xfe>
 8009888:	2300      	movs	r3, #0
 800988a:	3401      	adds	r4, #1
 800988c:	9305      	str	r3, [sp, #20]
 800988e:	4619      	mov	r1, r3
 8009890:	f04f 0c0a 	mov.w	ip, #10
 8009894:	4620      	mov	r0, r4
 8009896:	f810 2b01 	ldrb.w	r2, [r0], #1
 800989a:	3a30      	subs	r2, #48	@ 0x30
 800989c:	2a09      	cmp	r2, #9
 800989e:	d903      	bls.n	80098a8 <_vfiprintf_r+0x1cc>
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d0c6      	beq.n	8009832 <_vfiprintf_r+0x156>
 80098a4:	9105      	str	r1, [sp, #20]
 80098a6:	e7c4      	b.n	8009832 <_vfiprintf_r+0x156>
 80098a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80098ac:	4604      	mov	r4, r0
 80098ae:	2301      	movs	r3, #1
 80098b0:	e7f0      	b.n	8009894 <_vfiprintf_r+0x1b8>
 80098b2:	ab03      	add	r3, sp, #12
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	462a      	mov	r2, r5
 80098b8:	4b12      	ldr	r3, [pc, #72]	@ (8009904 <_vfiprintf_r+0x228>)
 80098ba:	a904      	add	r1, sp, #16
 80098bc:	4630      	mov	r0, r6
 80098be:	f3af 8000 	nop.w
 80098c2:	4607      	mov	r7, r0
 80098c4:	1c78      	adds	r0, r7, #1
 80098c6:	d1d6      	bne.n	8009876 <_vfiprintf_r+0x19a>
 80098c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098ca:	07d9      	lsls	r1, r3, #31
 80098cc:	d405      	bmi.n	80098da <_vfiprintf_r+0x1fe>
 80098ce:	89ab      	ldrh	r3, [r5, #12]
 80098d0:	059a      	lsls	r2, r3, #22
 80098d2:	d402      	bmi.n	80098da <_vfiprintf_r+0x1fe>
 80098d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098d6:	f7ff fc51 	bl	800917c <__retarget_lock_release_recursive>
 80098da:	89ab      	ldrh	r3, [r5, #12]
 80098dc:	065b      	lsls	r3, r3, #25
 80098de:	f53f af1f 	bmi.w	8009720 <_vfiprintf_r+0x44>
 80098e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098e4:	e71e      	b.n	8009724 <_vfiprintf_r+0x48>
 80098e6:	ab03      	add	r3, sp, #12
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	462a      	mov	r2, r5
 80098ec:	4b05      	ldr	r3, [pc, #20]	@ (8009904 <_vfiprintf_r+0x228>)
 80098ee:	a904      	add	r1, sp, #16
 80098f0:	4630      	mov	r0, r6
 80098f2:	f000 f879 	bl	80099e8 <_printf_i>
 80098f6:	e7e4      	b.n	80098c2 <_vfiprintf_r+0x1e6>
 80098f8:	0800ca32 	.word	0x0800ca32
 80098fc:	0800ca3c 	.word	0x0800ca3c
 8009900:	00000000 	.word	0x00000000
 8009904:	080096b7 	.word	0x080096b7
 8009908:	0800ca38 	.word	0x0800ca38

0800990c <_printf_common>:
 800990c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009910:	4616      	mov	r6, r2
 8009912:	4698      	mov	r8, r3
 8009914:	688a      	ldr	r2, [r1, #8]
 8009916:	690b      	ldr	r3, [r1, #16]
 8009918:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800991c:	4293      	cmp	r3, r2
 800991e:	bfb8      	it	lt
 8009920:	4613      	movlt	r3, r2
 8009922:	6033      	str	r3, [r6, #0]
 8009924:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009928:	4607      	mov	r7, r0
 800992a:	460c      	mov	r4, r1
 800992c:	b10a      	cbz	r2, 8009932 <_printf_common+0x26>
 800992e:	3301      	adds	r3, #1
 8009930:	6033      	str	r3, [r6, #0]
 8009932:	6823      	ldr	r3, [r4, #0]
 8009934:	0699      	lsls	r1, r3, #26
 8009936:	bf42      	ittt	mi
 8009938:	6833      	ldrmi	r3, [r6, #0]
 800993a:	3302      	addmi	r3, #2
 800993c:	6033      	strmi	r3, [r6, #0]
 800993e:	6825      	ldr	r5, [r4, #0]
 8009940:	f015 0506 	ands.w	r5, r5, #6
 8009944:	d106      	bne.n	8009954 <_printf_common+0x48>
 8009946:	f104 0a19 	add.w	sl, r4, #25
 800994a:	68e3      	ldr	r3, [r4, #12]
 800994c:	6832      	ldr	r2, [r6, #0]
 800994e:	1a9b      	subs	r3, r3, r2
 8009950:	42ab      	cmp	r3, r5
 8009952:	dc26      	bgt.n	80099a2 <_printf_common+0x96>
 8009954:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009958:	6822      	ldr	r2, [r4, #0]
 800995a:	3b00      	subs	r3, #0
 800995c:	bf18      	it	ne
 800995e:	2301      	movne	r3, #1
 8009960:	0692      	lsls	r2, r2, #26
 8009962:	d42b      	bmi.n	80099bc <_printf_common+0xb0>
 8009964:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009968:	4641      	mov	r1, r8
 800996a:	4638      	mov	r0, r7
 800996c:	47c8      	blx	r9
 800996e:	3001      	adds	r0, #1
 8009970:	d01e      	beq.n	80099b0 <_printf_common+0xa4>
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	6922      	ldr	r2, [r4, #16]
 8009976:	f003 0306 	and.w	r3, r3, #6
 800997a:	2b04      	cmp	r3, #4
 800997c:	bf02      	ittt	eq
 800997e:	68e5      	ldreq	r5, [r4, #12]
 8009980:	6833      	ldreq	r3, [r6, #0]
 8009982:	1aed      	subeq	r5, r5, r3
 8009984:	68a3      	ldr	r3, [r4, #8]
 8009986:	bf0c      	ite	eq
 8009988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800998c:	2500      	movne	r5, #0
 800998e:	4293      	cmp	r3, r2
 8009990:	bfc4      	itt	gt
 8009992:	1a9b      	subgt	r3, r3, r2
 8009994:	18ed      	addgt	r5, r5, r3
 8009996:	2600      	movs	r6, #0
 8009998:	341a      	adds	r4, #26
 800999a:	42b5      	cmp	r5, r6
 800999c:	d11a      	bne.n	80099d4 <_printf_common+0xc8>
 800999e:	2000      	movs	r0, #0
 80099a0:	e008      	b.n	80099b4 <_printf_common+0xa8>
 80099a2:	2301      	movs	r3, #1
 80099a4:	4652      	mov	r2, sl
 80099a6:	4641      	mov	r1, r8
 80099a8:	4638      	mov	r0, r7
 80099aa:	47c8      	blx	r9
 80099ac:	3001      	adds	r0, #1
 80099ae:	d103      	bne.n	80099b8 <_printf_common+0xac>
 80099b0:	f04f 30ff 	mov.w	r0, #4294967295
 80099b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099b8:	3501      	adds	r5, #1
 80099ba:	e7c6      	b.n	800994a <_printf_common+0x3e>
 80099bc:	18e1      	adds	r1, r4, r3
 80099be:	1c5a      	adds	r2, r3, #1
 80099c0:	2030      	movs	r0, #48	@ 0x30
 80099c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80099c6:	4422      	add	r2, r4
 80099c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80099cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80099d0:	3302      	adds	r3, #2
 80099d2:	e7c7      	b.n	8009964 <_printf_common+0x58>
 80099d4:	2301      	movs	r3, #1
 80099d6:	4622      	mov	r2, r4
 80099d8:	4641      	mov	r1, r8
 80099da:	4638      	mov	r0, r7
 80099dc:	47c8      	blx	r9
 80099de:	3001      	adds	r0, #1
 80099e0:	d0e6      	beq.n	80099b0 <_printf_common+0xa4>
 80099e2:	3601      	adds	r6, #1
 80099e4:	e7d9      	b.n	800999a <_printf_common+0x8e>
	...

080099e8 <_printf_i>:
 80099e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099ec:	7e0f      	ldrb	r7, [r1, #24]
 80099ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80099f0:	2f78      	cmp	r7, #120	@ 0x78
 80099f2:	4691      	mov	r9, r2
 80099f4:	4680      	mov	r8, r0
 80099f6:	460c      	mov	r4, r1
 80099f8:	469a      	mov	sl, r3
 80099fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80099fe:	d807      	bhi.n	8009a10 <_printf_i+0x28>
 8009a00:	2f62      	cmp	r7, #98	@ 0x62
 8009a02:	d80a      	bhi.n	8009a1a <_printf_i+0x32>
 8009a04:	2f00      	cmp	r7, #0
 8009a06:	f000 80d1 	beq.w	8009bac <_printf_i+0x1c4>
 8009a0a:	2f58      	cmp	r7, #88	@ 0x58
 8009a0c:	f000 80b8 	beq.w	8009b80 <_printf_i+0x198>
 8009a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009a18:	e03a      	b.n	8009a90 <_printf_i+0xa8>
 8009a1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009a1e:	2b15      	cmp	r3, #21
 8009a20:	d8f6      	bhi.n	8009a10 <_printf_i+0x28>
 8009a22:	a101      	add	r1, pc, #4	@ (adr r1, 8009a28 <_printf_i+0x40>)
 8009a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a28:	08009a81 	.word	0x08009a81
 8009a2c:	08009a95 	.word	0x08009a95
 8009a30:	08009a11 	.word	0x08009a11
 8009a34:	08009a11 	.word	0x08009a11
 8009a38:	08009a11 	.word	0x08009a11
 8009a3c:	08009a11 	.word	0x08009a11
 8009a40:	08009a95 	.word	0x08009a95
 8009a44:	08009a11 	.word	0x08009a11
 8009a48:	08009a11 	.word	0x08009a11
 8009a4c:	08009a11 	.word	0x08009a11
 8009a50:	08009a11 	.word	0x08009a11
 8009a54:	08009b93 	.word	0x08009b93
 8009a58:	08009abf 	.word	0x08009abf
 8009a5c:	08009b4d 	.word	0x08009b4d
 8009a60:	08009a11 	.word	0x08009a11
 8009a64:	08009a11 	.word	0x08009a11
 8009a68:	08009bb5 	.word	0x08009bb5
 8009a6c:	08009a11 	.word	0x08009a11
 8009a70:	08009abf 	.word	0x08009abf
 8009a74:	08009a11 	.word	0x08009a11
 8009a78:	08009a11 	.word	0x08009a11
 8009a7c:	08009b55 	.word	0x08009b55
 8009a80:	6833      	ldr	r3, [r6, #0]
 8009a82:	1d1a      	adds	r2, r3, #4
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	6032      	str	r2, [r6, #0]
 8009a88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a90:	2301      	movs	r3, #1
 8009a92:	e09c      	b.n	8009bce <_printf_i+0x1e6>
 8009a94:	6833      	ldr	r3, [r6, #0]
 8009a96:	6820      	ldr	r0, [r4, #0]
 8009a98:	1d19      	adds	r1, r3, #4
 8009a9a:	6031      	str	r1, [r6, #0]
 8009a9c:	0606      	lsls	r6, r0, #24
 8009a9e:	d501      	bpl.n	8009aa4 <_printf_i+0xbc>
 8009aa0:	681d      	ldr	r5, [r3, #0]
 8009aa2:	e003      	b.n	8009aac <_printf_i+0xc4>
 8009aa4:	0645      	lsls	r5, r0, #25
 8009aa6:	d5fb      	bpl.n	8009aa0 <_printf_i+0xb8>
 8009aa8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009aac:	2d00      	cmp	r5, #0
 8009aae:	da03      	bge.n	8009ab8 <_printf_i+0xd0>
 8009ab0:	232d      	movs	r3, #45	@ 0x2d
 8009ab2:	426d      	negs	r5, r5
 8009ab4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ab8:	4858      	ldr	r0, [pc, #352]	@ (8009c1c <_printf_i+0x234>)
 8009aba:	230a      	movs	r3, #10
 8009abc:	e011      	b.n	8009ae2 <_printf_i+0xfa>
 8009abe:	6821      	ldr	r1, [r4, #0]
 8009ac0:	6833      	ldr	r3, [r6, #0]
 8009ac2:	0608      	lsls	r0, r1, #24
 8009ac4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ac8:	d402      	bmi.n	8009ad0 <_printf_i+0xe8>
 8009aca:	0649      	lsls	r1, r1, #25
 8009acc:	bf48      	it	mi
 8009ace:	b2ad      	uxthmi	r5, r5
 8009ad0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ad2:	4852      	ldr	r0, [pc, #328]	@ (8009c1c <_printf_i+0x234>)
 8009ad4:	6033      	str	r3, [r6, #0]
 8009ad6:	bf14      	ite	ne
 8009ad8:	230a      	movne	r3, #10
 8009ada:	2308      	moveq	r3, #8
 8009adc:	2100      	movs	r1, #0
 8009ade:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009ae2:	6866      	ldr	r6, [r4, #4]
 8009ae4:	60a6      	str	r6, [r4, #8]
 8009ae6:	2e00      	cmp	r6, #0
 8009ae8:	db05      	blt.n	8009af6 <_printf_i+0x10e>
 8009aea:	6821      	ldr	r1, [r4, #0]
 8009aec:	432e      	orrs	r6, r5
 8009aee:	f021 0104 	bic.w	r1, r1, #4
 8009af2:	6021      	str	r1, [r4, #0]
 8009af4:	d04b      	beq.n	8009b8e <_printf_i+0x1a6>
 8009af6:	4616      	mov	r6, r2
 8009af8:	fbb5 f1f3 	udiv	r1, r5, r3
 8009afc:	fb03 5711 	mls	r7, r3, r1, r5
 8009b00:	5dc7      	ldrb	r7, [r0, r7]
 8009b02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b06:	462f      	mov	r7, r5
 8009b08:	42bb      	cmp	r3, r7
 8009b0a:	460d      	mov	r5, r1
 8009b0c:	d9f4      	bls.n	8009af8 <_printf_i+0x110>
 8009b0e:	2b08      	cmp	r3, #8
 8009b10:	d10b      	bne.n	8009b2a <_printf_i+0x142>
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	07df      	lsls	r7, r3, #31
 8009b16:	d508      	bpl.n	8009b2a <_printf_i+0x142>
 8009b18:	6923      	ldr	r3, [r4, #16]
 8009b1a:	6861      	ldr	r1, [r4, #4]
 8009b1c:	4299      	cmp	r1, r3
 8009b1e:	bfde      	ittt	le
 8009b20:	2330      	movle	r3, #48	@ 0x30
 8009b22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b26:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b2a:	1b92      	subs	r2, r2, r6
 8009b2c:	6122      	str	r2, [r4, #16]
 8009b2e:	f8cd a000 	str.w	sl, [sp]
 8009b32:	464b      	mov	r3, r9
 8009b34:	aa03      	add	r2, sp, #12
 8009b36:	4621      	mov	r1, r4
 8009b38:	4640      	mov	r0, r8
 8009b3a:	f7ff fee7 	bl	800990c <_printf_common>
 8009b3e:	3001      	adds	r0, #1
 8009b40:	d14a      	bne.n	8009bd8 <_printf_i+0x1f0>
 8009b42:	f04f 30ff 	mov.w	r0, #4294967295
 8009b46:	b004      	add	sp, #16
 8009b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b4c:	6823      	ldr	r3, [r4, #0]
 8009b4e:	f043 0320 	orr.w	r3, r3, #32
 8009b52:	6023      	str	r3, [r4, #0]
 8009b54:	4832      	ldr	r0, [pc, #200]	@ (8009c20 <_printf_i+0x238>)
 8009b56:	2778      	movs	r7, #120	@ 0x78
 8009b58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009b5c:	6823      	ldr	r3, [r4, #0]
 8009b5e:	6831      	ldr	r1, [r6, #0]
 8009b60:	061f      	lsls	r7, r3, #24
 8009b62:	f851 5b04 	ldr.w	r5, [r1], #4
 8009b66:	d402      	bmi.n	8009b6e <_printf_i+0x186>
 8009b68:	065f      	lsls	r7, r3, #25
 8009b6a:	bf48      	it	mi
 8009b6c:	b2ad      	uxthmi	r5, r5
 8009b6e:	6031      	str	r1, [r6, #0]
 8009b70:	07d9      	lsls	r1, r3, #31
 8009b72:	bf44      	itt	mi
 8009b74:	f043 0320 	orrmi.w	r3, r3, #32
 8009b78:	6023      	strmi	r3, [r4, #0]
 8009b7a:	b11d      	cbz	r5, 8009b84 <_printf_i+0x19c>
 8009b7c:	2310      	movs	r3, #16
 8009b7e:	e7ad      	b.n	8009adc <_printf_i+0xf4>
 8009b80:	4826      	ldr	r0, [pc, #152]	@ (8009c1c <_printf_i+0x234>)
 8009b82:	e7e9      	b.n	8009b58 <_printf_i+0x170>
 8009b84:	6823      	ldr	r3, [r4, #0]
 8009b86:	f023 0320 	bic.w	r3, r3, #32
 8009b8a:	6023      	str	r3, [r4, #0]
 8009b8c:	e7f6      	b.n	8009b7c <_printf_i+0x194>
 8009b8e:	4616      	mov	r6, r2
 8009b90:	e7bd      	b.n	8009b0e <_printf_i+0x126>
 8009b92:	6833      	ldr	r3, [r6, #0]
 8009b94:	6825      	ldr	r5, [r4, #0]
 8009b96:	6961      	ldr	r1, [r4, #20]
 8009b98:	1d18      	adds	r0, r3, #4
 8009b9a:	6030      	str	r0, [r6, #0]
 8009b9c:	062e      	lsls	r6, r5, #24
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	d501      	bpl.n	8009ba6 <_printf_i+0x1be>
 8009ba2:	6019      	str	r1, [r3, #0]
 8009ba4:	e002      	b.n	8009bac <_printf_i+0x1c4>
 8009ba6:	0668      	lsls	r0, r5, #25
 8009ba8:	d5fb      	bpl.n	8009ba2 <_printf_i+0x1ba>
 8009baa:	8019      	strh	r1, [r3, #0]
 8009bac:	2300      	movs	r3, #0
 8009bae:	6123      	str	r3, [r4, #16]
 8009bb0:	4616      	mov	r6, r2
 8009bb2:	e7bc      	b.n	8009b2e <_printf_i+0x146>
 8009bb4:	6833      	ldr	r3, [r6, #0]
 8009bb6:	1d1a      	adds	r2, r3, #4
 8009bb8:	6032      	str	r2, [r6, #0]
 8009bba:	681e      	ldr	r6, [r3, #0]
 8009bbc:	6862      	ldr	r2, [r4, #4]
 8009bbe:	2100      	movs	r1, #0
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	f7f6 fb2d 	bl	8000220 <memchr>
 8009bc6:	b108      	cbz	r0, 8009bcc <_printf_i+0x1e4>
 8009bc8:	1b80      	subs	r0, r0, r6
 8009bca:	6060      	str	r0, [r4, #4]
 8009bcc:	6863      	ldr	r3, [r4, #4]
 8009bce:	6123      	str	r3, [r4, #16]
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bd6:	e7aa      	b.n	8009b2e <_printf_i+0x146>
 8009bd8:	6923      	ldr	r3, [r4, #16]
 8009bda:	4632      	mov	r2, r6
 8009bdc:	4649      	mov	r1, r9
 8009bde:	4640      	mov	r0, r8
 8009be0:	47d0      	blx	sl
 8009be2:	3001      	adds	r0, #1
 8009be4:	d0ad      	beq.n	8009b42 <_printf_i+0x15a>
 8009be6:	6823      	ldr	r3, [r4, #0]
 8009be8:	079b      	lsls	r3, r3, #30
 8009bea:	d413      	bmi.n	8009c14 <_printf_i+0x22c>
 8009bec:	68e0      	ldr	r0, [r4, #12]
 8009bee:	9b03      	ldr	r3, [sp, #12]
 8009bf0:	4298      	cmp	r0, r3
 8009bf2:	bfb8      	it	lt
 8009bf4:	4618      	movlt	r0, r3
 8009bf6:	e7a6      	b.n	8009b46 <_printf_i+0x15e>
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	4632      	mov	r2, r6
 8009bfc:	4649      	mov	r1, r9
 8009bfe:	4640      	mov	r0, r8
 8009c00:	47d0      	blx	sl
 8009c02:	3001      	adds	r0, #1
 8009c04:	d09d      	beq.n	8009b42 <_printf_i+0x15a>
 8009c06:	3501      	adds	r5, #1
 8009c08:	68e3      	ldr	r3, [r4, #12]
 8009c0a:	9903      	ldr	r1, [sp, #12]
 8009c0c:	1a5b      	subs	r3, r3, r1
 8009c0e:	42ab      	cmp	r3, r5
 8009c10:	dcf2      	bgt.n	8009bf8 <_printf_i+0x210>
 8009c12:	e7eb      	b.n	8009bec <_printf_i+0x204>
 8009c14:	2500      	movs	r5, #0
 8009c16:	f104 0619 	add.w	r6, r4, #25
 8009c1a:	e7f5      	b.n	8009c08 <_printf_i+0x220>
 8009c1c:	0800ca43 	.word	0x0800ca43
 8009c20:	0800ca54 	.word	0x0800ca54

08009c24 <__sflush_r>:
 8009c24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c2c:	0716      	lsls	r6, r2, #28
 8009c2e:	4605      	mov	r5, r0
 8009c30:	460c      	mov	r4, r1
 8009c32:	d454      	bmi.n	8009cde <__sflush_r+0xba>
 8009c34:	684b      	ldr	r3, [r1, #4]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	dc02      	bgt.n	8009c40 <__sflush_r+0x1c>
 8009c3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	dd48      	ble.n	8009cd2 <__sflush_r+0xae>
 8009c40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c42:	2e00      	cmp	r6, #0
 8009c44:	d045      	beq.n	8009cd2 <__sflush_r+0xae>
 8009c46:	2300      	movs	r3, #0
 8009c48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009c4c:	682f      	ldr	r7, [r5, #0]
 8009c4e:	6a21      	ldr	r1, [r4, #32]
 8009c50:	602b      	str	r3, [r5, #0]
 8009c52:	d030      	beq.n	8009cb6 <__sflush_r+0x92>
 8009c54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009c56:	89a3      	ldrh	r3, [r4, #12]
 8009c58:	0759      	lsls	r1, r3, #29
 8009c5a:	d505      	bpl.n	8009c68 <__sflush_r+0x44>
 8009c5c:	6863      	ldr	r3, [r4, #4]
 8009c5e:	1ad2      	subs	r2, r2, r3
 8009c60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c62:	b10b      	cbz	r3, 8009c68 <__sflush_r+0x44>
 8009c64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c66:	1ad2      	subs	r2, r2, r3
 8009c68:	2300      	movs	r3, #0
 8009c6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c6c:	6a21      	ldr	r1, [r4, #32]
 8009c6e:	4628      	mov	r0, r5
 8009c70:	47b0      	blx	r6
 8009c72:	1c43      	adds	r3, r0, #1
 8009c74:	89a3      	ldrh	r3, [r4, #12]
 8009c76:	d106      	bne.n	8009c86 <__sflush_r+0x62>
 8009c78:	6829      	ldr	r1, [r5, #0]
 8009c7a:	291d      	cmp	r1, #29
 8009c7c:	d82b      	bhi.n	8009cd6 <__sflush_r+0xb2>
 8009c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8009d28 <__sflush_r+0x104>)
 8009c80:	40ca      	lsrs	r2, r1
 8009c82:	07d6      	lsls	r6, r2, #31
 8009c84:	d527      	bpl.n	8009cd6 <__sflush_r+0xb2>
 8009c86:	2200      	movs	r2, #0
 8009c88:	6062      	str	r2, [r4, #4]
 8009c8a:	04d9      	lsls	r1, r3, #19
 8009c8c:	6922      	ldr	r2, [r4, #16]
 8009c8e:	6022      	str	r2, [r4, #0]
 8009c90:	d504      	bpl.n	8009c9c <__sflush_r+0x78>
 8009c92:	1c42      	adds	r2, r0, #1
 8009c94:	d101      	bne.n	8009c9a <__sflush_r+0x76>
 8009c96:	682b      	ldr	r3, [r5, #0]
 8009c98:	b903      	cbnz	r3, 8009c9c <__sflush_r+0x78>
 8009c9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c9e:	602f      	str	r7, [r5, #0]
 8009ca0:	b1b9      	cbz	r1, 8009cd2 <__sflush_r+0xae>
 8009ca2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ca6:	4299      	cmp	r1, r3
 8009ca8:	d002      	beq.n	8009cb0 <__sflush_r+0x8c>
 8009caa:	4628      	mov	r0, r5
 8009cac:	f7ff fa94 	bl	80091d8 <_free_r>
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	6363      	str	r3, [r4, #52]	@ 0x34
 8009cb4:	e00d      	b.n	8009cd2 <__sflush_r+0xae>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	4628      	mov	r0, r5
 8009cba:	47b0      	blx	r6
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	1c50      	adds	r0, r2, #1
 8009cc0:	d1c9      	bne.n	8009c56 <__sflush_r+0x32>
 8009cc2:	682b      	ldr	r3, [r5, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d0c6      	beq.n	8009c56 <__sflush_r+0x32>
 8009cc8:	2b1d      	cmp	r3, #29
 8009cca:	d001      	beq.n	8009cd0 <__sflush_r+0xac>
 8009ccc:	2b16      	cmp	r3, #22
 8009cce:	d11e      	bne.n	8009d0e <__sflush_r+0xea>
 8009cd0:	602f      	str	r7, [r5, #0]
 8009cd2:	2000      	movs	r0, #0
 8009cd4:	e022      	b.n	8009d1c <__sflush_r+0xf8>
 8009cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cda:	b21b      	sxth	r3, r3
 8009cdc:	e01b      	b.n	8009d16 <__sflush_r+0xf2>
 8009cde:	690f      	ldr	r7, [r1, #16]
 8009ce0:	2f00      	cmp	r7, #0
 8009ce2:	d0f6      	beq.n	8009cd2 <__sflush_r+0xae>
 8009ce4:	0793      	lsls	r3, r2, #30
 8009ce6:	680e      	ldr	r6, [r1, #0]
 8009ce8:	bf08      	it	eq
 8009cea:	694b      	ldreq	r3, [r1, #20]
 8009cec:	600f      	str	r7, [r1, #0]
 8009cee:	bf18      	it	ne
 8009cf0:	2300      	movne	r3, #0
 8009cf2:	eba6 0807 	sub.w	r8, r6, r7
 8009cf6:	608b      	str	r3, [r1, #8]
 8009cf8:	f1b8 0f00 	cmp.w	r8, #0
 8009cfc:	dde9      	ble.n	8009cd2 <__sflush_r+0xae>
 8009cfe:	6a21      	ldr	r1, [r4, #32]
 8009d00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009d02:	4643      	mov	r3, r8
 8009d04:	463a      	mov	r2, r7
 8009d06:	4628      	mov	r0, r5
 8009d08:	47b0      	blx	r6
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	dc08      	bgt.n	8009d20 <__sflush_r+0xfc>
 8009d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d16:	81a3      	strh	r3, [r4, #12]
 8009d18:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d20:	4407      	add	r7, r0
 8009d22:	eba8 0800 	sub.w	r8, r8, r0
 8009d26:	e7e7      	b.n	8009cf8 <__sflush_r+0xd4>
 8009d28:	20400001 	.word	0x20400001

08009d2c <_fflush_r>:
 8009d2c:	b538      	push	{r3, r4, r5, lr}
 8009d2e:	690b      	ldr	r3, [r1, #16]
 8009d30:	4605      	mov	r5, r0
 8009d32:	460c      	mov	r4, r1
 8009d34:	b913      	cbnz	r3, 8009d3c <_fflush_r+0x10>
 8009d36:	2500      	movs	r5, #0
 8009d38:	4628      	mov	r0, r5
 8009d3a:	bd38      	pop	{r3, r4, r5, pc}
 8009d3c:	b118      	cbz	r0, 8009d46 <_fflush_r+0x1a>
 8009d3e:	6a03      	ldr	r3, [r0, #32]
 8009d40:	b90b      	cbnz	r3, 8009d46 <_fflush_r+0x1a>
 8009d42:	f7fe ffa5 	bl	8008c90 <__sinit>
 8009d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d0f3      	beq.n	8009d36 <_fflush_r+0xa>
 8009d4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d50:	07d0      	lsls	r0, r2, #31
 8009d52:	d404      	bmi.n	8009d5e <_fflush_r+0x32>
 8009d54:	0599      	lsls	r1, r3, #22
 8009d56:	d402      	bmi.n	8009d5e <_fflush_r+0x32>
 8009d58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d5a:	f7ff fa0e 	bl	800917a <__retarget_lock_acquire_recursive>
 8009d5e:	4628      	mov	r0, r5
 8009d60:	4621      	mov	r1, r4
 8009d62:	f7ff ff5f 	bl	8009c24 <__sflush_r>
 8009d66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d68:	07da      	lsls	r2, r3, #31
 8009d6a:	4605      	mov	r5, r0
 8009d6c:	d4e4      	bmi.n	8009d38 <_fflush_r+0xc>
 8009d6e:	89a3      	ldrh	r3, [r4, #12]
 8009d70:	059b      	lsls	r3, r3, #22
 8009d72:	d4e1      	bmi.n	8009d38 <_fflush_r+0xc>
 8009d74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d76:	f7ff fa01 	bl	800917c <__retarget_lock_release_recursive>
 8009d7a:	e7dd      	b.n	8009d38 <_fflush_r+0xc>

08009d7c <fiprintf>:
 8009d7c:	b40e      	push	{r1, r2, r3}
 8009d7e:	b503      	push	{r0, r1, lr}
 8009d80:	4601      	mov	r1, r0
 8009d82:	ab03      	add	r3, sp, #12
 8009d84:	4805      	ldr	r0, [pc, #20]	@ (8009d9c <fiprintf+0x20>)
 8009d86:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d8a:	6800      	ldr	r0, [r0, #0]
 8009d8c:	9301      	str	r3, [sp, #4]
 8009d8e:	f7ff fca5 	bl	80096dc <_vfiprintf_r>
 8009d92:	b002      	add	sp, #8
 8009d94:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d98:	b003      	add	sp, #12
 8009d9a:	4770      	bx	lr
 8009d9c:	20000044 	.word	0x20000044

08009da0 <__swhatbuf_r>:
 8009da0:	b570      	push	{r4, r5, r6, lr}
 8009da2:	460c      	mov	r4, r1
 8009da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009da8:	2900      	cmp	r1, #0
 8009daa:	b096      	sub	sp, #88	@ 0x58
 8009dac:	4615      	mov	r5, r2
 8009dae:	461e      	mov	r6, r3
 8009db0:	da0d      	bge.n	8009dce <__swhatbuf_r+0x2e>
 8009db2:	89a3      	ldrh	r3, [r4, #12]
 8009db4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009db8:	f04f 0100 	mov.w	r1, #0
 8009dbc:	bf14      	ite	ne
 8009dbe:	2340      	movne	r3, #64	@ 0x40
 8009dc0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009dc4:	2000      	movs	r0, #0
 8009dc6:	6031      	str	r1, [r6, #0]
 8009dc8:	602b      	str	r3, [r5, #0]
 8009dca:	b016      	add	sp, #88	@ 0x58
 8009dcc:	bd70      	pop	{r4, r5, r6, pc}
 8009dce:	466a      	mov	r2, sp
 8009dd0:	f000 f862 	bl	8009e98 <_fstat_r>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	dbec      	blt.n	8009db2 <__swhatbuf_r+0x12>
 8009dd8:	9901      	ldr	r1, [sp, #4]
 8009dda:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009dde:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009de2:	4259      	negs	r1, r3
 8009de4:	4159      	adcs	r1, r3
 8009de6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009dea:	e7eb      	b.n	8009dc4 <__swhatbuf_r+0x24>

08009dec <__smakebuf_r>:
 8009dec:	898b      	ldrh	r3, [r1, #12]
 8009dee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009df0:	079d      	lsls	r5, r3, #30
 8009df2:	4606      	mov	r6, r0
 8009df4:	460c      	mov	r4, r1
 8009df6:	d507      	bpl.n	8009e08 <__smakebuf_r+0x1c>
 8009df8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009dfc:	6023      	str	r3, [r4, #0]
 8009dfe:	6123      	str	r3, [r4, #16]
 8009e00:	2301      	movs	r3, #1
 8009e02:	6163      	str	r3, [r4, #20]
 8009e04:	b003      	add	sp, #12
 8009e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e08:	ab01      	add	r3, sp, #4
 8009e0a:	466a      	mov	r2, sp
 8009e0c:	f7ff ffc8 	bl	8009da0 <__swhatbuf_r>
 8009e10:	9f00      	ldr	r7, [sp, #0]
 8009e12:	4605      	mov	r5, r0
 8009e14:	4639      	mov	r1, r7
 8009e16:	4630      	mov	r0, r6
 8009e18:	f7ff fa52 	bl	80092c0 <_malloc_r>
 8009e1c:	b948      	cbnz	r0, 8009e32 <__smakebuf_r+0x46>
 8009e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e22:	059a      	lsls	r2, r3, #22
 8009e24:	d4ee      	bmi.n	8009e04 <__smakebuf_r+0x18>
 8009e26:	f023 0303 	bic.w	r3, r3, #3
 8009e2a:	f043 0302 	orr.w	r3, r3, #2
 8009e2e:	81a3      	strh	r3, [r4, #12]
 8009e30:	e7e2      	b.n	8009df8 <__smakebuf_r+0xc>
 8009e32:	89a3      	ldrh	r3, [r4, #12]
 8009e34:	6020      	str	r0, [r4, #0]
 8009e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e3a:	81a3      	strh	r3, [r4, #12]
 8009e3c:	9b01      	ldr	r3, [sp, #4]
 8009e3e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009e42:	b15b      	cbz	r3, 8009e5c <__smakebuf_r+0x70>
 8009e44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e48:	4630      	mov	r0, r6
 8009e4a:	f000 f837 	bl	8009ebc <_isatty_r>
 8009e4e:	b128      	cbz	r0, 8009e5c <__smakebuf_r+0x70>
 8009e50:	89a3      	ldrh	r3, [r4, #12]
 8009e52:	f023 0303 	bic.w	r3, r3, #3
 8009e56:	f043 0301 	orr.w	r3, r3, #1
 8009e5a:	81a3      	strh	r3, [r4, #12]
 8009e5c:	89a3      	ldrh	r3, [r4, #12]
 8009e5e:	431d      	orrs	r5, r3
 8009e60:	81a5      	strh	r5, [r4, #12]
 8009e62:	e7cf      	b.n	8009e04 <__smakebuf_r+0x18>

08009e64 <memmove>:
 8009e64:	4288      	cmp	r0, r1
 8009e66:	b510      	push	{r4, lr}
 8009e68:	eb01 0402 	add.w	r4, r1, r2
 8009e6c:	d902      	bls.n	8009e74 <memmove+0x10>
 8009e6e:	4284      	cmp	r4, r0
 8009e70:	4623      	mov	r3, r4
 8009e72:	d807      	bhi.n	8009e84 <memmove+0x20>
 8009e74:	1e43      	subs	r3, r0, #1
 8009e76:	42a1      	cmp	r1, r4
 8009e78:	d008      	beq.n	8009e8c <memmove+0x28>
 8009e7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e82:	e7f8      	b.n	8009e76 <memmove+0x12>
 8009e84:	4402      	add	r2, r0
 8009e86:	4601      	mov	r1, r0
 8009e88:	428a      	cmp	r2, r1
 8009e8a:	d100      	bne.n	8009e8e <memmove+0x2a>
 8009e8c:	bd10      	pop	{r4, pc}
 8009e8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e96:	e7f7      	b.n	8009e88 <memmove+0x24>

08009e98 <_fstat_r>:
 8009e98:	b538      	push	{r3, r4, r5, lr}
 8009e9a:	4d07      	ldr	r5, [pc, #28]	@ (8009eb8 <_fstat_r+0x20>)
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	4608      	mov	r0, r1
 8009ea2:	4611      	mov	r1, r2
 8009ea4:	602b      	str	r3, [r5, #0]
 8009ea6:	f7f9 ff77 	bl	8003d98 <_fstat>
 8009eaa:	1c43      	adds	r3, r0, #1
 8009eac:	d102      	bne.n	8009eb4 <_fstat_r+0x1c>
 8009eae:	682b      	ldr	r3, [r5, #0]
 8009eb0:	b103      	cbz	r3, 8009eb4 <_fstat_r+0x1c>
 8009eb2:	6023      	str	r3, [r4, #0]
 8009eb4:	bd38      	pop	{r3, r4, r5, pc}
 8009eb6:	bf00      	nop
 8009eb8:	200006a4 	.word	0x200006a4

08009ebc <_isatty_r>:
 8009ebc:	b538      	push	{r3, r4, r5, lr}
 8009ebe:	4d06      	ldr	r5, [pc, #24]	@ (8009ed8 <_isatty_r+0x1c>)
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	4608      	mov	r0, r1
 8009ec6:	602b      	str	r3, [r5, #0]
 8009ec8:	f7f9 ff76 	bl	8003db8 <_isatty>
 8009ecc:	1c43      	adds	r3, r0, #1
 8009ece:	d102      	bne.n	8009ed6 <_isatty_r+0x1a>
 8009ed0:	682b      	ldr	r3, [r5, #0]
 8009ed2:	b103      	cbz	r3, 8009ed6 <_isatty_r+0x1a>
 8009ed4:	6023      	str	r3, [r4, #0]
 8009ed6:	bd38      	pop	{r3, r4, r5, pc}
 8009ed8:	200006a4 	.word	0x200006a4

08009edc <_sbrk_r>:
 8009edc:	b538      	push	{r3, r4, r5, lr}
 8009ede:	4d06      	ldr	r5, [pc, #24]	@ (8009ef8 <_sbrk_r+0x1c>)
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	4608      	mov	r0, r1
 8009ee6:	602b      	str	r3, [r5, #0]
 8009ee8:	f7f9 ff7e 	bl	8003de8 <_sbrk>
 8009eec:	1c43      	adds	r3, r0, #1
 8009eee:	d102      	bne.n	8009ef6 <_sbrk_r+0x1a>
 8009ef0:	682b      	ldr	r3, [r5, #0]
 8009ef2:	b103      	cbz	r3, 8009ef6 <_sbrk_r+0x1a>
 8009ef4:	6023      	str	r3, [r4, #0]
 8009ef6:	bd38      	pop	{r3, r4, r5, pc}
 8009ef8:	200006a4 	.word	0x200006a4

08009efc <abort>:
 8009efc:	b508      	push	{r3, lr}
 8009efe:	2006      	movs	r0, #6
 8009f00:	f000 f85a 	bl	8009fb8 <raise>
 8009f04:	2001      	movs	r0, #1
 8009f06:	f7f9 fef7 	bl	8003cf8 <_exit>

08009f0a <_realloc_r>:
 8009f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f0e:	4607      	mov	r7, r0
 8009f10:	4614      	mov	r4, r2
 8009f12:	460d      	mov	r5, r1
 8009f14:	b921      	cbnz	r1, 8009f20 <_realloc_r+0x16>
 8009f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f1a:	4611      	mov	r1, r2
 8009f1c:	f7ff b9d0 	b.w	80092c0 <_malloc_r>
 8009f20:	b92a      	cbnz	r2, 8009f2e <_realloc_r+0x24>
 8009f22:	f7ff f959 	bl	80091d8 <_free_r>
 8009f26:	4625      	mov	r5, r4
 8009f28:	4628      	mov	r0, r5
 8009f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f2e:	f000 f85f 	bl	8009ff0 <_malloc_usable_size_r>
 8009f32:	4284      	cmp	r4, r0
 8009f34:	4606      	mov	r6, r0
 8009f36:	d802      	bhi.n	8009f3e <_realloc_r+0x34>
 8009f38:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f3c:	d8f4      	bhi.n	8009f28 <_realloc_r+0x1e>
 8009f3e:	4621      	mov	r1, r4
 8009f40:	4638      	mov	r0, r7
 8009f42:	f7ff f9bd 	bl	80092c0 <_malloc_r>
 8009f46:	4680      	mov	r8, r0
 8009f48:	b908      	cbnz	r0, 8009f4e <_realloc_r+0x44>
 8009f4a:	4645      	mov	r5, r8
 8009f4c:	e7ec      	b.n	8009f28 <_realloc_r+0x1e>
 8009f4e:	42b4      	cmp	r4, r6
 8009f50:	4622      	mov	r2, r4
 8009f52:	4629      	mov	r1, r5
 8009f54:	bf28      	it	cs
 8009f56:	4632      	movcs	r2, r6
 8009f58:	f7ff f911 	bl	800917e <memcpy>
 8009f5c:	4629      	mov	r1, r5
 8009f5e:	4638      	mov	r0, r7
 8009f60:	f7ff f93a 	bl	80091d8 <_free_r>
 8009f64:	e7f1      	b.n	8009f4a <_realloc_r+0x40>

08009f66 <_raise_r>:
 8009f66:	291f      	cmp	r1, #31
 8009f68:	b538      	push	{r3, r4, r5, lr}
 8009f6a:	4605      	mov	r5, r0
 8009f6c:	460c      	mov	r4, r1
 8009f6e:	d904      	bls.n	8009f7a <_raise_r+0x14>
 8009f70:	2316      	movs	r3, #22
 8009f72:	6003      	str	r3, [r0, #0]
 8009f74:	f04f 30ff 	mov.w	r0, #4294967295
 8009f78:	bd38      	pop	{r3, r4, r5, pc}
 8009f7a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009f7c:	b112      	cbz	r2, 8009f84 <_raise_r+0x1e>
 8009f7e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f82:	b94b      	cbnz	r3, 8009f98 <_raise_r+0x32>
 8009f84:	4628      	mov	r0, r5
 8009f86:	f000 f831 	bl	8009fec <_getpid_r>
 8009f8a:	4622      	mov	r2, r4
 8009f8c:	4601      	mov	r1, r0
 8009f8e:	4628      	mov	r0, r5
 8009f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f94:	f000 b818 	b.w	8009fc8 <_kill_r>
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d00a      	beq.n	8009fb2 <_raise_r+0x4c>
 8009f9c:	1c59      	adds	r1, r3, #1
 8009f9e:	d103      	bne.n	8009fa8 <_raise_r+0x42>
 8009fa0:	2316      	movs	r3, #22
 8009fa2:	6003      	str	r3, [r0, #0]
 8009fa4:	2001      	movs	r0, #1
 8009fa6:	e7e7      	b.n	8009f78 <_raise_r+0x12>
 8009fa8:	2100      	movs	r1, #0
 8009faa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009fae:	4620      	mov	r0, r4
 8009fb0:	4798      	blx	r3
 8009fb2:	2000      	movs	r0, #0
 8009fb4:	e7e0      	b.n	8009f78 <_raise_r+0x12>
	...

08009fb8 <raise>:
 8009fb8:	4b02      	ldr	r3, [pc, #8]	@ (8009fc4 <raise+0xc>)
 8009fba:	4601      	mov	r1, r0
 8009fbc:	6818      	ldr	r0, [r3, #0]
 8009fbe:	f7ff bfd2 	b.w	8009f66 <_raise_r>
 8009fc2:	bf00      	nop
 8009fc4:	20000044 	.word	0x20000044

08009fc8 <_kill_r>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	4d07      	ldr	r5, [pc, #28]	@ (8009fe8 <_kill_r+0x20>)
 8009fcc:	2300      	movs	r3, #0
 8009fce:	4604      	mov	r4, r0
 8009fd0:	4608      	mov	r0, r1
 8009fd2:	4611      	mov	r1, r2
 8009fd4:	602b      	str	r3, [r5, #0]
 8009fd6:	f7f9 fe7f 	bl	8003cd8 <_kill>
 8009fda:	1c43      	adds	r3, r0, #1
 8009fdc:	d102      	bne.n	8009fe4 <_kill_r+0x1c>
 8009fde:	682b      	ldr	r3, [r5, #0]
 8009fe0:	b103      	cbz	r3, 8009fe4 <_kill_r+0x1c>
 8009fe2:	6023      	str	r3, [r4, #0]
 8009fe4:	bd38      	pop	{r3, r4, r5, pc}
 8009fe6:	bf00      	nop
 8009fe8:	200006a4 	.word	0x200006a4

08009fec <_getpid_r>:
 8009fec:	f7f9 be6c 	b.w	8003cc8 <_getpid>

08009ff0 <_malloc_usable_size_r>:
 8009ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ff4:	1f18      	subs	r0, r3, #4
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	bfbc      	itt	lt
 8009ffa:	580b      	ldrlt	r3, [r1, r0]
 8009ffc:	18c0      	addlt	r0, r0, r3
 8009ffe:	4770      	bx	lr

0800a000 <atan2>:
 800a000:	f000 bbda 	b.w	800a7b8 <__ieee754_atan2>

0800a004 <fmod>:
 800a004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a006:	ed2d 8b02 	vpush	{d8}
 800a00a:	ec57 6b10 	vmov	r6, r7, d0
 800a00e:	ec55 4b11 	vmov	r4, r5, d1
 800a012:	f000 fc97 	bl	800a944 <__ieee754_fmod>
 800a016:	4622      	mov	r2, r4
 800a018:	462b      	mov	r3, r5
 800a01a:	4630      	mov	r0, r6
 800a01c:	4639      	mov	r1, r7
 800a01e:	eeb0 8a40 	vmov.f32	s16, s0
 800a022:	eef0 8a60 	vmov.f32	s17, s1
 800a026:	f7f6 fda1 	bl	8000b6c <__aeabi_dcmpun>
 800a02a:	b990      	cbnz	r0, 800a052 <fmod+0x4e>
 800a02c:	2200      	movs	r2, #0
 800a02e:	2300      	movs	r3, #0
 800a030:	4620      	mov	r0, r4
 800a032:	4629      	mov	r1, r5
 800a034:	f7f6 fd68 	bl	8000b08 <__aeabi_dcmpeq>
 800a038:	b158      	cbz	r0, 800a052 <fmod+0x4e>
 800a03a:	f7ff f873 	bl	8009124 <__errno>
 800a03e:	2321      	movs	r3, #33	@ 0x21
 800a040:	6003      	str	r3, [r0, #0]
 800a042:	2200      	movs	r2, #0
 800a044:	2300      	movs	r3, #0
 800a046:	4610      	mov	r0, r2
 800a048:	4619      	mov	r1, r3
 800a04a:	f7f6 fc1f 	bl	800088c <__aeabi_ddiv>
 800a04e:	ec41 0b18 	vmov	d8, r0, r1
 800a052:	eeb0 0a48 	vmov.f32	s0, s16
 800a056:	eef0 0a68 	vmov.f32	s1, s17
 800a05a:	ecbd 8b02 	vpop	{d8}
 800a05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a060 <pow>:
 800a060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a062:	ed2d 8b02 	vpush	{d8}
 800a066:	eeb0 8a40 	vmov.f32	s16, s0
 800a06a:	eef0 8a60 	vmov.f32	s17, s1
 800a06e:	ec55 4b11 	vmov	r4, r5, d1
 800a072:	f000 fd71 	bl	800ab58 <__ieee754_pow>
 800a076:	4622      	mov	r2, r4
 800a078:	462b      	mov	r3, r5
 800a07a:	4620      	mov	r0, r4
 800a07c:	4629      	mov	r1, r5
 800a07e:	ec57 6b10 	vmov	r6, r7, d0
 800a082:	f7f6 fd73 	bl	8000b6c <__aeabi_dcmpun>
 800a086:	2800      	cmp	r0, #0
 800a088:	d13b      	bne.n	800a102 <pow+0xa2>
 800a08a:	ec51 0b18 	vmov	r0, r1, d8
 800a08e:	2200      	movs	r2, #0
 800a090:	2300      	movs	r3, #0
 800a092:	f7f6 fd39 	bl	8000b08 <__aeabi_dcmpeq>
 800a096:	b1b8      	cbz	r0, 800a0c8 <pow+0x68>
 800a098:	2200      	movs	r2, #0
 800a09a:	2300      	movs	r3, #0
 800a09c:	4620      	mov	r0, r4
 800a09e:	4629      	mov	r1, r5
 800a0a0:	f7f6 fd32 	bl	8000b08 <__aeabi_dcmpeq>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	d146      	bne.n	800a136 <pow+0xd6>
 800a0a8:	ec45 4b10 	vmov	d0, r4, r5
 800a0ac:	f000 f91c 	bl	800a2e8 <finite>
 800a0b0:	b338      	cbz	r0, 800a102 <pow+0xa2>
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	4629      	mov	r1, r5
 800a0ba:	f7f6 fd2f 	bl	8000b1c <__aeabi_dcmplt>
 800a0be:	b300      	cbz	r0, 800a102 <pow+0xa2>
 800a0c0:	f7ff f830 	bl	8009124 <__errno>
 800a0c4:	2322      	movs	r3, #34	@ 0x22
 800a0c6:	e01b      	b.n	800a100 <pow+0xa0>
 800a0c8:	ec47 6b10 	vmov	d0, r6, r7
 800a0cc:	f000 f90c 	bl	800a2e8 <finite>
 800a0d0:	b9e0      	cbnz	r0, 800a10c <pow+0xac>
 800a0d2:	eeb0 0a48 	vmov.f32	s0, s16
 800a0d6:	eef0 0a68 	vmov.f32	s1, s17
 800a0da:	f000 f905 	bl	800a2e8 <finite>
 800a0de:	b1a8      	cbz	r0, 800a10c <pow+0xac>
 800a0e0:	ec45 4b10 	vmov	d0, r4, r5
 800a0e4:	f000 f900 	bl	800a2e8 <finite>
 800a0e8:	b180      	cbz	r0, 800a10c <pow+0xac>
 800a0ea:	4632      	mov	r2, r6
 800a0ec:	463b      	mov	r3, r7
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	4639      	mov	r1, r7
 800a0f2:	f7f6 fd3b 	bl	8000b6c <__aeabi_dcmpun>
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	d0e2      	beq.n	800a0c0 <pow+0x60>
 800a0fa:	f7ff f813 	bl	8009124 <__errno>
 800a0fe:	2321      	movs	r3, #33	@ 0x21
 800a100:	6003      	str	r3, [r0, #0]
 800a102:	ecbd 8b02 	vpop	{d8}
 800a106:	ec47 6b10 	vmov	d0, r6, r7
 800a10a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a10c:	2200      	movs	r2, #0
 800a10e:	2300      	movs	r3, #0
 800a110:	4630      	mov	r0, r6
 800a112:	4639      	mov	r1, r7
 800a114:	f7f6 fcf8 	bl	8000b08 <__aeabi_dcmpeq>
 800a118:	2800      	cmp	r0, #0
 800a11a:	d0f2      	beq.n	800a102 <pow+0xa2>
 800a11c:	eeb0 0a48 	vmov.f32	s0, s16
 800a120:	eef0 0a68 	vmov.f32	s1, s17
 800a124:	f000 f8e0 	bl	800a2e8 <finite>
 800a128:	2800      	cmp	r0, #0
 800a12a:	d0ea      	beq.n	800a102 <pow+0xa2>
 800a12c:	ec45 4b10 	vmov	d0, r4, r5
 800a130:	f000 f8da 	bl	800a2e8 <finite>
 800a134:	e7c3      	b.n	800a0be <pow+0x5e>
 800a136:	4f01      	ldr	r7, [pc, #4]	@ (800a13c <pow+0xdc>)
 800a138:	2600      	movs	r6, #0
 800a13a:	e7e2      	b.n	800a102 <pow+0xa2>
 800a13c:	3ff00000 	.word	0x3ff00000

0800a140 <sqrt>:
 800a140:	b538      	push	{r3, r4, r5, lr}
 800a142:	ed2d 8b02 	vpush	{d8}
 800a146:	ec55 4b10 	vmov	r4, r5, d0
 800a14a:	f000 f8d9 	bl	800a300 <__ieee754_sqrt>
 800a14e:	4622      	mov	r2, r4
 800a150:	462b      	mov	r3, r5
 800a152:	4620      	mov	r0, r4
 800a154:	4629      	mov	r1, r5
 800a156:	eeb0 8a40 	vmov.f32	s16, s0
 800a15a:	eef0 8a60 	vmov.f32	s17, s1
 800a15e:	f7f6 fd05 	bl	8000b6c <__aeabi_dcmpun>
 800a162:	b990      	cbnz	r0, 800a18a <sqrt+0x4a>
 800a164:	2200      	movs	r2, #0
 800a166:	2300      	movs	r3, #0
 800a168:	4620      	mov	r0, r4
 800a16a:	4629      	mov	r1, r5
 800a16c:	f7f6 fcd6 	bl	8000b1c <__aeabi_dcmplt>
 800a170:	b158      	cbz	r0, 800a18a <sqrt+0x4a>
 800a172:	f7fe ffd7 	bl	8009124 <__errno>
 800a176:	2321      	movs	r3, #33	@ 0x21
 800a178:	6003      	str	r3, [r0, #0]
 800a17a:	2200      	movs	r2, #0
 800a17c:	2300      	movs	r3, #0
 800a17e:	4610      	mov	r0, r2
 800a180:	4619      	mov	r1, r3
 800a182:	f7f6 fb83 	bl	800088c <__aeabi_ddiv>
 800a186:	ec41 0b18 	vmov	d8, r0, r1
 800a18a:	eeb0 0a48 	vmov.f32	s0, s16
 800a18e:	eef0 0a68 	vmov.f32	s1, s17
 800a192:	ecbd 8b02 	vpop	{d8}
 800a196:	bd38      	pop	{r3, r4, r5, pc}

0800a198 <cos>:
 800a198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a19a:	ec53 2b10 	vmov	r2, r3, d0
 800a19e:	4826      	ldr	r0, [pc, #152]	@ (800a238 <cos+0xa0>)
 800a1a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a1a4:	4281      	cmp	r1, r0
 800a1a6:	d806      	bhi.n	800a1b6 <cos+0x1e>
 800a1a8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a230 <cos+0x98>
 800a1ac:	b005      	add	sp, #20
 800a1ae:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1b2:	f000 b97d 	b.w	800a4b0 <__kernel_cos>
 800a1b6:	4821      	ldr	r0, [pc, #132]	@ (800a23c <cos+0xa4>)
 800a1b8:	4281      	cmp	r1, r0
 800a1ba:	d908      	bls.n	800a1ce <cos+0x36>
 800a1bc:	4610      	mov	r0, r2
 800a1be:	4619      	mov	r1, r3
 800a1c0:	f7f6 f882 	bl	80002c8 <__aeabi_dsub>
 800a1c4:	ec41 0b10 	vmov	d0, r0, r1
 800a1c8:	b005      	add	sp, #20
 800a1ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800a1ce:	4668      	mov	r0, sp
 800a1d0:	f001 fa0e 	bl	800b5f0 <__ieee754_rem_pio2>
 800a1d4:	f000 0003 	and.w	r0, r0, #3
 800a1d8:	2801      	cmp	r0, #1
 800a1da:	d00b      	beq.n	800a1f4 <cos+0x5c>
 800a1dc:	2802      	cmp	r0, #2
 800a1de:	d015      	beq.n	800a20c <cos+0x74>
 800a1e0:	b9d8      	cbnz	r0, 800a21a <cos+0x82>
 800a1e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a1e6:	ed9d 0b00 	vldr	d0, [sp]
 800a1ea:	f000 f961 	bl	800a4b0 <__kernel_cos>
 800a1ee:	ec51 0b10 	vmov	r0, r1, d0
 800a1f2:	e7e7      	b.n	800a1c4 <cos+0x2c>
 800a1f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a1f8:	ed9d 0b00 	vldr	d0, [sp]
 800a1fc:	f000 fa20 	bl	800a640 <__kernel_sin>
 800a200:	ec53 2b10 	vmov	r2, r3, d0
 800a204:	4610      	mov	r0, r2
 800a206:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a20a:	e7db      	b.n	800a1c4 <cos+0x2c>
 800a20c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a210:	ed9d 0b00 	vldr	d0, [sp]
 800a214:	f000 f94c 	bl	800a4b0 <__kernel_cos>
 800a218:	e7f2      	b.n	800a200 <cos+0x68>
 800a21a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a21e:	ed9d 0b00 	vldr	d0, [sp]
 800a222:	2001      	movs	r0, #1
 800a224:	f000 fa0c 	bl	800a640 <__kernel_sin>
 800a228:	e7e1      	b.n	800a1ee <cos+0x56>
 800a22a:	bf00      	nop
 800a22c:	f3af 8000 	nop.w
	...
 800a238:	3fe921fb 	.word	0x3fe921fb
 800a23c:	7fefffff 	.word	0x7fefffff

0800a240 <sin>:
 800a240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a242:	ec53 2b10 	vmov	r2, r3, d0
 800a246:	4826      	ldr	r0, [pc, #152]	@ (800a2e0 <sin+0xa0>)
 800a248:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a24c:	4281      	cmp	r1, r0
 800a24e:	d807      	bhi.n	800a260 <sin+0x20>
 800a250:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a2d8 <sin+0x98>
 800a254:	2000      	movs	r0, #0
 800a256:	b005      	add	sp, #20
 800a258:	f85d eb04 	ldr.w	lr, [sp], #4
 800a25c:	f000 b9f0 	b.w	800a640 <__kernel_sin>
 800a260:	4820      	ldr	r0, [pc, #128]	@ (800a2e4 <sin+0xa4>)
 800a262:	4281      	cmp	r1, r0
 800a264:	d908      	bls.n	800a278 <sin+0x38>
 800a266:	4610      	mov	r0, r2
 800a268:	4619      	mov	r1, r3
 800a26a:	f7f6 f82d 	bl	80002c8 <__aeabi_dsub>
 800a26e:	ec41 0b10 	vmov	d0, r0, r1
 800a272:	b005      	add	sp, #20
 800a274:	f85d fb04 	ldr.w	pc, [sp], #4
 800a278:	4668      	mov	r0, sp
 800a27a:	f001 f9b9 	bl	800b5f0 <__ieee754_rem_pio2>
 800a27e:	f000 0003 	and.w	r0, r0, #3
 800a282:	2801      	cmp	r0, #1
 800a284:	d00c      	beq.n	800a2a0 <sin+0x60>
 800a286:	2802      	cmp	r0, #2
 800a288:	d011      	beq.n	800a2ae <sin+0x6e>
 800a28a:	b9e8      	cbnz	r0, 800a2c8 <sin+0x88>
 800a28c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a290:	ed9d 0b00 	vldr	d0, [sp]
 800a294:	2001      	movs	r0, #1
 800a296:	f000 f9d3 	bl	800a640 <__kernel_sin>
 800a29a:	ec51 0b10 	vmov	r0, r1, d0
 800a29e:	e7e6      	b.n	800a26e <sin+0x2e>
 800a2a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a2a4:	ed9d 0b00 	vldr	d0, [sp]
 800a2a8:	f000 f902 	bl	800a4b0 <__kernel_cos>
 800a2ac:	e7f5      	b.n	800a29a <sin+0x5a>
 800a2ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a2b2:	ed9d 0b00 	vldr	d0, [sp]
 800a2b6:	2001      	movs	r0, #1
 800a2b8:	f000 f9c2 	bl	800a640 <__kernel_sin>
 800a2bc:	ec53 2b10 	vmov	r2, r3, d0
 800a2c0:	4610      	mov	r0, r2
 800a2c2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a2c6:	e7d2      	b.n	800a26e <sin+0x2e>
 800a2c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a2cc:	ed9d 0b00 	vldr	d0, [sp]
 800a2d0:	f000 f8ee 	bl	800a4b0 <__kernel_cos>
 800a2d4:	e7f2      	b.n	800a2bc <sin+0x7c>
 800a2d6:	bf00      	nop
	...
 800a2e0:	3fe921fb 	.word	0x3fe921fb
 800a2e4:	7fefffff 	.word	0x7fefffff

0800a2e8 <finite>:
 800a2e8:	b082      	sub	sp, #8
 800a2ea:	ed8d 0b00 	vstr	d0, [sp]
 800a2ee:	9801      	ldr	r0, [sp, #4]
 800a2f0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800a2f4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a2f8:	0fc0      	lsrs	r0, r0, #31
 800a2fa:	b002      	add	sp, #8
 800a2fc:	4770      	bx	lr
	...

0800a300 <__ieee754_sqrt>:
 800a300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a304:	4a66      	ldr	r2, [pc, #408]	@ (800a4a0 <__ieee754_sqrt+0x1a0>)
 800a306:	ec55 4b10 	vmov	r4, r5, d0
 800a30a:	43aa      	bics	r2, r5
 800a30c:	462b      	mov	r3, r5
 800a30e:	4621      	mov	r1, r4
 800a310:	d110      	bne.n	800a334 <__ieee754_sqrt+0x34>
 800a312:	4622      	mov	r2, r4
 800a314:	4620      	mov	r0, r4
 800a316:	4629      	mov	r1, r5
 800a318:	f7f6 f98e 	bl	8000638 <__aeabi_dmul>
 800a31c:	4602      	mov	r2, r0
 800a31e:	460b      	mov	r3, r1
 800a320:	4620      	mov	r0, r4
 800a322:	4629      	mov	r1, r5
 800a324:	f7f5 ffd2 	bl	80002cc <__adddf3>
 800a328:	4604      	mov	r4, r0
 800a32a:	460d      	mov	r5, r1
 800a32c:	ec45 4b10 	vmov	d0, r4, r5
 800a330:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a334:	2d00      	cmp	r5, #0
 800a336:	dc0e      	bgt.n	800a356 <__ieee754_sqrt+0x56>
 800a338:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a33c:	4322      	orrs	r2, r4
 800a33e:	d0f5      	beq.n	800a32c <__ieee754_sqrt+0x2c>
 800a340:	b19d      	cbz	r5, 800a36a <__ieee754_sqrt+0x6a>
 800a342:	4622      	mov	r2, r4
 800a344:	4620      	mov	r0, r4
 800a346:	4629      	mov	r1, r5
 800a348:	f7f5 ffbe 	bl	80002c8 <__aeabi_dsub>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	f7f6 fa9c 	bl	800088c <__aeabi_ddiv>
 800a354:	e7e8      	b.n	800a328 <__ieee754_sqrt+0x28>
 800a356:	152a      	asrs	r2, r5, #20
 800a358:	d115      	bne.n	800a386 <__ieee754_sqrt+0x86>
 800a35a:	2000      	movs	r0, #0
 800a35c:	e009      	b.n	800a372 <__ieee754_sqrt+0x72>
 800a35e:	0acb      	lsrs	r3, r1, #11
 800a360:	3a15      	subs	r2, #21
 800a362:	0549      	lsls	r1, r1, #21
 800a364:	2b00      	cmp	r3, #0
 800a366:	d0fa      	beq.n	800a35e <__ieee754_sqrt+0x5e>
 800a368:	e7f7      	b.n	800a35a <__ieee754_sqrt+0x5a>
 800a36a:	462a      	mov	r2, r5
 800a36c:	e7fa      	b.n	800a364 <__ieee754_sqrt+0x64>
 800a36e:	005b      	lsls	r3, r3, #1
 800a370:	3001      	adds	r0, #1
 800a372:	02dc      	lsls	r4, r3, #11
 800a374:	d5fb      	bpl.n	800a36e <__ieee754_sqrt+0x6e>
 800a376:	1e44      	subs	r4, r0, #1
 800a378:	1b12      	subs	r2, r2, r4
 800a37a:	f1c0 0420 	rsb	r4, r0, #32
 800a37e:	fa21 f404 	lsr.w	r4, r1, r4
 800a382:	4323      	orrs	r3, r4
 800a384:	4081      	lsls	r1, r0
 800a386:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a38a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800a38e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a392:	07d2      	lsls	r2, r2, #31
 800a394:	bf5c      	itt	pl
 800a396:	005b      	lslpl	r3, r3, #1
 800a398:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a39c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a3a0:	bf58      	it	pl
 800a3a2:	0049      	lslpl	r1, r1, #1
 800a3a4:	2600      	movs	r6, #0
 800a3a6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a3aa:	107f      	asrs	r7, r7, #1
 800a3ac:	0049      	lsls	r1, r1, #1
 800a3ae:	2016      	movs	r0, #22
 800a3b0:	4632      	mov	r2, r6
 800a3b2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a3b6:	1915      	adds	r5, r2, r4
 800a3b8:	429d      	cmp	r5, r3
 800a3ba:	bfde      	ittt	le
 800a3bc:	192a      	addle	r2, r5, r4
 800a3be:	1b5b      	suble	r3, r3, r5
 800a3c0:	1936      	addle	r6, r6, r4
 800a3c2:	0fcd      	lsrs	r5, r1, #31
 800a3c4:	3801      	subs	r0, #1
 800a3c6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800a3ca:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a3ce:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a3d2:	d1f0      	bne.n	800a3b6 <__ieee754_sqrt+0xb6>
 800a3d4:	4605      	mov	r5, r0
 800a3d6:	2420      	movs	r4, #32
 800a3d8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	eb0c 0e00 	add.w	lr, ip, r0
 800a3e2:	dc02      	bgt.n	800a3ea <__ieee754_sqrt+0xea>
 800a3e4:	d113      	bne.n	800a40e <__ieee754_sqrt+0x10e>
 800a3e6:	458e      	cmp	lr, r1
 800a3e8:	d811      	bhi.n	800a40e <__ieee754_sqrt+0x10e>
 800a3ea:	f1be 0f00 	cmp.w	lr, #0
 800a3ee:	eb0e 000c 	add.w	r0, lr, ip
 800a3f2:	da3f      	bge.n	800a474 <__ieee754_sqrt+0x174>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	db3d      	blt.n	800a474 <__ieee754_sqrt+0x174>
 800a3f8:	f102 0801 	add.w	r8, r2, #1
 800a3fc:	1a9b      	subs	r3, r3, r2
 800a3fe:	458e      	cmp	lr, r1
 800a400:	bf88      	it	hi
 800a402:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a406:	eba1 010e 	sub.w	r1, r1, lr
 800a40a:	4465      	add	r5, ip
 800a40c:	4642      	mov	r2, r8
 800a40e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a412:	3c01      	subs	r4, #1
 800a414:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a418:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a41c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a420:	d1dc      	bne.n	800a3dc <__ieee754_sqrt+0xdc>
 800a422:	4319      	orrs	r1, r3
 800a424:	d01b      	beq.n	800a45e <__ieee754_sqrt+0x15e>
 800a426:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800a4a4 <__ieee754_sqrt+0x1a4>
 800a42a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800a4a8 <__ieee754_sqrt+0x1a8>
 800a42e:	e9da 0100 	ldrd	r0, r1, [sl]
 800a432:	e9db 2300 	ldrd	r2, r3, [fp]
 800a436:	f7f5 ff47 	bl	80002c8 <__aeabi_dsub>
 800a43a:	e9da 8900 	ldrd	r8, r9, [sl]
 800a43e:	4602      	mov	r2, r0
 800a440:	460b      	mov	r3, r1
 800a442:	4640      	mov	r0, r8
 800a444:	4649      	mov	r1, r9
 800a446:	f7f6 fb73 	bl	8000b30 <__aeabi_dcmple>
 800a44a:	b140      	cbz	r0, 800a45e <__ieee754_sqrt+0x15e>
 800a44c:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a450:	e9da 0100 	ldrd	r0, r1, [sl]
 800a454:	e9db 2300 	ldrd	r2, r3, [fp]
 800a458:	d10e      	bne.n	800a478 <__ieee754_sqrt+0x178>
 800a45a:	3601      	adds	r6, #1
 800a45c:	4625      	mov	r5, r4
 800a45e:	1073      	asrs	r3, r6, #1
 800a460:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800a464:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800a468:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800a46c:	086b      	lsrs	r3, r5, #1
 800a46e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800a472:	e759      	b.n	800a328 <__ieee754_sqrt+0x28>
 800a474:	4690      	mov	r8, r2
 800a476:	e7c1      	b.n	800a3fc <__ieee754_sqrt+0xfc>
 800a478:	f7f5 ff28 	bl	80002cc <__adddf3>
 800a47c:	e9da 8900 	ldrd	r8, r9, [sl]
 800a480:	4602      	mov	r2, r0
 800a482:	460b      	mov	r3, r1
 800a484:	4640      	mov	r0, r8
 800a486:	4649      	mov	r1, r9
 800a488:	f7f6 fb48 	bl	8000b1c <__aeabi_dcmplt>
 800a48c:	b120      	cbz	r0, 800a498 <__ieee754_sqrt+0x198>
 800a48e:	1cab      	adds	r3, r5, #2
 800a490:	bf08      	it	eq
 800a492:	3601      	addeq	r6, #1
 800a494:	3502      	adds	r5, #2
 800a496:	e7e2      	b.n	800a45e <__ieee754_sqrt+0x15e>
 800a498:	1c6b      	adds	r3, r5, #1
 800a49a:	f023 0501 	bic.w	r5, r3, #1
 800a49e:	e7de      	b.n	800a45e <__ieee754_sqrt+0x15e>
 800a4a0:	7ff00000 	.word	0x7ff00000
 800a4a4:	0800ca70 	.word	0x0800ca70
 800a4a8:	0800ca68 	.word	0x0800ca68
 800a4ac:	00000000 	.word	0x00000000

0800a4b0 <__kernel_cos>:
 800a4b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b4:	ec57 6b10 	vmov	r6, r7, d0
 800a4b8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a4bc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800a4c0:	ed8d 1b00 	vstr	d1, [sp]
 800a4c4:	d206      	bcs.n	800a4d4 <__kernel_cos+0x24>
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	4639      	mov	r1, r7
 800a4ca:	f7f6 fb65 	bl	8000b98 <__aeabi_d2iz>
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	f000 8088 	beq.w	800a5e4 <__kernel_cos+0x134>
 800a4d4:	4632      	mov	r2, r6
 800a4d6:	463b      	mov	r3, r7
 800a4d8:	4630      	mov	r0, r6
 800a4da:	4639      	mov	r1, r7
 800a4dc:	f7f6 f8ac 	bl	8000638 <__aeabi_dmul>
 800a4e0:	4b51      	ldr	r3, [pc, #324]	@ (800a628 <__kernel_cos+0x178>)
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	460d      	mov	r5, r1
 800a4e8:	f7f6 f8a6 	bl	8000638 <__aeabi_dmul>
 800a4ec:	a340      	add	r3, pc, #256	@ (adr r3, 800a5f0 <__kernel_cos+0x140>)
 800a4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f2:	4682      	mov	sl, r0
 800a4f4:	468b      	mov	fp, r1
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	4629      	mov	r1, r5
 800a4fa:	f7f6 f89d 	bl	8000638 <__aeabi_dmul>
 800a4fe:	a33e      	add	r3, pc, #248	@ (adr r3, 800a5f8 <__kernel_cos+0x148>)
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	f7f5 fee2 	bl	80002cc <__adddf3>
 800a508:	4622      	mov	r2, r4
 800a50a:	462b      	mov	r3, r5
 800a50c:	f7f6 f894 	bl	8000638 <__aeabi_dmul>
 800a510:	a33b      	add	r3, pc, #236	@ (adr r3, 800a600 <__kernel_cos+0x150>)
 800a512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a516:	f7f5 fed7 	bl	80002c8 <__aeabi_dsub>
 800a51a:	4622      	mov	r2, r4
 800a51c:	462b      	mov	r3, r5
 800a51e:	f7f6 f88b 	bl	8000638 <__aeabi_dmul>
 800a522:	a339      	add	r3, pc, #228	@ (adr r3, 800a608 <__kernel_cos+0x158>)
 800a524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a528:	f7f5 fed0 	bl	80002cc <__adddf3>
 800a52c:	4622      	mov	r2, r4
 800a52e:	462b      	mov	r3, r5
 800a530:	f7f6 f882 	bl	8000638 <__aeabi_dmul>
 800a534:	a336      	add	r3, pc, #216	@ (adr r3, 800a610 <__kernel_cos+0x160>)
 800a536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53a:	f7f5 fec5 	bl	80002c8 <__aeabi_dsub>
 800a53e:	4622      	mov	r2, r4
 800a540:	462b      	mov	r3, r5
 800a542:	f7f6 f879 	bl	8000638 <__aeabi_dmul>
 800a546:	a334      	add	r3, pc, #208	@ (adr r3, 800a618 <__kernel_cos+0x168>)
 800a548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54c:	f7f5 febe 	bl	80002cc <__adddf3>
 800a550:	4622      	mov	r2, r4
 800a552:	462b      	mov	r3, r5
 800a554:	f7f6 f870 	bl	8000638 <__aeabi_dmul>
 800a558:	4622      	mov	r2, r4
 800a55a:	462b      	mov	r3, r5
 800a55c:	f7f6 f86c 	bl	8000638 <__aeabi_dmul>
 800a560:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a564:	4604      	mov	r4, r0
 800a566:	460d      	mov	r5, r1
 800a568:	4630      	mov	r0, r6
 800a56a:	4639      	mov	r1, r7
 800a56c:	f7f6 f864 	bl	8000638 <__aeabi_dmul>
 800a570:	460b      	mov	r3, r1
 800a572:	4602      	mov	r2, r0
 800a574:	4629      	mov	r1, r5
 800a576:	4620      	mov	r0, r4
 800a578:	f7f5 fea6 	bl	80002c8 <__aeabi_dsub>
 800a57c:	4b2b      	ldr	r3, [pc, #172]	@ (800a62c <__kernel_cos+0x17c>)
 800a57e:	4598      	cmp	r8, r3
 800a580:	4606      	mov	r6, r0
 800a582:	460f      	mov	r7, r1
 800a584:	d810      	bhi.n	800a5a8 <__kernel_cos+0xf8>
 800a586:	4602      	mov	r2, r0
 800a588:	460b      	mov	r3, r1
 800a58a:	4650      	mov	r0, sl
 800a58c:	4659      	mov	r1, fp
 800a58e:	f7f5 fe9b 	bl	80002c8 <__aeabi_dsub>
 800a592:	460b      	mov	r3, r1
 800a594:	4926      	ldr	r1, [pc, #152]	@ (800a630 <__kernel_cos+0x180>)
 800a596:	4602      	mov	r2, r0
 800a598:	2000      	movs	r0, #0
 800a59a:	f7f5 fe95 	bl	80002c8 <__aeabi_dsub>
 800a59e:	ec41 0b10 	vmov	d0, r0, r1
 800a5a2:	b003      	add	sp, #12
 800a5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a8:	4b22      	ldr	r3, [pc, #136]	@ (800a634 <__kernel_cos+0x184>)
 800a5aa:	4921      	ldr	r1, [pc, #132]	@ (800a630 <__kernel_cos+0x180>)
 800a5ac:	4598      	cmp	r8, r3
 800a5ae:	bf8c      	ite	hi
 800a5b0:	4d21      	ldrhi	r5, [pc, #132]	@ (800a638 <__kernel_cos+0x188>)
 800a5b2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800a5b6:	2400      	movs	r4, #0
 800a5b8:	4622      	mov	r2, r4
 800a5ba:	462b      	mov	r3, r5
 800a5bc:	2000      	movs	r0, #0
 800a5be:	f7f5 fe83 	bl	80002c8 <__aeabi_dsub>
 800a5c2:	4622      	mov	r2, r4
 800a5c4:	4680      	mov	r8, r0
 800a5c6:	4689      	mov	r9, r1
 800a5c8:	462b      	mov	r3, r5
 800a5ca:	4650      	mov	r0, sl
 800a5cc:	4659      	mov	r1, fp
 800a5ce:	f7f5 fe7b 	bl	80002c8 <__aeabi_dsub>
 800a5d2:	4632      	mov	r2, r6
 800a5d4:	463b      	mov	r3, r7
 800a5d6:	f7f5 fe77 	bl	80002c8 <__aeabi_dsub>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	460b      	mov	r3, r1
 800a5de:	4640      	mov	r0, r8
 800a5e0:	4649      	mov	r1, r9
 800a5e2:	e7da      	b.n	800a59a <__kernel_cos+0xea>
 800a5e4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800a620 <__kernel_cos+0x170>
 800a5e8:	e7db      	b.n	800a5a2 <__kernel_cos+0xf2>
 800a5ea:	bf00      	nop
 800a5ec:	f3af 8000 	nop.w
 800a5f0:	be8838d4 	.word	0xbe8838d4
 800a5f4:	bda8fae9 	.word	0xbda8fae9
 800a5f8:	bdb4b1c4 	.word	0xbdb4b1c4
 800a5fc:	3e21ee9e 	.word	0x3e21ee9e
 800a600:	809c52ad 	.word	0x809c52ad
 800a604:	3e927e4f 	.word	0x3e927e4f
 800a608:	19cb1590 	.word	0x19cb1590
 800a60c:	3efa01a0 	.word	0x3efa01a0
 800a610:	16c15177 	.word	0x16c15177
 800a614:	3f56c16c 	.word	0x3f56c16c
 800a618:	5555554c 	.word	0x5555554c
 800a61c:	3fa55555 	.word	0x3fa55555
 800a620:	00000000 	.word	0x00000000
 800a624:	3ff00000 	.word	0x3ff00000
 800a628:	3fe00000 	.word	0x3fe00000
 800a62c:	3fd33332 	.word	0x3fd33332
 800a630:	3ff00000 	.word	0x3ff00000
 800a634:	3fe90000 	.word	0x3fe90000
 800a638:	3fd20000 	.word	0x3fd20000
 800a63c:	00000000 	.word	0x00000000

0800a640 <__kernel_sin>:
 800a640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a644:	ec55 4b10 	vmov	r4, r5, d0
 800a648:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a64c:	b085      	sub	sp, #20
 800a64e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a652:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a656:	4680      	mov	r8, r0
 800a658:	d205      	bcs.n	800a666 <__kernel_sin+0x26>
 800a65a:	4620      	mov	r0, r4
 800a65c:	4629      	mov	r1, r5
 800a65e:	f7f6 fa9b 	bl	8000b98 <__aeabi_d2iz>
 800a662:	2800      	cmp	r0, #0
 800a664:	d052      	beq.n	800a70c <__kernel_sin+0xcc>
 800a666:	4622      	mov	r2, r4
 800a668:	462b      	mov	r3, r5
 800a66a:	4620      	mov	r0, r4
 800a66c:	4629      	mov	r1, r5
 800a66e:	f7f5 ffe3 	bl	8000638 <__aeabi_dmul>
 800a672:	4682      	mov	sl, r0
 800a674:	468b      	mov	fp, r1
 800a676:	4602      	mov	r2, r0
 800a678:	460b      	mov	r3, r1
 800a67a:	4620      	mov	r0, r4
 800a67c:	4629      	mov	r1, r5
 800a67e:	f7f5 ffdb 	bl	8000638 <__aeabi_dmul>
 800a682:	a342      	add	r3, pc, #264	@ (adr r3, 800a78c <__kernel_sin+0x14c>)
 800a684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a688:	e9cd 0100 	strd	r0, r1, [sp]
 800a68c:	4650      	mov	r0, sl
 800a68e:	4659      	mov	r1, fp
 800a690:	f7f5 ffd2 	bl	8000638 <__aeabi_dmul>
 800a694:	a33f      	add	r3, pc, #252	@ (adr r3, 800a794 <__kernel_sin+0x154>)
 800a696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69a:	f7f5 fe15 	bl	80002c8 <__aeabi_dsub>
 800a69e:	4652      	mov	r2, sl
 800a6a0:	465b      	mov	r3, fp
 800a6a2:	f7f5 ffc9 	bl	8000638 <__aeabi_dmul>
 800a6a6:	a33d      	add	r3, pc, #244	@ (adr r3, 800a79c <__kernel_sin+0x15c>)
 800a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ac:	f7f5 fe0e 	bl	80002cc <__adddf3>
 800a6b0:	4652      	mov	r2, sl
 800a6b2:	465b      	mov	r3, fp
 800a6b4:	f7f5 ffc0 	bl	8000638 <__aeabi_dmul>
 800a6b8:	a33a      	add	r3, pc, #232	@ (adr r3, 800a7a4 <__kernel_sin+0x164>)
 800a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6be:	f7f5 fe03 	bl	80002c8 <__aeabi_dsub>
 800a6c2:	4652      	mov	r2, sl
 800a6c4:	465b      	mov	r3, fp
 800a6c6:	f7f5 ffb7 	bl	8000638 <__aeabi_dmul>
 800a6ca:	a338      	add	r3, pc, #224	@ (adr r3, 800a7ac <__kernel_sin+0x16c>)
 800a6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d0:	f7f5 fdfc 	bl	80002cc <__adddf3>
 800a6d4:	4606      	mov	r6, r0
 800a6d6:	460f      	mov	r7, r1
 800a6d8:	f1b8 0f00 	cmp.w	r8, #0
 800a6dc:	d11b      	bne.n	800a716 <__kernel_sin+0xd6>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	4650      	mov	r0, sl
 800a6e4:	4659      	mov	r1, fp
 800a6e6:	f7f5 ffa7 	bl	8000638 <__aeabi_dmul>
 800a6ea:	a325      	add	r3, pc, #148	@ (adr r3, 800a780 <__kernel_sin+0x140>)
 800a6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f0:	f7f5 fdea 	bl	80002c8 <__aeabi_dsub>
 800a6f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6f8:	f7f5 ff9e 	bl	8000638 <__aeabi_dmul>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	460b      	mov	r3, r1
 800a700:	4620      	mov	r0, r4
 800a702:	4629      	mov	r1, r5
 800a704:	f7f5 fde2 	bl	80002cc <__adddf3>
 800a708:	4604      	mov	r4, r0
 800a70a:	460d      	mov	r5, r1
 800a70c:	ec45 4b10 	vmov	d0, r4, r5
 800a710:	b005      	add	sp, #20
 800a712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a71a:	4b1b      	ldr	r3, [pc, #108]	@ (800a788 <__kernel_sin+0x148>)
 800a71c:	2200      	movs	r2, #0
 800a71e:	f7f5 ff8b 	bl	8000638 <__aeabi_dmul>
 800a722:	4632      	mov	r2, r6
 800a724:	4680      	mov	r8, r0
 800a726:	4689      	mov	r9, r1
 800a728:	463b      	mov	r3, r7
 800a72a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a72e:	f7f5 ff83 	bl	8000638 <__aeabi_dmul>
 800a732:	4602      	mov	r2, r0
 800a734:	460b      	mov	r3, r1
 800a736:	4640      	mov	r0, r8
 800a738:	4649      	mov	r1, r9
 800a73a:	f7f5 fdc5 	bl	80002c8 <__aeabi_dsub>
 800a73e:	4652      	mov	r2, sl
 800a740:	465b      	mov	r3, fp
 800a742:	f7f5 ff79 	bl	8000638 <__aeabi_dmul>
 800a746:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a74a:	f7f5 fdbd 	bl	80002c8 <__aeabi_dsub>
 800a74e:	a30c      	add	r3, pc, #48	@ (adr r3, 800a780 <__kernel_sin+0x140>)
 800a750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a754:	4606      	mov	r6, r0
 800a756:	460f      	mov	r7, r1
 800a758:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a75c:	f7f5 ff6c 	bl	8000638 <__aeabi_dmul>
 800a760:	4602      	mov	r2, r0
 800a762:	460b      	mov	r3, r1
 800a764:	4630      	mov	r0, r6
 800a766:	4639      	mov	r1, r7
 800a768:	f7f5 fdb0 	bl	80002cc <__adddf3>
 800a76c:	4602      	mov	r2, r0
 800a76e:	460b      	mov	r3, r1
 800a770:	4620      	mov	r0, r4
 800a772:	4629      	mov	r1, r5
 800a774:	f7f5 fda8 	bl	80002c8 <__aeabi_dsub>
 800a778:	e7c6      	b.n	800a708 <__kernel_sin+0xc8>
 800a77a:	bf00      	nop
 800a77c:	f3af 8000 	nop.w
 800a780:	55555549 	.word	0x55555549
 800a784:	3fc55555 	.word	0x3fc55555
 800a788:	3fe00000 	.word	0x3fe00000
 800a78c:	5acfd57c 	.word	0x5acfd57c
 800a790:	3de5d93a 	.word	0x3de5d93a
 800a794:	8a2b9ceb 	.word	0x8a2b9ceb
 800a798:	3e5ae5e6 	.word	0x3e5ae5e6
 800a79c:	57b1fe7d 	.word	0x57b1fe7d
 800a7a0:	3ec71de3 	.word	0x3ec71de3
 800a7a4:	19c161d5 	.word	0x19c161d5
 800a7a8:	3f2a01a0 	.word	0x3f2a01a0
 800a7ac:	1110f8a6 	.word	0x1110f8a6
 800a7b0:	3f811111 	.word	0x3f811111
 800a7b4:	00000000 	.word	0x00000000

0800a7b8 <__ieee754_atan2>:
 800a7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7bc:	ec57 6b11 	vmov	r6, r7, d1
 800a7c0:	4273      	negs	r3, r6
 800a7c2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800a940 <__ieee754_atan2+0x188>
 800a7c6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800a7ca:	4333      	orrs	r3, r6
 800a7cc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a7d0:	4543      	cmp	r3, r8
 800a7d2:	ec51 0b10 	vmov	r0, r1, d0
 800a7d6:	4635      	mov	r5, r6
 800a7d8:	d809      	bhi.n	800a7ee <__ieee754_atan2+0x36>
 800a7da:	4244      	negs	r4, r0
 800a7dc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a7e0:	4304      	orrs	r4, r0
 800a7e2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a7e6:	4544      	cmp	r4, r8
 800a7e8:	468e      	mov	lr, r1
 800a7ea:	4681      	mov	r9, r0
 800a7ec:	d907      	bls.n	800a7fe <__ieee754_atan2+0x46>
 800a7ee:	4632      	mov	r2, r6
 800a7f0:	463b      	mov	r3, r7
 800a7f2:	f7f5 fd6b 	bl	80002cc <__adddf3>
 800a7f6:	ec41 0b10 	vmov	d0, r0, r1
 800a7fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7fe:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800a802:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800a806:	4334      	orrs	r4, r6
 800a808:	d103      	bne.n	800a812 <__ieee754_atan2+0x5a>
 800a80a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a80e:	f001 b8eb 	b.w	800b9e8 <atan>
 800a812:	17bc      	asrs	r4, r7, #30
 800a814:	f004 0402 	and.w	r4, r4, #2
 800a818:	ea53 0909 	orrs.w	r9, r3, r9
 800a81c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a820:	d107      	bne.n	800a832 <__ieee754_atan2+0x7a>
 800a822:	2c02      	cmp	r4, #2
 800a824:	d05f      	beq.n	800a8e6 <__ieee754_atan2+0x12e>
 800a826:	2c03      	cmp	r4, #3
 800a828:	d1e5      	bne.n	800a7f6 <__ieee754_atan2+0x3e>
 800a82a:	a143      	add	r1, pc, #268	@ (adr r1, 800a938 <__ieee754_atan2+0x180>)
 800a82c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a830:	e7e1      	b.n	800a7f6 <__ieee754_atan2+0x3e>
 800a832:	4315      	orrs	r5, r2
 800a834:	d106      	bne.n	800a844 <__ieee754_atan2+0x8c>
 800a836:	f1be 0f00 	cmp.w	lr, #0
 800a83a:	db5f      	blt.n	800a8fc <__ieee754_atan2+0x144>
 800a83c:	a136      	add	r1, pc, #216	@ (adr r1, 800a918 <__ieee754_atan2+0x160>)
 800a83e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a842:	e7d8      	b.n	800a7f6 <__ieee754_atan2+0x3e>
 800a844:	4542      	cmp	r2, r8
 800a846:	d10f      	bne.n	800a868 <__ieee754_atan2+0xb0>
 800a848:	4293      	cmp	r3, r2
 800a84a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a84e:	d107      	bne.n	800a860 <__ieee754_atan2+0xa8>
 800a850:	2c02      	cmp	r4, #2
 800a852:	d84c      	bhi.n	800a8ee <__ieee754_atan2+0x136>
 800a854:	4b36      	ldr	r3, [pc, #216]	@ (800a930 <__ieee754_atan2+0x178>)
 800a856:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a85a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a85e:	e7ca      	b.n	800a7f6 <__ieee754_atan2+0x3e>
 800a860:	2c02      	cmp	r4, #2
 800a862:	d848      	bhi.n	800a8f6 <__ieee754_atan2+0x13e>
 800a864:	4b33      	ldr	r3, [pc, #204]	@ (800a934 <__ieee754_atan2+0x17c>)
 800a866:	e7f6      	b.n	800a856 <__ieee754_atan2+0x9e>
 800a868:	4543      	cmp	r3, r8
 800a86a:	d0e4      	beq.n	800a836 <__ieee754_atan2+0x7e>
 800a86c:	1a9b      	subs	r3, r3, r2
 800a86e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800a872:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a876:	da1e      	bge.n	800a8b6 <__ieee754_atan2+0xfe>
 800a878:	2f00      	cmp	r7, #0
 800a87a:	da01      	bge.n	800a880 <__ieee754_atan2+0xc8>
 800a87c:	323c      	adds	r2, #60	@ 0x3c
 800a87e:	db1e      	blt.n	800a8be <__ieee754_atan2+0x106>
 800a880:	4632      	mov	r2, r6
 800a882:	463b      	mov	r3, r7
 800a884:	f7f6 f802 	bl	800088c <__aeabi_ddiv>
 800a888:	ec41 0b10 	vmov	d0, r0, r1
 800a88c:	f001 fa44 	bl	800bd18 <fabs>
 800a890:	f001 f8aa 	bl	800b9e8 <atan>
 800a894:	ec51 0b10 	vmov	r0, r1, d0
 800a898:	2c01      	cmp	r4, #1
 800a89a:	d013      	beq.n	800a8c4 <__ieee754_atan2+0x10c>
 800a89c:	2c02      	cmp	r4, #2
 800a89e:	d015      	beq.n	800a8cc <__ieee754_atan2+0x114>
 800a8a0:	2c00      	cmp	r4, #0
 800a8a2:	d0a8      	beq.n	800a7f6 <__ieee754_atan2+0x3e>
 800a8a4:	a318      	add	r3, pc, #96	@ (adr r3, 800a908 <__ieee754_atan2+0x150>)
 800a8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8aa:	f7f5 fd0d 	bl	80002c8 <__aeabi_dsub>
 800a8ae:	a318      	add	r3, pc, #96	@ (adr r3, 800a910 <__ieee754_atan2+0x158>)
 800a8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b4:	e014      	b.n	800a8e0 <__ieee754_atan2+0x128>
 800a8b6:	a118      	add	r1, pc, #96	@ (adr r1, 800a918 <__ieee754_atan2+0x160>)
 800a8b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8bc:	e7ec      	b.n	800a898 <__ieee754_atan2+0xe0>
 800a8be:	2000      	movs	r0, #0
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	e7e9      	b.n	800a898 <__ieee754_atan2+0xe0>
 800a8c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	e794      	b.n	800a7f6 <__ieee754_atan2+0x3e>
 800a8cc:	a30e      	add	r3, pc, #56	@ (adr r3, 800a908 <__ieee754_atan2+0x150>)
 800a8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d2:	f7f5 fcf9 	bl	80002c8 <__aeabi_dsub>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	460b      	mov	r3, r1
 800a8da:	a10d      	add	r1, pc, #52	@ (adr r1, 800a910 <__ieee754_atan2+0x158>)
 800a8dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8e0:	f7f5 fcf2 	bl	80002c8 <__aeabi_dsub>
 800a8e4:	e787      	b.n	800a7f6 <__ieee754_atan2+0x3e>
 800a8e6:	a10a      	add	r1, pc, #40	@ (adr r1, 800a910 <__ieee754_atan2+0x158>)
 800a8e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8ec:	e783      	b.n	800a7f6 <__ieee754_atan2+0x3e>
 800a8ee:	a10c      	add	r1, pc, #48	@ (adr r1, 800a920 <__ieee754_atan2+0x168>)
 800a8f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8f4:	e77f      	b.n	800a7f6 <__ieee754_atan2+0x3e>
 800a8f6:	2000      	movs	r0, #0
 800a8f8:	2100      	movs	r1, #0
 800a8fa:	e77c      	b.n	800a7f6 <__ieee754_atan2+0x3e>
 800a8fc:	a10a      	add	r1, pc, #40	@ (adr r1, 800a928 <__ieee754_atan2+0x170>)
 800a8fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a902:	e778      	b.n	800a7f6 <__ieee754_atan2+0x3e>
 800a904:	f3af 8000 	nop.w
 800a908:	33145c07 	.word	0x33145c07
 800a90c:	3ca1a626 	.word	0x3ca1a626
 800a910:	54442d18 	.word	0x54442d18
 800a914:	400921fb 	.word	0x400921fb
 800a918:	54442d18 	.word	0x54442d18
 800a91c:	3ff921fb 	.word	0x3ff921fb
 800a920:	54442d18 	.word	0x54442d18
 800a924:	3fe921fb 	.word	0x3fe921fb
 800a928:	54442d18 	.word	0x54442d18
 800a92c:	bff921fb 	.word	0xbff921fb
 800a930:	0800ca90 	.word	0x0800ca90
 800a934:	0800ca78 	.word	0x0800ca78
 800a938:	54442d18 	.word	0x54442d18
 800a93c:	c00921fb 	.word	0xc00921fb
 800a940:	7ff00000 	.word	0x7ff00000

0800a944 <__ieee754_fmod>:
 800a944:	ec53 2b11 	vmov	r2, r3, d1
 800a948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a94c:	f023 4800 	bic.w	r8, r3, #2147483648	@ 0x80000000
 800a950:	ea52 0408 	orrs.w	r4, r2, r8
 800a954:	ec51 0b10 	vmov	r0, r1, d0
 800a958:	461e      	mov	r6, r3
 800a95a:	4696      	mov	lr, r2
 800a95c:	4694      	mov	ip, r2
 800a95e:	d00c      	beq.n	800a97a <__ieee754_fmod+0x36>
 800a960:	4d76      	ldr	r5, [pc, #472]	@ (800ab3c <__ieee754_fmod+0x1f8>)
 800a962:	f021 4900 	bic.w	r9, r1, #2147483648	@ 0x80000000
 800a966:	45a9      	cmp	r9, r5
 800a968:	460c      	mov	r4, r1
 800a96a:	d806      	bhi.n	800a97a <__ieee754_fmod+0x36>
 800a96c:	4255      	negs	r5, r2
 800a96e:	4f74      	ldr	r7, [pc, #464]	@ (800ab40 <__ieee754_fmod+0x1fc>)
 800a970:	4315      	orrs	r5, r2
 800a972:	ea48 75d5 	orr.w	r5, r8, r5, lsr #31
 800a976:	42bd      	cmp	r5, r7
 800a978:	d909      	bls.n	800a98e <__ieee754_fmod+0x4a>
 800a97a:	f7f5 fe5d 	bl	8000638 <__aeabi_dmul>
 800a97e:	4602      	mov	r2, r0
 800a980:	460b      	mov	r3, r1
 800a982:	f7f5 ff83 	bl	800088c <__aeabi_ddiv>
 800a986:	ec41 0b10 	vmov	d0, r0, r1
 800a98a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a98e:	45c1      	cmp	r9, r8
 800a990:	4682      	mov	sl, r0
 800a992:	4607      	mov	r7, r0
 800a994:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800a998:	dc09      	bgt.n	800a9ae <__ieee754_fmod+0x6a>
 800a99a:	dbf4      	blt.n	800a986 <__ieee754_fmod+0x42>
 800a99c:	4282      	cmp	r2, r0
 800a99e:	d8f2      	bhi.n	800a986 <__ieee754_fmod+0x42>
 800a9a0:	d105      	bne.n	800a9ae <__ieee754_fmod+0x6a>
 800a9a2:	4b68      	ldr	r3, [pc, #416]	@ (800ab44 <__ieee754_fmod+0x200>)
 800a9a4:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800a9a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a9ac:	e7eb      	b.n	800a986 <__ieee754_fmod+0x42>
 800a9ae:	4964      	ldr	r1, [pc, #400]	@ (800ab40 <__ieee754_fmod+0x1fc>)
 800a9b0:	420c      	tst	r4, r1
 800a9b2:	d148      	bne.n	800aa46 <__ieee754_fmod+0x102>
 800a9b4:	f1b9 0f00 	cmp.w	r9, #0
 800a9b8:	d13d      	bne.n	800aa36 <__ieee754_fmod+0xf2>
 800a9ba:	4a63      	ldr	r2, [pc, #396]	@ (800ab48 <__ieee754_fmod+0x204>)
 800a9bc:	4653      	mov	r3, sl
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	dc36      	bgt.n	800aa30 <__ieee754_fmod+0xec>
 800a9c2:	420e      	tst	r6, r1
 800a9c4:	d14f      	bne.n	800aa66 <__ieee754_fmod+0x122>
 800a9c6:	f1b8 0f00 	cmp.w	r8, #0
 800a9ca:	d144      	bne.n	800aa56 <__ieee754_fmod+0x112>
 800a9cc:	4b5e      	ldr	r3, [pc, #376]	@ (800ab48 <__ieee754_fmod+0x204>)
 800a9ce:	4671      	mov	r1, lr
 800a9d0:	2900      	cmp	r1, #0
 800a9d2:	dc3d      	bgt.n	800aa50 <__ieee754_fmod+0x10c>
 800a9d4:	485d      	ldr	r0, [pc, #372]	@ (800ab4c <__ieee754_fmod+0x208>)
 800a9d6:	4282      	cmp	r2, r0
 800a9d8:	db4a      	blt.n	800aa70 <__ieee754_fmod+0x12c>
 800a9da:	f3c4 0113 	ubfx	r1, r4, #0, #20
 800a9de:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800a9e2:	485a      	ldr	r0, [pc, #360]	@ (800ab4c <__ieee754_fmod+0x208>)
 800a9e4:	4283      	cmp	r3, r0
 800a9e6:	db57      	blt.n	800aa98 <__ieee754_fmod+0x154>
 800a9e8:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800a9ec:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800a9f0:	1ad0      	subs	r0, r2, r3
 800a9f2:	1b8a      	subs	r2, r1, r6
 800a9f4:	eba7 040c 	sub.w	r4, r7, ip
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	d162      	bne.n	800aac2 <__ieee754_fmod+0x17e>
 800a9fc:	4567      	cmp	r7, ip
 800a9fe:	bf38      	it	cc
 800aa00:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800aa04:	2a00      	cmp	r2, #0
 800aa06:	bfbc      	itt	lt
 800aa08:	463c      	movlt	r4, r7
 800aa0a:	460a      	movlt	r2, r1
 800aa0c:	ea52 0104 	orrs.w	r1, r2, r4
 800aa10:	d0c7      	beq.n	800a9a2 <__ieee754_fmod+0x5e>
 800aa12:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800aa16:	db69      	blt.n	800aaec <__ieee754_fmod+0x1a8>
 800aa18:	494c      	ldr	r1, [pc, #304]	@ (800ab4c <__ieee754_fmod+0x208>)
 800aa1a:	428b      	cmp	r3, r1
 800aa1c:	db6c      	blt.n	800aaf8 <__ieee754_fmod+0x1b4>
 800aa1e:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 800aa22:	432a      	orrs	r2, r5
 800aa24:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800aa28:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	e7aa      	b.n	800a986 <__ieee754_fmod+0x42>
 800aa30:	3a01      	subs	r2, #1
 800aa32:	005b      	lsls	r3, r3, #1
 800aa34:	e7c3      	b.n	800a9be <__ieee754_fmod+0x7a>
 800aa36:	4a45      	ldr	r2, [pc, #276]	@ (800ab4c <__ieee754_fmod+0x208>)
 800aa38:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	ddc0      	ble.n	800a9c2 <__ieee754_fmod+0x7e>
 800aa40:	3a01      	subs	r2, #1
 800aa42:	005b      	lsls	r3, r3, #1
 800aa44:	e7fa      	b.n	800aa3c <__ieee754_fmod+0xf8>
 800aa46:	ea4f 5229 	mov.w	r2, r9, asr #20
 800aa4a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800aa4e:	e7b8      	b.n	800a9c2 <__ieee754_fmod+0x7e>
 800aa50:	3b01      	subs	r3, #1
 800aa52:	0049      	lsls	r1, r1, #1
 800aa54:	e7bc      	b.n	800a9d0 <__ieee754_fmod+0x8c>
 800aa56:	4b3d      	ldr	r3, [pc, #244]	@ (800ab4c <__ieee754_fmod+0x208>)
 800aa58:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800aa5c:	2900      	cmp	r1, #0
 800aa5e:	ddb9      	ble.n	800a9d4 <__ieee754_fmod+0x90>
 800aa60:	3b01      	subs	r3, #1
 800aa62:	0049      	lsls	r1, r1, #1
 800aa64:	e7fa      	b.n	800aa5c <__ieee754_fmod+0x118>
 800aa66:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aa6a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800aa6e:	e7b1      	b.n	800a9d4 <__ieee754_fmod+0x90>
 800aa70:	1a80      	subs	r0, r0, r2
 800aa72:	281f      	cmp	r0, #31
 800aa74:	dc0a      	bgt.n	800aa8c <__ieee754_fmod+0x148>
 800aa76:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 800aa7a:	fa09 f900 	lsl.w	r9, r9, r0
 800aa7e:	fa2a f101 	lsr.w	r1, sl, r1
 800aa82:	ea41 0109 	orr.w	r1, r1, r9
 800aa86:	fa0a f700 	lsl.w	r7, sl, r0
 800aa8a:	e7aa      	b.n	800a9e2 <__ieee754_fmod+0x9e>
 800aa8c:	4930      	ldr	r1, [pc, #192]	@ (800ab50 <__ieee754_fmod+0x20c>)
 800aa8e:	1a89      	subs	r1, r1, r2
 800aa90:	fa0a f101 	lsl.w	r1, sl, r1
 800aa94:	2700      	movs	r7, #0
 800aa96:	e7a4      	b.n	800a9e2 <__ieee754_fmod+0x9e>
 800aa98:	1ac0      	subs	r0, r0, r3
 800aa9a:	281f      	cmp	r0, #31
 800aa9c:	dc0a      	bgt.n	800aab4 <__ieee754_fmod+0x170>
 800aa9e:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 800aaa2:	fa08 f800 	lsl.w	r8, r8, r0
 800aaa6:	fa2e f606 	lsr.w	r6, lr, r6
 800aaaa:	ea46 0608 	orr.w	r6, r6, r8
 800aaae:	fa0e fc00 	lsl.w	ip, lr, r0
 800aab2:	e79d      	b.n	800a9f0 <__ieee754_fmod+0xac>
 800aab4:	4e26      	ldr	r6, [pc, #152]	@ (800ab50 <__ieee754_fmod+0x20c>)
 800aab6:	1af6      	subs	r6, r6, r3
 800aab8:	fa0e f606 	lsl.w	r6, lr, r6
 800aabc:	f04f 0c00 	mov.w	ip, #0
 800aac0:	e796      	b.n	800a9f0 <__ieee754_fmod+0xac>
 800aac2:	4567      	cmp	r7, ip
 800aac4:	bf38      	it	cc
 800aac6:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800aaca:	2a00      	cmp	r2, #0
 800aacc:	da05      	bge.n	800aada <__ieee754_fmod+0x196>
 800aace:	0ffa      	lsrs	r2, r7, #31
 800aad0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800aad4:	007f      	lsls	r7, r7, #1
 800aad6:	3801      	subs	r0, #1
 800aad8:	e78b      	b.n	800a9f2 <__ieee754_fmod+0xae>
 800aada:	ea52 0104 	orrs.w	r1, r2, r4
 800aade:	f43f af60 	beq.w	800a9a2 <__ieee754_fmod+0x5e>
 800aae2:	0fe1      	lsrs	r1, r4, #31
 800aae4:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800aae8:	0067      	lsls	r7, r4, #1
 800aaea:	e7f4      	b.n	800aad6 <__ieee754_fmod+0x192>
 800aaec:	0fe1      	lsrs	r1, r4, #31
 800aaee:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800aaf2:	0064      	lsls	r4, r4, #1
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	e78c      	b.n	800aa12 <__ieee754_fmod+0xce>
 800aaf8:	1ac9      	subs	r1, r1, r3
 800aafa:	2914      	cmp	r1, #20
 800aafc:	dc0a      	bgt.n	800ab14 <__ieee754_fmod+0x1d0>
 800aafe:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800ab02:	fa02 f303 	lsl.w	r3, r2, r3
 800ab06:	40cc      	lsrs	r4, r1
 800ab08:	4323      	orrs	r3, r4
 800ab0a:	410a      	asrs	r2, r1
 800ab0c:	ea42 0105 	orr.w	r1, r2, r5
 800ab10:	4618      	mov	r0, r3
 800ab12:	e738      	b.n	800a986 <__ieee754_fmod+0x42>
 800ab14:	291f      	cmp	r1, #31
 800ab16:	dc07      	bgt.n	800ab28 <__ieee754_fmod+0x1e4>
 800ab18:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800ab1c:	40cc      	lsrs	r4, r1
 800ab1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab22:	4323      	orrs	r3, r4
 800ab24:	462a      	mov	r2, r5
 800ab26:	e7f1      	b.n	800ab0c <__ieee754_fmod+0x1c8>
 800ab28:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 800ab2c:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800ab30:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 800ab34:	33e2      	adds	r3, #226	@ 0xe2
 800ab36:	fa42 f303 	asr.w	r3, r2, r3
 800ab3a:	e7f3      	b.n	800ab24 <__ieee754_fmod+0x1e0>
 800ab3c:	7fefffff 	.word	0x7fefffff
 800ab40:	7ff00000 	.word	0x7ff00000
 800ab44:	0800caa8 	.word	0x0800caa8
 800ab48:	fffffbed 	.word	0xfffffbed
 800ab4c:	fffffc02 	.word	0xfffffc02
 800ab50:	fffffbe2 	.word	0xfffffbe2
 800ab54:	00000000 	.word	0x00000000

0800ab58 <__ieee754_pow>:
 800ab58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab5c:	b091      	sub	sp, #68	@ 0x44
 800ab5e:	ed8d 1b00 	vstr	d1, [sp]
 800ab62:	e9dd 1900 	ldrd	r1, r9, [sp]
 800ab66:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800ab6a:	ea5a 0001 	orrs.w	r0, sl, r1
 800ab6e:	ec57 6b10 	vmov	r6, r7, d0
 800ab72:	d113      	bne.n	800ab9c <__ieee754_pow+0x44>
 800ab74:	19b3      	adds	r3, r6, r6
 800ab76:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800ab7a:	4152      	adcs	r2, r2
 800ab7c:	4298      	cmp	r0, r3
 800ab7e:	4b9a      	ldr	r3, [pc, #616]	@ (800ade8 <__ieee754_pow+0x290>)
 800ab80:	4193      	sbcs	r3, r2
 800ab82:	f080 84ee 	bcs.w	800b562 <__ieee754_pow+0xa0a>
 800ab86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	4639      	mov	r1, r7
 800ab8e:	f7f5 fb9d 	bl	80002cc <__adddf3>
 800ab92:	ec41 0b10 	vmov	d0, r0, r1
 800ab96:	b011      	add	sp, #68	@ 0x44
 800ab98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab9c:	4a93      	ldr	r2, [pc, #588]	@ (800adec <__ieee754_pow+0x294>)
 800ab9e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800aba2:	4295      	cmp	r5, r2
 800aba4:	46b8      	mov	r8, r7
 800aba6:	4633      	mov	r3, r6
 800aba8:	d80a      	bhi.n	800abc0 <__ieee754_pow+0x68>
 800abaa:	d104      	bne.n	800abb6 <__ieee754_pow+0x5e>
 800abac:	2e00      	cmp	r6, #0
 800abae:	d1ea      	bne.n	800ab86 <__ieee754_pow+0x2e>
 800abb0:	45aa      	cmp	sl, r5
 800abb2:	d8e8      	bhi.n	800ab86 <__ieee754_pow+0x2e>
 800abb4:	e001      	b.n	800abba <__ieee754_pow+0x62>
 800abb6:	4592      	cmp	sl, r2
 800abb8:	d802      	bhi.n	800abc0 <__ieee754_pow+0x68>
 800abba:	4592      	cmp	sl, r2
 800abbc:	d10f      	bne.n	800abde <__ieee754_pow+0x86>
 800abbe:	b171      	cbz	r1, 800abde <__ieee754_pow+0x86>
 800abc0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800abc4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800abc8:	ea58 0803 	orrs.w	r8, r8, r3
 800abcc:	d1db      	bne.n	800ab86 <__ieee754_pow+0x2e>
 800abce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800abd2:	18db      	adds	r3, r3, r3
 800abd4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800abd8:	4152      	adcs	r2, r2
 800abda:	4598      	cmp	r8, r3
 800abdc:	e7cf      	b.n	800ab7e <__ieee754_pow+0x26>
 800abde:	f1b8 0f00 	cmp.w	r8, #0
 800abe2:	46ab      	mov	fp, r5
 800abe4:	da43      	bge.n	800ac6e <__ieee754_pow+0x116>
 800abe6:	4a82      	ldr	r2, [pc, #520]	@ (800adf0 <__ieee754_pow+0x298>)
 800abe8:	4592      	cmp	sl, r2
 800abea:	d856      	bhi.n	800ac9a <__ieee754_pow+0x142>
 800abec:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800abf0:	4592      	cmp	sl, r2
 800abf2:	f240 84c5 	bls.w	800b580 <__ieee754_pow+0xa28>
 800abf6:	ea4f 522a 	mov.w	r2, sl, asr #20
 800abfa:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800abfe:	2a14      	cmp	r2, #20
 800ac00:	dd18      	ble.n	800ac34 <__ieee754_pow+0xdc>
 800ac02:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800ac06:	fa21 f402 	lsr.w	r4, r1, r2
 800ac0a:	fa04 f202 	lsl.w	r2, r4, r2
 800ac0e:	428a      	cmp	r2, r1
 800ac10:	f040 84b6 	bne.w	800b580 <__ieee754_pow+0xa28>
 800ac14:	f004 0401 	and.w	r4, r4, #1
 800ac18:	f1c4 0402 	rsb	r4, r4, #2
 800ac1c:	2900      	cmp	r1, #0
 800ac1e:	d159      	bne.n	800acd4 <__ieee754_pow+0x17c>
 800ac20:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800ac24:	d148      	bne.n	800acb8 <__ieee754_pow+0x160>
 800ac26:	4632      	mov	r2, r6
 800ac28:	463b      	mov	r3, r7
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	4639      	mov	r1, r7
 800ac2e:	f7f5 fd03 	bl	8000638 <__aeabi_dmul>
 800ac32:	e7ae      	b.n	800ab92 <__ieee754_pow+0x3a>
 800ac34:	2900      	cmp	r1, #0
 800ac36:	d14c      	bne.n	800acd2 <__ieee754_pow+0x17a>
 800ac38:	f1c2 0214 	rsb	r2, r2, #20
 800ac3c:	fa4a f402 	asr.w	r4, sl, r2
 800ac40:	fa04 f202 	lsl.w	r2, r4, r2
 800ac44:	4552      	cmp	r2, sl
 800ac46:	f040 8498 	bne.w	800b57a <__ieee754_pow+0xa22>
 800ac4a:	f004 0401 	and.w	r4, r4, #1
 800ac4e:	f1c4 0402 	rsb	r4, r4, #2
 800ac52:	4a68      	ldr	r2, [pc, #416]	@ (800adf4 <__ieee754_pow+0x29c>)
 800ac54:	4592      	cmp	sl, r2
 800ac56:	d1e3      	bne.n	800ac20 <__ieee754_pow+0xc8>
 800ac58:	f1b9 0f00 	cmp.w	r9, #0
 800ac5c:	f280 8489 	bge.w	800b572 <__ieee754_pow+0xa1a>
 800ac60:	4964      	ldr	r1, [pc, #400]	@ (800adf4 <__ieee754_pow+0x29c>)
 800ac62:	4632      	mov	r2, r6
 800ac64:	463b      	mov	r3, r7
 800ac66:	2000      	movs	r0, #0
 800ac68:	f7f5 fe10 	bl	800088c <__aeabi_ddiv>
 800ac6c:	e791      	b.n	800ab92 <__ieee754_pow+0x3a>
 800ac6e:	2400      	movs	r4, #0
 800ac70:	bb81      	cbnz	r1, 800acd4 <__ieee754_pow+0x17c>
 800ac72:	4a5e      	ldr	r2, [pc, #376]	@ (800adec <__ieee754_pow+0x294>)
 800ac74:	4592      	cmp	sl, r2
 800ac76:	d1ec      	bne.n	800ac52 <__ieee754_pow+0xfa>
 800ac78:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800ac7c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800ac80:	431a      	orrs	r2, r3
 800ac82:	f000 846e 	beq.w	800b562 <__ieee754_pow+0xa0a>
 800ac86:	4b5c      	ldr	r3, [pc, #368]	@ (800adf8 <__ieee754_pow+0x2a0>)
 800ac88:	429d      	cmp	r5, r3
 800ac8a:	d908      	bls.n	800ac9e <__ieee754_pow+0x146>
 800ac8c:	f1b9 0f00 	cmp.w	r9, #0
 800ac90:	f280 846b 	bge.w	800b56a <__ieee754_pow+0xa12>
 800ac94:	2000      	movs	r0, #0
 800ac96:	2100      	movs	r1, #0
 800ac98:	e77b      	b.n	800ab92 <__ieee754_pow+0x3a>
 800ac9a:	2402      	movs	r4, #2
 800ac9c:	e7e8      	b.n	800ac70 <__ieee754_pow+0x118>
 800ac9e:	f1b9 0f00 	cmp.w	r9, #0
 800aca2:	f04f 0000 	mov.w	r0, #0
 800aca6:	f04f 0100 	mov.w	r1, #0
 800acaa:	f6bf af72 	bge.w	800ab92 <__ieee754_pow+0x3a>
 800acae:	e9dd 0300 	ldrd	r0, r3, [sp]
 800acb2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800acb6:	e76c      	b.n	800ab92 <__ieee754_pow+0x3a>
 800acb8:	4a50      	ldr	r2, [pc, #320]	@ (800adfc <__ieee754_pow+0x2a4>)
 800acba:	4591      	cmp	r9, r2
 800acbc:	d10a      	bne.n	800acd4 <__ieee754_pow+0x17c>
 800acbe:	f1b8 0f00 	cmp.w	r8, #0
 800acc2:	db07      	blt.n	800acd4 <__ieee754_pow+0x17c>
 800acc4:	ec47 6b10 	vmov	d0, r6, r7
 800acc8:	b011      	add	sp, #68	@ 0x44
 800acca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acce:	f7ff bb17 	b.w	800a300 <__ieee754_sqrt>
 800acd2:	2400      	movs	r4, #0
 800acd4:	ec47 6b10 	vmov	d0, r6, r7
 800acd8:	9302      	str	r3, [sp, #8]
 800acda:	f001 f81d 	bl	800bd18 <fabs>
 800acde:	9b02      	ldr	r3, [sp, #8]
 800ace0:	ec51 0b10 	vmov	r0, r1, d0
 800ace4:	bb43      	cbnz	r3, 800ad38 <__ieee754_pow+0x1e0>
 800ace6:	4b43      	ldr	r3, [pc, #268]	@ (800adf4 <__ieee754_pow+0x29c>)
 800ace8:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800acec:	429a      	cmp	r2, r3
 800acee:	d000      	beq.n	800acf2 <__ieee754_pow+0x19a>
 800acf0:	bb15      	cbnz	r5, 800ad38 <__ieee754_pow+0x1e0>
 800acf2:	f1b9 0f00 	cmp.w	r9, #0
 800acf6:	da05      	bge.n	800ad04 <__ieee754_pow+0x1ac>
 800acf8:	4602      	mov	r2, r0
 800acfa:	460b      	mov	r3, r1
 800acfc:	2000      	movs	r0, #0
 800acfe:	493d      	ldr	r1, [pc, #244]	@ (800adf4 <__ieee754_pow+0x29c>)
 800ad00:	f7f5 fdc4 	bl	800088c <__aeabi_ddiv>
 800ad04:	f1b8 0f00 	cmp.w	r8, #0
 800ad08:	f6bf af43 	bge.w	800ab92 <__ieee754_pow+0x3a>
 800ad0c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800ad10:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800ad14:	4325      	orrs	r5, r4
 800ad16:	d108      	bne.n	800ad2a <__ieee754_pow+0x1d2>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	4610      	mov	r0, r2
 800ad1e:	4619      	mov	r1, r3
 800ad20:	f7f5 fad2 	bl	80002c8 <__aeabi_dsub>
 800ad24:	4602      	mov	r2, r0
 800ad26:	460b      	mov	r3, r1
 800ad28:	e79e      	b.n	800ac68 <__ieee754_pow+0x110>
 800ad2a:	2c01      	cmp	r4, #1
 800ad2c:	f47f af31 	bne.w	800ab92 <__ieee754_pow+0x3a>
 800ad30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ad34:	4619      	mov	r1, r3
 800ad36:	e72c      	b.n	800ab92 <__ieee754_pow+0x3a>
 800ad38:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800ad3c:	3b01      	subs	r3, #1
 800ad3e:	ea53 0204 	orrs.w	r2, r3, r4
 800ad42:	d102      	bne.n	800ad4a <__ieee754_pow+0x1f2>
 800ad44:	4632      	mov	r2, r6
 800ad46:	463b      	mov	r3, r7
 800ad48:	e7e8      	b.n	800ad1c <__ieee754_pow+0x1c4>
 800ad4a:	3c01      	subs	r4, #1
 800ad4c:	431c      	orrs	r4, r3
 800ad4e:	d016      	beq.n	800ad7e <__ieee754_pow+0x226>
 800ad50:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800add8 <__ieee754_pow+0x280>
 800ad54:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800ad58:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ad5c:	f240 8110 	bls.w	800af80 <__ieee754_pow+0x428>
 800ad60:	4b27      	ldr	r3, [pc, #156]	@ (800ae00 <__ieee754_pow+0x2a8>)
 800ad62:	459a      	cmp	sl, r3
 800ad64:	4b24      	ldr	r3, [pc, #144]	@ (800adf8 <__ieee754_pow+0x2a0>)
 800ad66:	d916      	bls.n	800ad96 <__ieee754_pow+0x23e>
 800ad68:	429d      	cmp	r5, r3
 800ad6a:	d80b      	bhi.n	800ad84 <__ieee754_pow+0x22c>
 800ad6c:	f1b9 0f00 	cmp.w	r9, #0
 800ad70:	da0b      	bge.n	800ad8a <__ieee754_pow+0x232>
 800ad72:	2000      	movs	r0, #0
 800ad74:	b011      	add	sp, #68	@ 0x44
 800ad76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad7a:	f001 b885 	b.w	800be88 <__math_oflow>
 800ad7e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800ade0 <__ieee754_pow+0x288>
 800ad82:	e7e7      	b.n	800ad54 <__ieee754_pow+0x1fc>
 800ad84:	f1b9 0f00 	cmp.w	r9, #0
 800ad88:	dcf3      	bgt.n	800ad72 <__ieee754_pow+0x21a>
 800ad8a:	2000      	movs	r0, #0
 800ad8c:	b011      	add	sp, #68	@ 0x44
 800ad8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad92:	f001 b871 	b.w	800be78 <__math_uflow>
 800ad96:	429d      	cmp	r5, r3
 800ad98:	d20c      	bcs.n	800adb4 <__ieee754_pow+0x25c>
 800ad9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	2300      	movs	r3, #0
 800ada2:	f7f5 febb 	bl	8000b1c <__aeabi_dcmplt>
 800ada6:	3800      	subs	r0, #0
 800ada8:	bf18      	it	ne
 800adaa:	2001      	movne	r0, #1
 800adac:	f1b9 0f00 	cmp.w	r9, #0
 800adb0:	daec      	bge.n	800ad8c <__ieee754_pow+0x234>
 800adb2:	e7df      	b.n	800ad74 <__ieee754_pow+0x21c>
 800adb4:	4b0f      	ldr	r3, [pc, #60]	@ (800adf4 <__ieee754_pow+0x29c>)
 800adb6:	429d      	cmp	r5, r3
 800adb8:	f04f 0200 	mov.w	r2, #0
 800adbc:	d922      	bls.n	800ae04 <__ieee754_pow+0x2ac>
 800adbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adc2:	2300      	movs	r3, #0
 800adc4:	f7f5 feaa 	bl	8000b1c <__aeabi_dcmplt>
 800adc8:	3800      	subs	r0, #0
 800adca:	bf18      	it	ne
 800adcc:	2001      	movne	r0, #1
 800adce:	f1b9 0f00 	cmp.w	r9, #0
 800add2:	dccf      	bgt.n	800ad74 <__ieee754_pow+0x21c>
 800add4:	e7da      	b.n	800ad8c <__ieee754_pow+0x234>
 800add6:	bf00      	nop
 800add8:	00000000 	.word	0x00000000
 800addc:	3ff00000 	.word	0x3ff00000
 800ade0:	00000000 	.word	0x00000000
 800ade4:	bff00000 	.word	0xbff00000
 800ade8:	fff00000 	.word	0xfff00000
 800adec:	7ff00000 	.word	0x7ff00000
 800adf0:	433fffff 	.word	0x433fffff
 800adf4:	3ff00000 	.word	0x3ff00000
 800adf8:	3fefffff 	.word	0x3fefffff
 800adfc:	3fe00000 	.word	0x3fe00000
 800ae00:	43f00000 	.word	0x43f00000
 800ae04:	4b5a      	ldr	r3, [pc, #360]	@ (800af70 <__ieee754_pow+0x418>)
 800ae06:	f7f5 fa5f 	bl	80002c8 <__aeabi_dsub>
 800ae0a:	a351      	add	r3, pc, #324	@ (adr r3, 800af50 <__ieee754_pow+0x3f8>)
 800ae0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae10:	4604      	mov	r4, r0
 800ae12:	460d      	mov	r5, r1
 800ae14:	f7f5 fc10 	bl	8000638 <__aeabi_dmul>
 800ae18:	a34f      	add	r3, pc, #316	@ (adr r3, 800af58 <__ieee754_pow+0x400>)
 800ae1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1e:	4606      	mov	r6, r0
 800ae20:	460f      	mov	r7, r1
 800ae22:	4620      	mov	r0, r4
 800ae24:	4629      	mov	r1, r5
 800ae26:	f7f5 fc07 	bl	8000638 <__aeabi_dmul>
 800ae2a:	4b52      	ldr	r3, [pc, #328]	@ (800af74 <__ieee754_pow+0x41c>)
 800ae2c:	4682      	mov	sl, r0
 800ae2e:	468b      	mov	fp, r1
 800ae30:	2200      	movs	r2, #0
 800ae32:	4620      	mov	r0, r4
 800ae34:	4629      	mov	r1, r5
 800ae36:	f7f5 fbff 	bl	8000638 <__aeabi_dmul>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	a148      	add	r1, pc, #288	@ (adr r1, 800af60 <__ieee754_pow+0x408>)
 800ae40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae44:	f7f5 fa40 	bl	80002c8 <__aeabi_dsub>
 800ae48:	4622      	mov	r2, r4
 800ae4a:	462b      	mov	r3, r5
 800ae4c:	f7f5 fbf4 	bl	8000638 <__aeabi_dmul>
 800ae50:	4602      	mov	r2, r0
 800ae52:	460b      	mov	r3, r1
 800ae54:	2000      	movs	r0, #0
 800ae56:	4948      	ldr	r1, [pc, #288]	@ (800af78 <__ieee754_pow+0x420>)
 800ae58:	f7f5 fa36 	bl	80002c8 <__aeabi_dsub>
 800ae5c:	4622      	mov	r2, r4
 800ae5e:	4680      	mov	r8, r0
 800ae60:	4689      	mov	r9, r1
 800ae62:	462b      	mov	r3, r5
 800ae64:	4620      	mov	r0, r4
 800ae66:	4629      	mov	r1, r5
 800ae68:	f7f5 fbe6 	bl	8000638 <__aeabi_dmul>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	460b      	mov	r3, r1
 800ae70:	4640      	mov	r0, r8
 800ae72:	4649      	mov	r1, r9
 800ae74:	f7f5 fbe0 	bl	8000638 <__aeabi_dmul>
 800ae78:	a33b      	add	r3, pc, #236	@ (adr r3, 800af68 <__ieee754_pow+0x410>)
 800ae7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7e:	f7f5 fbdb 	bl	8000638 <__aeabi_dmul>
 800ae82:	4602      	mov	r2, r0
 800ae84:	460b      	mov	r3, r1
 800ae86:	4650      	mov	r0, sl
 800ae88:	4659      	mov	r1, fp
 800ae8a:	f7f5 fa1d 	bl	80002c8 <__aeabi_dsub>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	460b      	mov	r3, r1
 800ae92:	4680      	mov	r8, r0
 800ae94:	4689      	mov	r9, r1
 800ae96:	4630      	mov	r0, r6
 800ae98:	4639      	mov	r1, r7
 800ae9a:	f7f5 fa17 	bl	80002cc <__adddf3>
 800ae9e:	2400      	movs	r4, #0
 800aea0:	4632      	mov	r2, r6
 800aea2:	463b      	mov	r3, r7
 800aea4:	4620      	mov	r0, r4
 800aea6:	460d      	mov	r5, r1
 800aea8:	f7f5 fa0e 	bl	80002c8 <__aeabi_dsub>
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	4640      	mov	r0, r8
 800aeb2:	4649      	mov	r1, r9
 800aeb4:	f7f5 fa08 	bl	80002c8 <__aeabi_dsub>
 800aeb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aebc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aec0:	2300      	movs	r3, #0
 800aec2:	9304      	str	r3, [sp, #16]
 800aec4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800aec8:	4606      	mov	r6, r0
 800aeca:	460f      	mov	r7, r1
 800aecc:	465b      	mov	r3, fp
 800aece:	4652      	mov	r2, sl
 800aed0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aed4:	f7f5 f9f8 	bl	80002c8 <__aeabi_dsub>
 800aed8:	4622      	mov	r2, r4
 800aeda:	462b      	mov	r3, r5
 800aedc:	f7f5 fbac 	bl	8000638 <__aeabi_dmul>
 800aee0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aee4:	4680      	mov	r8, r0
 800aee6:	4689      	mov	r9, r1
 800aee8:	4630      	mov	r0, r6
 800aeea:	4639      	mov	r1, r7
 800aeec:	f7f5 fba4 	bl	8000638 <__aeabi_dmul>
 800aef0:	4602      	mov	r2, r0
 800aef2:	460b      	mov	r3, r1
 800aef4:	4640      	mov	r0, r8
 800aef6:	4649      	mov	r1, r9
 800aef8:	f7f5 f9e8 	bl	80002cc <__adddf3>
 800aefc:	465b      	mov	r3, fp
 800aefe:	4606      	mov	r6, r0
 800af00:	460f      	mov	r7, r1
 800af02:	4652      	mov	r2, sl
 800af04:	4620      	mov	r0, r4
 800af06:	4629      	mov	r1, r5
 800af08:	f7f5 fb96 	bl	8000638 <__aeabi_dmul>
 800af0c:	460b      	mov	r3, r1
 800af0e:	4602      	mov	r2, r0
 800af10:	4680      	mov	r8, r0
 800af12:	4689      	mov	r9, r1
 800af14:	4630      	mov	r0, r6
 800af16:	4639      	mov	r1, r7
 800af18:	f7f5 f9d8 	bl	80002cc <__adddf3>
 800af1c:	4b17      	ldr	r3, [pc, #92]	@ (800af7c <__ieee754_pow+0x424>)
 800af1e:	4299      	cmp	r1, r3
 800af20:	4604      	mov	r4, r0
 800af22:	460d      	mov	r5, r1
 800af24:	468b      	mov	fp, r1
 800af26:	f340 820b 	ble.w	800b340 <__ieee754_pow+0x7e8>
 800af2a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800af2e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800af32:	4303      	orrs	r3, r0
 800af34:	f000 81ea 	beq.w	800b30c <__ieee754_pow+0x7b4>
 800af38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af3c:	2200      	movs	r2, #0
 800af3e:	2300      	movs	r3, #0
 800af40:	f7f5 fdec 	bl	8000b1c <__aeabi_dcmplt>
 800af44:	3800      	subs	r0, #0
 800af46:	bf18      	it	ne
 800af48:	2001      	movne	r0, #1
 800af4a:	e713      	b.n	800ad74 <__ieee754_pow+0x21c>
 800af4c:	f3af 8000 	nop.w
 800af50:	60000000 	.word	0x60000000
 800af54:	3ff71547 	.word	0x3ff71547
 800af58:	f85ddf44 	.word	0xf85ddf44
 800af5c:	3e54ae0b 	.word	0x3e54ae0b
 800af60:	55555555 	.word	0x55555555
 800af64:	3fd55555 	.word	0x3fd55555
 800af68:	652b82fe 	.word	0x652b82fe
 800af6c:	3ff71547 	.word	0x3ff71547
 800af70:	3ff00000 	.word	0x3ff00000
 800af74:	3fd00000 	.word	0x3fd00000
 800af78:	3fe00000 	.word	0x3fe00000
 800af7c:	408fffff 	.word	0x408fffff
 800af80:	4bd5      	ldr	r3, [pc, #852]	@ (800b2d8 <__ieee754_pow+0x780>)
 800af82:	ea08 0303 	and.w	r3, r8, r3
 800af86:	2200      	movs	r2, #0
 800af88:	b92b      	cbnz	r3, 800af96 <__ieee754_pow+0x43e>
 800af8a:	4bd4      	ldr	r3, [pc, #848]	@ (800b2dc <__ieee754_pow+0x784>)
 800af8c:	f7f5 fb54 	bl	8000638 <__aeabi_dmul>
 800af90:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800af94:	468b      	mov	fp, r1
 800af96:	ea4f 532b 	mov.w	r3, fp, asr #20
 800af9a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800af9e:	4413      	add	r3, r2
 800afa0:	930a      	str	r3, [sp, #40]	@ 0x28
 800afa2:	4bcf      	ldr	r3, [pc, #828]	@ (800b2e0 <__ieee754_pow+0x788>)
 800afa4:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800afa8:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800afac:	459b      	cmp	fp, r3
 800afae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800afb2:	dd08      	ble.n	800afc6 <__ieee754_pow+0x46e>
 800afb4:	4bcb      	ldr	r3, [pc, #812]	@ (800b2e4 <__ieee754_pow+0x78c>)
 800afb6:	459b      	cmp	fp, r3
 800afb8:	f340 81a5 	ble.w	800b306 <__ieee754_pow+0x7ae>
 800afbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afbe:	3301      	adds	r3, #1
 800afc0:	930a      	str	r3, [sp, #40]	@ 0x28
 800afc2:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800afc6:	f04f 0a00 	mov.w	sl, #0
 800afca:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800afce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800afd0:	4bc5      	ldr	r3, [pc, #788]	@ (800b2e8 <__ieee754_pow+0x790>)
 800afd2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800afd6:	ed93 7b00 	vldr	d7, [r3]
 800afda:	4629      	mov	r1, r5
 800afdc:	ec53 2b17 	vmov	r2, r3, d7
 800afe0:	ed8d 7b06 	vstr	d7, [sp, #24]
 800afe4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800afe8:	f7f5 f96e 	bl	80002c8 <__aeabi_dsub>
 800afec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800aff0:	4606      	mov	r6, r0
 800aff2:	460f      	mov	r7, r1
 800aff4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aff8:	f7f5 f968 	bl	80002cc <__adddf3>
 800affc:	4602      	mov	r2, r0
 800affe:	460b      	mov	r3, r1
 800b000:	2000      	movs	r0, #0
 800b002:	49ba      	ldr	r1, [pc, #744]	@ (800b2ec <__ieee754_pow+0x794>)
 800b004:	f7f5 fc42 	bl	800088c <__aeabi_ddiv>
 800b008:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800b00c:	4602      	mov	r2, r0
 800b00e:	460b      	mov	r3, r1
 800b010:	4630      	mov	r0, r6
 800b012:	4639      	mov	r1, r7
 800b014:	f7f5 fb10 	bl	8000638 <__aeabi_dmul>
 800b018:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b01c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800b020:	106d      	asrs	r5, r5, #1
 800b022:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800b026:	f04f 0b00 	mov.w	fp, #0
 800b02a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800b02e:	4661      	mov	r1, ip
 800b030:	2200      	movs	r2, #0
 800b032:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b036:	4658      	mov	r0, fp
 800b038:	46e1      	mov	r9, ip
 800b03a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800b03e:	4614      	mov	r4, r2
 800b040:	461d      	mov	r5, r3
 800b042:	f7f5 faf9 	bl	8000638 <__aeabi_dmul>
 800b046:	4602      	mov	r2, r0
 800b048:	460b      	mov	r3, r1
 800b04a:	4630      	mov	r0, r6
 800b04c:	4639      	mov	r1, r7
 800b04e:	f7f5 f93b 	bl	80002c8 <__aeabi_dsub>
 800b052:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b056:	4606      	mov	r6, r0
 800b058:	460f      	mov	r7, r1
 800b05a:	4620      	mov	r0, r4
 800b05c:	4629      	mov	r1, r5
 800b05e:	f7f5 f933 	bl	80002c8 <__aeabi_dsub>
 800b062:	4602      	mov	r2, r0
 800b064:	460b      	mov	r3, r1
 800b066:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b06a:	f7f5 f92d 	bl	80002c8 <__aeabi_dsub>
 800b06e:	465a      	mov	r2, fp
 800b070:	464b      	mov	r3, r9
 800b072:	f7f5 fae1 	bl	8000638 <__aeabi_dmul>
 800b076:	4602      	mov	r2, r0
 800b078:	460b      	mov	r3, r1
 800b07a:	4630      	mov	r0, r6
 800b07c:	4639      	mov	r1, r7
 800b07e:	f7f5 f923 	bl	80002c8 <__aeabi_dsub>
 800b082:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b086:	f7f5 fad7 	bl	8000638 <__aeabi_dmul>
 800b08a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b08e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b092:	4610      	mov	r0, r2
 800b094:	4619      	mov	r1, r3
 800b096:	f7f5 facf 	bl	8000638 <__aeabi_dmul>
 800b09a:	a37d      	add	r3, pc, #500	@ (adr r3, 800b290 <__ieee754_pow+0x738>)
 800b09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a0:	4604      	mov	r4, r0
 800b0a2:	460d      	mov	r5, r1
 800b0a4:	f7f5 fac8 	bl	8000638 <__aeabi_dmul>
 800b0a8:	a37b      	add	r3, pc, #492	@ (adr r3, 800b298 <__ieee754_pow+0x740>)
 800b0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ae:	f7f5 f90d 	bl	80002cc <__adddf3>
 800b0b2:	4622      	mov	r2, r4
 800b0b4:	462b      	mov	r3, r5
 800b0b6:	f7f5 fabf 	bl	8000638 <__aeabi_dmul>
 800b0ba:	a379      	add	r3, pc, #484	@ (adr r3, 800b2a0 <__ieee754_pow+0x748>)
 800b0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c0:	f7f5 f904 	bl	80002cc <__adddf3>
 800b0c4:	4622      	mov	r2, r4
 800b0c6:	462b      	mov	r3, r5
 800b0c8:	f7f5 fab6 	bl	8000638 <__aeabi_dmul>
 800b0cc:	a376      	add	r3, pc, #472	@ (adr r3, 800b2a8 <__ieee754_pow+0x750>)
 800b0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d2:	f7f5 f8fb 	bl	80002cc <__adddf3>
 800b0d6:	4622      	mov	r2, r4
 800b0d8:	462b      	mov	r3, r5
 800b0da:	f7f5 faad 	bl	8000638 <__aeabi_dmul>
 800b0de:	a374      	add	r3, pc, #464	@ (adr r3, 800b2b0 <__ieee754_pow+0x758>)
 800b0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e4:	f7f5 f8f2 	bl	80002cc <__adddf3>
 800b0e8:	4622      	mov	r2, r4
 800b0ea:	462b      	mov	r3, r5
 800b0ec:	f7f5 faa4 	bl	8000638 <__aeabi_dmul>
 800b0f0:	a371      	add	r3, pc, #452	@ (adr r3, 800b2b8 <__ieee754_pow+0x760>)
 800b0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f6:	f7f5 f8e9 	bl	80002cc <__adddf3>
 800b0fa:	4622      	mov	r2, r4
 800b0fc:	4606      	mov	r6, r0
 800b0fe:	460f      	mov	r7, r1
 800b100:	462b      	mov	r3, r5
 800b102:	4620      	mov	r0, r4
 800b104:	4629      	mov	r1, r5
 800b106:	f7f5 fa97 	bl	8000638 <__aeabi_dmul>
 800b10a:	4602      	mov	r2, r0
 800b10c:	460b      	mov	r3, r1
 800b10e:	4630      	mov	r0, r6
 800b110:	4639      	mov	r1, r7
 800b112:	f7f5 fa91 	bl	8000638 <__aeabi_dmul>
 800b116:	465a      	mov	r2, fp
 800b118:	4604      	mov	r4, r0
 800b11a:	460d      	mov	r5, r1
 800b11c:	464b      	mov	r3, r9
 800b11e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b122:	f7f5 f8d3 	bl	80002cc <__adddf3>
 800b126:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b12a:	f7f5 fa85 	bl	8000638 <__aeabi_dmul>
 800b12e:	4622      	mov	r2, r4
 800b130:	462b      	mov	r3, r5
 800b132:	f7f5 f8cb 	bl	80002cc <__adddf3>
 800b136:	465a      	mov	r2, fp
 800b138:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b13c:	464b      	mov	r3, r9
 800b13e:	4658      	mov	r0, fp
 800b140:	4649      	mov	r1, r9
 800b142:	f7f5 fa79 	bl	8000638 <__aeabi_dmul>
 800b146:	4b6a      	ldr	r3, [pc, #424]	@ (800b2f0 <__ieee754_pow+0x798>)
 800b148:	2200      	movs	r2, #0
 800b14a:	4606      	mov	r6, r0
 800b14c:	460f      	mov	r7, r1
 800b14e:	f7f5 f8bd 	bl	80002cc <__adddf3>
 800b152:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b156:	f7f5 f8b9 	bl	80002cc <__adddf3>
 800b15a:	46d8      	mov	r8, fp
 800b15c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800b160:	460d      	mov	r5, r1
 800b162:	465a      	mov	r2, fp
 800b164:	460b      	mov	r3, r1
 800b166:	4640      	mov	r0, r8
 800b168:	4649      	mov	r1, r9
 800b16a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800b16e:	f7f5 fa63 	bl	8000638 <__aeabi_dmul>
 800b172:	465c      	mov	r4, fp
 800b174:	4680      	mov	r8, r0
 800b176:	4689      	mov	r9, r1
 800b178:	4b5d      	ldr	r3, [pc, #372]	@ (800b2f0 <__ieee754_pow+0x798>)
 800b17a:	2200      	movs	r2, #0
 800b17c:	4620      	mov	r0, r4
 800b17e:	4629      	mov	r1, r5
 800b180:	f7f5 f8a2 	bl	80002c8 <__aeabi_dsub>
 800b184:	4632      	mov	r2, r6
 800b186:	463b      	mov	r3, r7
 800b188:	f7f5 f89e 	bl	80002c8 <__aeabi_dsub>
 800b18c:	4602      	mov	r2, r0
 800b18e:	460b      	mov	r3, r1
 800b190:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b194:	f7f5 f898 	bl	80002c8 <__aeabi_dsub>
 800b198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b19c:	f7f5 fa4c 	bl	8000638 <__aeabi_dmul>
 800b1a0:	4622      	mov	r2, r4
 800b1a2:	4606      	mov	r6, r0
 800b1a4:	460f      	mov	r7, r1
 800b1a6:	462b      	mov	r3, r5
 800b1a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1ac:	f7f5 fa44 	bl	8000638 <__aeabi_dmul>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	4630      	mov	r0, r6
 800b1b6:	4639      	mov	r1, r7
 800b1b8:	f7f5 f888 	bl	80002cc <__adddf3>
 800b1bc:	4606      	mov	r6, r0
 800b1be:	460f      	mov	r7, r1
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	4640      	mov	r0, r8
 800b1c6:	4649      	mov	r1, r9
 800b1c8:	f7f5 f880 	bl	80002cc <__adddf3>
 800b1cc:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800b1d0:	a33b      	add	r3, pc, #236	@ (adr r3, 800b2c0 <__ieee754_pow+0x768>)
 800b1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d6:	4658      	mov	r0, fp
 800b1d8:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800b1dc:	460d      	mov	r5, r1
 800b1de:	f7f5 fa2b 	bl	8000638 <__aeabi_dmul>
 800b1e2:	465c      	mov	r4, fp
 800b1e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1e8:	4642      	mov	r2, r8
 800b1ea:	464b      	mov	r3, r9
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	4629      	mov	r1, r5
 800b1f0:	f7f5 f86a 	bl	80002c8 <__aeabi_dsub>
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	4630      	mov	r0, r6
 800b1fa:	4639      	mov	r1, r7
 800b1fc:	f7f5 f864 	bl	80002c8 <__aeabi_dsub>
 800b200:	a331      	add	r3, pc, #196	@ (adr r3, 800b2c8 <__ieee754_pow+0x770>)
 800b202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b206:	f7f5 fa17 	bl	8000638 <__aeabi_dmul>
 800b20a:	a331      	add	r3, pc, #196	@ (adr r3, 800b2d0 <__ieee754_pow+0x778>)
 800b20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b210:	4606      	mov	r6, r0
 800b212:	460f      	mov	r7, r1
 800b214:	4620      	mov	r0, r4
 800b216:	4629      	mov	r1, r5
 800b218:	f7f5 fa0e 	bl	8000638 <__aeabi_dmul>
 800b21c:	4602      	mov	r2, r0
 800b21e:	460b      	mov	r3, r1
 800b220:	4630      	mov	r0, r6
 800b222:	4639      	mov	r1, r7
 800b224:	f7f5 f852 	bl	80002cc <__adddf3>
 800b228:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b22a:	4b32      	ldr	r3, [pc, #200]	@ (800b2f4 <__ieee754_pow+0x79c>)
 800b22c:	4413      	add	r3, r2
 800b22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b232:	f7f5 f84b 	bl	80002cc <__adddf3>
 800b236:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b23a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b23c:	f7f5 f992 	bl	8000564 <__aeabi_i2d>
 800b240:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b242:	4b2d      	ldr	r3, [pc, #180]	@ (800b2f8 <__ieee754_pow+0x7a0>)
 800b244:	4413      	add	r3, r2
 800b246:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b24a:	4606      	mov	r6, r0
 800b24c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b250:	460f      	mov	r7, r1
 800b252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b256:	f7f5 f839 	bl	80002cc <__adddf3>
 800b25a:	4642      	mov	r2, r8
 800b25c:	464b      	mov	r3, r9
 800b25e:	f7f5 f835 	bl	80002cc <__adddf3>
 800b262:	4632      	mov	r2, r6
 800b264:	463b      	mov	r3, r7
 800b266:	f7f5 f831 	bl	80002cc <__adddf3>
 800b26a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800b26e:	4632      	mov	r2, r6
 800b270:	463b      	mov	r3, r7
 800b272:	4658      	mov	r0, fp
 800b274:	460d      	mov	r5, r1
 800b276:	f7f5 f827 	bl	80002c8 <__aeabi_dsub>
 800b27a:	4642      	mov	r2, r8
 800b27c:	464b      	mov	r3, r9
 800b27e:	f7f5 f823 	bl	80002c8 <__aeabi_dsub>
 800b282:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b286:	f7f5 f81f 	bl	80002c8 <__aeabi_dsub>
 800b28a:	465c      	mov	r4, fp
 800b28c:	e036      	b.n	800b2fc <__ieee754_pow+0x7a4>
 800b28e:	bf00      	nop
 800b290:	4a454eef 	.word	0x4a454eef
 800b294:	3fca7e28 	.word	0x3fca7e28
 800b298:	93c9db65 	.word	0x93c9db65
 800b29c:	3fcd864a 	.word	0x3fcd864a
 800b2a0:	a91d4101 	.word	0xa91d4101
 800b2a4:	3fd17460 	.word	0x3fd17460
 800b2a8:	518f264d 	.word	0x518f264d
 800b2ac:	3fd55555 	.word	0x3fd55555
 800b2b0:	db6fabff 	.word	0xdb6fabff
 800b2b4:	3fdb6db6 	.word	0x3fdb6db6
 800b2b8:	33333303 	.word	0x33333303
 800b2bc:	3fe33333 	.word	0x3fe33333
 800b2c0:	e0000000 	.word	0xe0000000
 800b2c4:	3feec709 	.word	0x3feec709
 800b2c8:	dc3a03fd 	.word	0xdc3a03fd
 800b2cc:	3feec709 	.word	0x3feec709
 800b2d0:	145b01f5 	.word	0x145b01f5
 800b2d4:	be3e2fe0 	.word	0xbe3e2fe0
 800b2d8:	7ff00000 	.word	0x7ff00000
 800b2dc:	43400000 	.word	0x43400000
 800b2e0:	0003988e 	.word	0x0003988e
 800b2e4:	000bb679 	.word	0x000bb679
 800b2e8:	0800cad8 	.word	0x0800cad8
 800b2ec:	3ff00000 	.word	0x3ff00000
 800b2f0:	40080000 	.word	0x40080000
 800b2f4:	0800cab8 	.word	0x0800cab8
 800b2f8:	0800cac8 	.word	0x0800cac8
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	460b      	mov	r3, r1
 800b300:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b304:	e5d6      	b.n	800aeb4 <__ieee754_pow+0x35c>
 800b306:	f04f 0a01 	mov.w	sl, #1
 800b30a:	e65e      	b.n	800afca <__ieee754_pow+0x472>
 800b30c:	a3b5      	add	r3, pc, #724	@ (adr r3, 800b5e4 <__ieee754_pow+0xa8c>)
 800b30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b312:	4630      	mov	r0, r6
 800b314:	4639      	mov	r1, r7
 800b316:	f7f4 ffd9 	bl	80002cc <__adddf3>
 800b31a:	4642      	mov	r2, r8
 800b31c:	e9cd 0100 	strd	r0, r1, [sp]
 800b320:	464b      	mov	r3, r9
 800b322:	4620      	mov	r0, r4
 800b324:	4629      	mov	r1, r5
 800b326:	f7f4 ffcf 	bl	80002c8 <__aeabi_dsub>
 800b32a:	4602      	mov	r2, r0
 800b32c:	460b      	mov	r3, r1
 800b32e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b332:	f7f5 fc11 	bl	8000b58 <__aeabi_dcmpgt>
 800b336:	2800      	cmp	r0, #0
 800b338:	f47f adfe 	bne.w	800af38 <__ieee754_pow+0x3e0>
 800b33c:	4ba2      	ldr	r3, [pc, #648]	@ (800b5c8 <__ieee754_pow+0xa70>)
 800b33e:	e022      	b.n	800b386 <__ieee754_pow+0x82e>
 800b340:	4ca2      	ldr	r4, [pc, #648]	@ (800b5cc <__ieee754_pow+0xa74>)
 800b342:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b346:	42a3      	cmp	r3, r4
 800b348:	d919      	bls.n	800b37e <__ieee754_pow+0x826>
 800b34a:	4ba1      	ldr	r3, [pc, #644]	@ (800b5d0 <__ieee754_pow+0xa78>)
 800b34c:	440b      	add	r3, r1
 800b34e:	4303      	orrs	r3, r0
 800b350:	d009      	beq.n	800b366 <__ieee754_pow+0x80e>
 800b352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b356:	2200      	movs	r2, #0
 800b358:	2300      	movs	r3, #0
 800b35a:	f7f5 fbdf 	bl	8000b1c <__aeabi_dcmplt>
 800b35e:	3800      	subs	r0, #0
 800b360:	bf18      	it	ne
 800b362:	2001      	movne	r0, #1
 800b364:	e512      	b.n	800ad8c <__ieee754_pow+0x234>
 800b366:	4642      	mov	r2, r8
 800b368:	464b      	mov	r3, r9
 800b36a:	f7f4 ffad 	bl	80002c8 <__aeabi_dsub>
 800b36e:	4632      	mov	r2, r6
 800b370:	463b      	mov	r3, r7
 800b372:	f7f5 fbe7 	bl	8000b44 <__aeabi_dcmpge>
 800b376:	2800      	cmp	r0, #0
 800b378:	d1eb      	bne.n	800b352 <__ieee754_pow+0x7fa>
 800b37a:	4b96      	ldr	r3, [pc, #600]	@ (800b5d4 <__ieee754_pow+0xa7c>)
 800b37c:	e003      	b.n	800b386 <__ieee754_pow+0x82e>
 800b37e:	4a96      	ldr	r2, [pc, #600]	@ (800b5d8 <__ieee754_pow+0xa80>)
 800b380:	4293      	cmp	r3, r2
 800b382:	f240 80e7 	bls.w	800b554 <__ieee754_pow+0x9fc>
 800b386:	151b      	asrs	r3, r3, #20
 800b388:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800b38c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800b390:	fa4a fa03 	asr.w	sl, sl, r3
 800b394:	44da      	add	sl, fp
 800b396:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b39a:	4890      	ldr	r0, [pc, #576]	@ (800b5dc <__ieee754_pow+0xa84>)
 800b39c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b3a0:	4108      	asrs	r0, r1
 800b3a2:	ea00 030a 	and.w	r3, r0, sl
 800b3a6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b3aa:	f1c1 0114 	rsb	r1, r1, #20
 800b3ae:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b3b2:	fa4a fa01 	asr.w	sl, sl, r1
 800b3b6:	f1bb 0f00 	cmp.w	fp, #0
 800b3ba:	4640      	mov	r0, r8
 800b3bc:	4649      	mov	r1, r9
 800b3be:	f04f 0200 	mov.w	r2, #0
 800b3c2:	bfb8      	it	lt
 800b3c4:	f1ca 0a00 	rsblt	sl, sl, #0
 800b3c8:	f7f4 ff7e 	bl	80002c8 <__aeabi_dsub>
 800b3cc:	4680      	mov	r8, r0
 800b3ce:	4689      	mov	r9, r1
 800b3d0:	4632      	mov	r2, r6
 800b3d2:	463b      	mov	r3, r7
 800b3d4:	4640      	mov	r0, r8
 800b3d6:	4649      	mov	r1, r9
 800b3d8:	f7f4 ff78 	bl	80002cc <__adddf3>
 800b3dc:	2400      	movs	r4, #0
 800b3de:	a36a      	add	r3, pc, #424	@ (adr r3, 800b588 <__ieee754_pow+0xa30>)
 800b3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	460d      	mov	r5, r1
 800b3e8:	f7f5 f926 	bl	8000638 <__aeabi_dmul>
 800b3ec:	4642      	mov	r2, r8
 800b3ee:	e9cd 0100 	strd	r0, r1, [sp]
 800b3f2:	464b      	mov	r3, r9
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	4629      	mov	r1, r5
 800b3f8:	f7f4 ff66 	bl	80002c8 <__aeabi_dsub>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	460b      	mov	r3, r1
 800b400:	4630      	mov	r0, r6
 800b402:	4639      	mov	r1, r7
 800b404:	f7f4 ff60 	bl	80002c8 <__aeabi_dsub>
 800b408:	a361      	add	r3, pc, #388	@ (adr r3, 800b590 <__ieee754_pow+0xa38>)
 800b40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40e:	f7f5 f913 	bl	8000638 <__aeabi_dmul>
 800b412:	a361      	add	r3, pc, #388	@ (adr r3, 800b598 <__ieee754_pow+0xa40>)
 800b414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b418:	4680      	mov	r8, r0
 800b41a:	4689      	mov	r9, r1
 800b41c:	4620      	mov	r0, r4
 800b41e:	4629      	mov	r1, r5
 800b420:	f7f5 f90a 	bl	8000638 <__aeabi_dmul>
 800b424:	4602      	mov	r2, r0
 800b426:	460b      	mov	r3, r1
 800b428:	4640      	mov	r0, r8
 800b42a:	4649      	mov	r1, r9
 800b42c:	f7f4 ff4e 	bl	80002cc <__adddf3>
 800b430:	4604      	mov	r4, r0
 800b432:	460d      	mov	r5, r1
 800b434:	4602      	mov	r2, r0
 800b436:	460b      	mov	r3, r1
 800b438:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b43c:	f7f4 ff46 	bl	80002cc <__adddf3>
 800b440:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b444:	4680      	mov	r8, r0
 800b446:	4689      	mov	r9, r1
 800b448:	f7f4 ff3e 	bl	80002c8 <__aeabi_dsub>
 800b44c:	4602      	mov	r2, r0
 800b44e:	460b      	mov	r3, r1
 800b450:	4620      	mov	r0, r4
 800b452:	4629      	mov	r1, r5
 800b454:	f7f4 ff38 	bl	80002c8 <__aeabi_dsub>
 800b458:	4642      	mov	r2, r8
 800b45a:	4606      	mov	r6, r0
 800b45c:	460f      	mov	r7, r1
 800b45e:	464b      	mov	r3, r9
 800b460:	4640      	mov	r0, r8
 800b462:	4649      	mov	r1, r9
 800b464:	f7f5 f8e8 	bl	8000638 <__aeabi_dmul>
 800b468:	a34d      	add	r3, pc, #308	@ (adr r3, 800b5a0 <__ieee754_pow+0xa48>)
 800b46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46e:	4604      	mov	r4, r0
 800b470:	460d      	mov	r5, r1
 800b472:	f7f5 f8e1 	bl	8000638 <__aeabi_dmul>
 800b476:	a34c      	add	r3, pc, #304	@ (adr r3, 800b5a8 <__ieee754_pow+0xa50>)
 800b478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47c:	f7f4 ff24 	bl	80002c8 <__aeabi_dsub>
 800b480:	4622      	mov	r2, r4
 800b482:	462b      	mov	r3, r5
 800b484:	f7f5 f8d8 	bl	8000638 <__aeabi_dmul>
 800b488:	a349      	add	r3, pc, #292	@ (adr r3, 800b5b0 <__ieee754_pow+0xa58>)
 800b48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48e:	f7f4 ff1d 	bl	80002cc <__adddf3>
 800b492:	4622      	mov	r2, r4
 800b494:	462b      	mov	r3, r5
 800b496:	f7f5 f8cf 	bl	8000638 <__aeabi_dmul>
 800b49a:	a347      	add	r3, pc, #284	@ (adr r3, 800b5b8 <__ieee754_pow+0xa60>)
 800b49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a0:	f7f4 ff12 	bl	80002c8 <__aeabi_dsub>
 800b4a4:	4622      	mov	r2, r4
 800b4a6:	462b      	mov	r3, r5
 800b4a8:	f7f5 f8c6 	bl	8000638 <__aeabi_dmul>
 800b4ac:	a344      	add	r3, pc, #272	@ (adr r3, 800b5c0 <__ieee754_pow+0xa68>)
 800b4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b2:	f7f4 ff0b 	bl	80002cc <__adddf3>
 800b4b6:	4622      	mov	r2, r4
 800b4b8:	462b      	mov	r3, r5
 800b4ba:	f7f5 f8bd 	bl	8000638 <__aeabi_dmul>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	4640      	mov	r0, r8
 800b4c4:	4649      	mov	r1, r9
 800b4c6:	f7f4 feff 	bl	80002c8 <__aeabi_dsub>
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	460d      	mov	r5, r1
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	4640      	mov	r0, r8
 800b4d4:	4649      	mov	r1, r9
 800b4d6:	f7f5 f8af 	bl	8000638 <__aeabi_dmul>
 800b4da:	2200      	movs	r2, #0
 800b4dc:	e9cd 0100 	strd	r0, r1, [sp]
 800b4e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	4629      	mov	r1, r5
 800b4e8:	f7f4 feee 	bl	80002c8 <__aeabi_dsub>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4f4:	f7f5 f9ca 	bl	800088c <__aeabi_ddiv>
 800b4f8:	4632      	mov	r2, r6
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	460d      	mov	r5, r1
 800b4fe:	463b      	mov	r3, r7
 800b500:	4640      	mov	r0, r8
 800b502:	4649      	mov	r1, r9
 800b504:	f7f5 f898 	bl	8000638 <__aeabi_dmul>
 800b508:	4632      	mov	r2, r6
 800b50a:	463b      	mov	r3, r7
 800b50c:	f7f4 fede 	bl	80002cc <__adddf3>
 800b510:	4602      	mov	r2, r0
 800b512:	460b      	mov	r3, r1
 800b514:	4620      	mov	r0, r4
 800b516:	4629      	mov	r1, r5
 800b518:	f7f4 fed6 	bl	80002c8 <__aeabi_dsub>
 800b51c:	4642      	mov	r2, r8
 800b51e:	464b      	mov	r3, r9
 800b520:	f7f4 fed2 	bl	80002c8 <__aeabi_dsub>
 800b524:	460b      	mov	r3, r1
 800b526:	4602      	mov	r2, r0
 800b528:	492d      	ldr	r1, [pc, #180]	@ (800b5e0 <__ieee754_pow+0xa88>)
 800b52a:	2000      	movs	r0, #0
 800b52c:	f7f4 fecc 	bl	80002c8 <__aeabi_dsub>
 800b530:	ec41 0b10 	vmov	d0, r0, r1
 800b534:	ee10 3a90 	vmov	r3, s1
 800b538:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b53c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b540:	da0b      	bge.n	800b55a <__ieee754_pow+0xa02>
 800b542:	4650      	mov	r0, sl
 800b544:	f000 fbf0 	bl	800bd28 <scalbn>
 800b548:	ec51 0b10 	vmov	r0, r1, d0
 800b54c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b550:	f7ff bb6d 	b.w	800ac2e <__ieee754_pow+0xd6>
 800b554:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b558:	e73a      	b.n	800b3d0 <__ieee754_pow+0x878>
 800b55a:	ec51 0b10 	vmov	r0, r1, d0
 800b55e:	4619      	mov	r1, r3
 800b560:	e7f4      	b.n	800b54c <__ieee754_pow+0x9f4>
 800b562:	491f      	ldr	r1, [pc, #124]	@ (800b5e0 <__ieee754_pow+0xa88>)
 800b564:	2000      	movs	r0, #0
 800b566:	f7ff bb14 	b.w	800ab92 <__ieee754_pow+0x3a>
 800b56a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b56e:	f7ff bb10 	b.w	800ab92 <__ieee754_pow+0x3a>
 800b572:	4630      	mov	r0, r6
 800b574:	4639      	mov	r1, r7
 800b576:	f7ff bb0c 	b.w	800ab92 <__ieee754_pow+0x3a>
 800b57a:	460c      	mov	r4, r1
 800b57c:	f7ff bb69 	b.w	800ac52 <__ieee754_pow+0xfa>
 800b580:	2400      	movs	r4, #0
 800b582:	f7ff bb4b 	b.w	800ac1c <__ieee754_pow+0xc4>
 800b586:	bf00      	nop
 800b588:	00000000 	.word	0x00000000
 800b58c:	3fe62e43 	.word	0x3fe62e43
 800b590:	fefa39ef 	.word	0xfefa39ef
 800b594:	3fe62e42 	.word	0x3fe62e42
 800b598:	0ca86c39 	.word	0x0ca86c39
 800b59c:	be205c61 	.word	0xbe205c61
 800b5a0:	72bea4d0 	.word	0x72bea4d0
 800b5a4:	3e663769 	.word	0x3e663769
 800b5a8:	c5d26bf1 	.word	0xc5d26bf1
 800b5ac:	3ebbbd41 	.word	0x3ebbbd41
 800b5b0:	af25de2c 	.word	0xaf25de2c
 800b5b4:	3f11566a 	.word	0x3f11566a
 800b5b8:	16bebd93 	.word	0x16bebd93
 800b5bc:	3f66c16c 	.word	0x3f66c16c
 800b5c0:	5555553e 	.word	0x5555553e
 800b5c4:	3fc55555 	.word	0x3fc55555
 800b5c8:	40900000 	.word	0x40900000
 800b5cc:	4090cbff 	.word	0x4090cbff
 800b5d0:	3f6f3400 	.word	0x3f6f3400
 800b5d4:	4090cc00 	.word	0x4090cc00
 800b5d8:	3fe00000 	.word	0x3fe00000
 800b5dc:	fff00000 	.word	0xfff00000
 800b5e0:	3ff00000 	.word	0x3ff00000
 800b5e4:	652b82fe 	.word	0x652b82fe
 800b5e8:	3c971547 	.word	0x3c971547
 800b5ec:	00000000 	.word	0x00000000

0800b5f0 <__ieee754_rem_pio2>:
 800b5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f4:	ec57 6b10 	vmov	r6, r7, d0
 800b5f8:	4bc5      	ldr	r3, [pc, #788]	@ (800b910 <__ieee754_rem_pio2+0x320>)
 800b5fa:	b08d      	sub	sp, #52	@ 0x34
 800b5fc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b600:	4598      	cmp	r8, r3
 800b602:	4604      	mov	r4, r0
 800b604:	9704      	str	r7, [sp, #16]
 800b606:	d807      	bhi.n	800b618 <__ieee754_rem_pio2+0x28>
 800b608:	2200      	movs	r2, #0
 800b60a:	2300      	movs	r3, #0
 800b60c:	ed80 0b00 	vstr	d0, [r0]
 800b610:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b614:	2500      	movs	r5, #0
 800b616:	e028      	b.n	800b66a <__ieee754_rem_pio2+0x7a>
 800b618:	4bbe      	ldr	r3, [pc, #760]	@ (800b914 <__ieee754_rem_pio2+0x324>)
 800b61a:	4598      	cmp	r8, r3
 800b61c:	d878      	bhi.n	800b710 <__ieee754_rem_pio2+0x120>
 800b61e:	9b04      	ldr	r3, [sp, #16]
 800b620:	4dbd      	ldr	r5, [pc, #756]	@ (800b918 <__ieee754_rem_pio2+0x328>)
 800b622:	2b00      	cmp	r3, #0
 800b624:	4630      	mov	r0, r6
 800b626:	a3ac      	add	r3, pc, #688	@ (adr r3, 800b8d8 <__ieee754_rem_pio2+0x2e8>)
 800b628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62c:	4639      	mov	r1, r7
 800b62e:	dd38      	ble.n	800b6a2 <__ieee754_rem_pio2+0xb2>
 800b630:	f7f4 fe4a 	bl	80002c8 <__aeabi_dsub>
 800b634:	45a8      	cmp	r8, r5
 800b636:	4606      	mov	r6, r0
 800b638:	460f      	mov	r7, r1
 800b63a:	d01a      	beq.n	800b672 <__ieee754_rem_pio2+0x82>
 800b63c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800b8e0 <__ieee754_rem_pio2+0x2f0>)
 800b63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b642:	f7f4 fe41 	bl	80002c8 <__aeabi_dsub>
 800b646:	4602      	mov	r2, r0
 800b648:	460b      	mov	r3, r1
 800b64a:	4680      	mov	r8, r0
 800b64c:	4689      	mov	r9, r1
 800b64e:	4630      	mov	r0, r6
 800b650:	4639      	mov	r1, r7
 800b652:	f7f4 fe39 	bl	80002c8 <__aeabi_dsub>
 800b656:	a3a2      	add	r3, pc, #648	@ (adr r3, 800b8e0 <__ieee754_rem_pio2+0x2f0>)
 800b658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65c:	f7f4 fe34 	bl	80002c8 <__aeabi_dsub>
 800b660:	e9c4 8900 	strd	r8, r9, [r4]
 800b664:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b668:	2501      	movs	r5, #1
 800b66a:	4628      	mov	r0, r5
 800b66c:	b00d      	add	sp, #52	@ 0x34
 800b66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b672:	a39d      	add	r3, pc, #628	@ (adr r3, 800b8e8 <__ieee754_rem_pio2+0x2f8>)
 800b674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b678:	f7f4 fe26 	bl	80002c8 <__aeabi_dsub>
 800b67c:	a39c      	add	r3, pc, #624	@ (adr r3, 800b8f0 <__ieee754_rem_pio2+0x300>)
 800b67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b682:	4606      	mov	r6, r0
 800b684:	460f      	mov	r7, r1
 800b686:	f7f4 fe1f 	bl	80002c8 <__aeabi_dsub>
 800b68a:	4602      	mov	r2, r0
 800b68c:	460b      	mov	r3, r1
 800b68e:	4680      	mov	r8, r0
 800b690:	4689      	mov	r9, r1
 800b692:	4630      	mov	r0, r6
 800b694:	4639      	mov	r1, r7
 800b696:	f7f4 fe17 	bl	80002c8 <__aeabi_dsub>
 800b69a:	a395      	add	r3, pc, #596	@ (adr r3, 800b8f0 <__ieee754_rem_pio2+0x300>)
 800b69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a0:	e7dc      	b.n	800b65c <__ieee754_rem_pio2+0x6c>
 800b6a2:	f7f4 fe13 	bl	80002cc <__adddf3>
 800b6a6:	45a8      	cmp	r8, r5
 800b6a8:	4606      	mov	r6, r0
 800b6aa:	460f      	mov	r7, r1
 800b6ac:	d018      	beq.n	800b6e0 <__ieee754_rem_pio2+0xf0>
 800b6ae:	a38c      	add	r3, pc, #560	@ (adr r3, 800b8e0 <__ieee754_rem_pio2+0x2f0>)
 800b6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b4:	f7f4 fe0a 	bl	80002cc <__adddf3>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	4680      	mov	r8, r0
 800b6be:	4689      	mov	r9, r1
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	4639      	mov	r1, r7
 800b6c4:	f7f4 fe00 	bl	80002c8 <__aeabi_dsub>
 800b6c8:	a385      	add	r3, pc, #532	@ (adr r3, 800b8e0 <__ieee754_rem_pio2+0x2f0>)
 800b6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ce:	f7f4 fdfd 	bl	80002cc <__adddf3>
 800b6d2:	f04f 35ff 	mov.w	r5, #4294967295
 800b6d6:	e9c4 8900 	strd	r8, r9, [r4]
 800b6da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b6de:	e7c4      	b.n	800b66a <__ieee754_rem_pio2+0x7a>
 800b6e0:	a381      	add	r3, pc, #516	@ (adr r3, 800b8e8 <__ieee754_rem_pio2+0x2f8>)
 800b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e6:	f7f4 fdf1 	bl	80002cc <__adddf3>
 800b6ea:	a381      	add	r3, pc, #516	@ (adr r3, 800b8f0 <__ieee754_rem_pio2+0x300>)
 800b6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f0:	4606      	mov	r6, r0
 800b6f2:	460f      	mov	r7, r1
 800b6f4:	f7f4 fdea 	bl	80002cc <__adddf3>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	4680      	mov	r8, r0
 800b6fe:	4689      	mov	r9, r1
 800b700:	4630      	mov	r0, r6
 800b702:	4639      	mov	r1, r7
 800b704:	f7f4 fde0 	bl	80002c8 <__aeabi_dsub>
 800b708:	a379      	add	r3, pc, #484	@ (adr r3, 800b8f0 <__ieee754_rem_pio2+0x300>)
 800b70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70e:	e7de      	b.n	800b6ce <__ieee754_rem_pio2+0xde>
 800b710:	4b82      	ldr	r3, [pc, #520]	@ (800b91c <__ieee754_rem_pio2+0x32c>)
 800b712:	4598      	cmp	r8, r3
 800b714:	f200 80d1 	bhi.w	800b8ba <__ieee754_rem_pio2+0x2ca>
 800b718:	f000 fafe 	bl	800bd18 <fabs>
 800b71c:	ec57 6b10 	vmov	r6, r7, d0
 800b720:	a375      	add	r3, pc, #468	@ (adr r3, 800b8f8 <__ieee754_rem_pio2+0x308>)
 800b722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b726:	4630      	mov	r0, r6
 800b728:	4639      	mov	r1, r7
 800b72a:	f7f4 ff85 	bl	8000638 <__aeabi_dmul>
 800b72e:	4b7c      	ldr	r3, [pc, #496]	@ (800b920 <__ieee754_rem_pio2+0x330>)
 800b730:	2200      	movs	r2, #0
 800b732:	f7f4 fdcb 	bl	80002cc <__adddf3>
 800b736:	f7f5 fa2f 	bl	8000b98 <__aeabi_d2iz>
 800b73a:	4605      	mov	r5, r0
 800b73c:	f7f4 ff12 	bl	8000564 <__aeabi_i2d>
 800b740:	4602      	mov	r2, r0
 800b742:	460b      	mov	r3, r1
 800b744:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b748:	a363      	add	r3, pc, #396	@ (adr r3, 800b8d8 <__ieee754_rem_pio2+0x2e8>)
 800b74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74e:	f7f4 ff73 	bl	8000638 <__aeabi_dmul>
 800b752:	4602      	mov	r2, r0
 800b754:	460b      	mov	r3, r1
 800b756:	4630      	mov	r0, r6
 800b758:	4639      	mov	r1, r7
 800b75a:	f7f4 fdb5 	bl	80002c8 <__aeabi_dsub>
 800b75e:	a360      	add	r3, pc, #384	@ (adr r3, 800b8e0 <__ieee754_rem_pio2+0x2f0>)
 800b760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b764:	4682      	mov	sl, r0
 800b766:	468b      	mov	fp, r1
 800b768:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b76c:	f7f4 ff64 	bl	8000638 <__aeabi_dmul>
 800b770:	2d1f      	cmp	r5, #31
 800b772:	4606      	mov	r6, r0
 800b774:	460f      	mov	r7, r1
 800b776:	dc0c      	bgt.n	800b792 <__ieee754_rem_pio2+0x1a2>
 800b778:	4b6a      	ldr	r3, [pc, #424]	@ (800b924 <__ieee754_rem_pio2+0x334>)
 800b77a:	1e6a      	subs	r2, r5, #1
 800b77c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b780:	4543      	cmp	r3, r8
 800b782:	d006      	beq.n	800b792 <__ieee754_rem_pio2+0x1a2>
 800b784:	4632      	mov	r2, r6
 800b786:	463b      	mov	r3, r7
 800b788:	4650      	mov	r0, sl
 800b78a:	4659      	mov	r1, fp
 800b78c:	f7f4 fd9c 	bl	80002c8 <__aeabi_dsub>
 800b790:	e00e      	b.n	800b7b0 <__ieee754_rem_pio2+0x1c0>
 800b792:	463b      	mov	r3, r7
 800b794:	4632      	mov	r2, r6
 800b796:	4650      	mov	r0, sl
 800b798:	4659      	mov	r1, fp
 800b79a:	f7f4 fd95 	bl	80002c8 <__aeabi_dsub>
 800b79e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b7a2:	9305      	str	r3, [sp, #20]
 800b7a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b7a8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800b7ac:	2b10      	cmp	r3, #16
 800b7ae:	dc02      	bgt.n	800b7b6 <__ieee754_rem_pio2+0x1c6>
 800b7b0:	e9c4 0100 	strd	r0, r1, [r4]
 800b7b4:	e039      	b.n	800b82a <__ieee754_rem_pio2+0x23a>
 800b7b6:	a34c      	add	r3, pc, #304	@ (adr r3, 800b8e8 <__ieee754_rem_pio2+0x2f8>)
 800b7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7c0:	f7f4 ff3a 	bl	8000638 <__aeabi_dmul>
 800b7c4:	4606      	mov	r6, r0
 800b7c6:	460f      	mov	r7, r1
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	4650      	mov	r0, sl
 800b7ce:	4659      	mov	r1, fp
 800b7d0:	f7f4 fd7a 	bl	80002c8 <__aeabi_dsub>
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	4680      	mov	r8, r0
 800b7da:	4689      	mov	r9, r1
 800b7dc:	4650      	mov	r0, sl
 800b7de:	4659      	mov	r1, fp
 800b7e0:	f7f4 fd72 	bl	80002c8 <__aeabi_dsub>
 800b7e4:	4632      	mov	r2, r6
 800b7e6:	463b      	mov	r3, r7
 800b7e8:	f7f4 fd6e 	bl	80002c8 <__aeabi_dsub>
 800b7ec:	a340      	add	r3, pc, #256	@ (adr r3, 800b8f0 <__ieee754_rem_pio2+0x300>)
 800b7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f2:	4606      	mov	r6, r0
 800b7f4:	460f      	mov	r7, r1
 800b7f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7fa:	f7f4 ff1d 	bl	8000638 <__aeabi_dmul>
 800b7fe:	4632      	mov	r2, r6
 800b800:	463b      	mov	r3, r7
 800b802:	f7f4 fd61 	bl	80002c8 <__aeabi_dsub>
 800b806:	4602      	mov	r2, r0
 800b808:	460b      	mov	r3, r1
 800b80a:	4606      	mov	r6, r0
 800b80c:	460f      	mov	r7, r1
 800b80e:	4640      	mov	r0, r8
 800b810:	4649      	mov	r1, r9
 800b812:	f7f4 fd59 	bl	80002c8 <__aeabi_dsub>
 800b816:	9a05      	ldr	r2, [sp, #20]
 800b818:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b81c:	1ad3      	subs	r3, r2, r3
 800b81e:	2b31      	cmp	r3, #49	@ 0x31
 800b820:	dc20      	bgt.n	800b864 <__ieee754_rem_pio2+0x274>
 800b822:	e9c4 0100 	strd	r0, r1, [r4]
 800b826:	46c2      	mov	sl, r8
 800b828:	46cb      	mov	fp, r9
 800b82a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b82e:	4650      	mov	r0, sl
 800b830:	4642      	mov	r2, r8
 800b832:	464b      	mov	r3, r9
 800b834:	4659      	mov	r1, fp
 800b836:	f7f4 fd47 	bl	80002c8 <__aeabi_dsub>
 800b83a:	463b      	mov	r3, r7
 800b83c:	4632      	mov	r2, r6
 800b83e:	f7f4 fd43 	bl	80002c8 <__aeabi_dsub>
 800b842:	9b04      	ldr	r3, [sp, #16]
 800b844:	2b00      	cmp	r3, #0
 800b846:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b84a:	f6bf af0e 	bge.w	800b66a <__ieee754_rem_pio2+0x7a>
 800b84e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800b852:	6063      	str	r3, [r4, #4]
 800b854:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b858:	f8c4 8000 	str.w	r8, [r4]
 800b85c:	60a0      	str	r0, [r4, #8]
 800b85e:	60e3      	str	r3, [r4, #12]
 800b860:	426d      	negs	r5, r5
 800b862:	e702      	b.n	800b66a <__ieee754_rem_pio2+0x7a>
 800b864:	a326      	add	r3, pc, #152	@ (adr r3, 800b900 <__ieee754_rem_pio2+0x310>)
 800b866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b86e:	f7f4 fee3 	bl	8000638 <__aeabi_dmul>
 800b872:	4606      	mov	r6, r0
 800b874:	460f      	mov	r7, r1
 800b876:	4602      	mov	r2, r0
 800b878:	460b      	mov	r3, r1
 800b87a:	4640      	mov	r0, r8
 800b87c:	4649      	mov	r1, r9
 800b87e:	f7f4 fd23 	bl	80002c8 <__aeabi_dsub>
 800b882:	4602      	mov	r2, r0
 800b884:	460b      	mov	r3, r1
 800b886:	4682      	mov	sl, r0
 800b888:	468b      	mov	fp, r1
 800b88a:	4640      	mov	r0, r8
 800b88c:	4649      	mov	r1, r9
 800b88e:	f7f4 fd1b 	bl	80002c8 <__aeabi_dsub>
 800b892:	4632      	mov	r2, r6
 800b894:	463b      	mov	r3, r7
 800b896:	f7f4 fd17 	bl	80002c8 <__aeabi_dsub>
 800b89a:	a31b      	add	r3, pc, #108	@ (adr r3, 800b908 <__ieee754_rem_pio2+0x318>)
 800b89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a0:	4606      	mov	r6, r0
 800b8a2:	460f      	mov	r7, r1
 800b8a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8a8:	f7f4 fec6 	bl	8000638 <__aeabi_dmul>
 800b8ac:	4632      	mov	r2, r6
 800b8ae:	463b      	mov	r3, r7
 800b8b0:	f7f4 fd0a 	bl	80002c8 <__aeabi_dsub>
 800b8b4:	4606      	mov	r6, r0
 800b8b6:	460f      	mov	r7, r1
 800b8b8:	e764      	b.n	800b784 <__ieee754_rem_pio2+0x194>
 800b8ba:	4b1b      	ldr	r3, [pc, #108]	@ (800b928 <__ieee754_rem_pio2+0x338>)
 800b8bc:	4598      	cmp	r8, r3
 800b8be:	d935      	bls.n	800b92c <__ieee754_rem_pio2+0x33c>
 800b8c0:	4632      	mov	r2, r6
 800b8c2:	463b      	mov	r3, r7
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	4639      	mov	r1, r7
 800b8c8:	f7f4 fcfe 	bl	80002c8 <__aeabi_dsub>
 800b8cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b8d0:	e9c4 0100 	strd	r0, r1, [r4]
 800b8d4:	e69e      	b.n	800b614 <__ieee754_rem_pio2+0x24>
 800b8d6:	bf00      	nop
 800b8d8:	54400000 	.word	0x54400000
 800b8dc:	3ff921fb 	.word	0x3ff921fb
 800b8e0:	1a626331 	.word	0x1a626331
 800b8e4:	3dd0b461 	.word	0x3dd0b461
 800b8e8:	1a600000 	.word	0x1a600000
 800b8ec:	3dd0b461 	.word	0x3dd0b461
 800b8f0:	2e037073 	.word	0x2e037073
 800b8f4:	3ba3198a 	.word	0x3ba3198a
 800b8f8:	6dc9c883 	.word	0x6dc9c883
 800b8fc:	3fe45f30 	.word	0x3fe45f30
 800b900:	2e000000 	.word	0x2e000000
 800b904:	3ba3198a 	.word	0x3ba3198a
 800b908:	252049c1 	.word	0x252049c1
 800b90c:	397b839a 	.word	0x397b839a
 800b910:	3fe921fb 	.word	0x3fe921fb
 800b914:	4002d97b 	.word	0x4002d97b
 800b918:	3ff921fb 	.word	0x3ff921fb
 800b91c:	413921fb 	.word	0x413921fb
 800b920:	3fe00000 	.word	0x3fe00000
 800b924:	0800cae8 	.word	0x0800cae8
 800b928:	7fefffff 	.word	0x7fefffff
 800b92c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b930:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800b934:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b938:	4630      	mov	r0, r6
 800b93a:	460f      	mov	r7, r1
 800b93c:	f7f5 f92c 	bl	8000b98 <__aeabi_d2iz>
 800b940:	f7f4 fe10 	bl	8000564 <__aeabi_i2d>
 800b944:	4602      	mov	r2, r0
 800b946:	460b      	mov	r3, r1
 800b948:	4630      	mov	r0, r6
 800b94a:	4639      	mov	r1, r7
 800b94c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b950:	f7f4 fcba 	bl	80002c8 <__aeabi_dsub>
 800b954:	4b22      	ldr	r3, [pc, #136]	@ (800b9e0 <__ieee754_rem_pio2+0x3f0>)
 800b956:	2200      	movs	r2, #0
 800b958:	f7f4 fe6e 	bl	8000638 <__aeabi_dmul>
 800b95c:	460f      	mov	r7, r1
 800b95e:	4606      	mov	r6, r0
 800b960:	f7f5 f91a 	bl	8000b98 <__aeabi_d2iz>
 800b964:	f7f4 fdfe 	bl	8000564 <__aeabi_i2d>
 800b968:	4602      	mov	r2, r0
 800b96a:	460b      	mov	r3, r1
 800b96c:	4630      	mov	r0, r6
 800b96e:	4639      	mov	r1, r7
 800b970:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b974:	f7f4 fca8 	bl	80002c8 <__aeabi_dsub>
 800b978:	4b19      	ldr	r3, [pc, #100]	@ (800b9e0 <__ieee754_rem_pio2+0x3f0>)
 800b97a:	2200      	movs	r2, #0
 800b97c:	f7f4 fe5c 	bl	8000638 <__aeabi_dmul>
 800b980:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800b984:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800b988:	f04f 0803 	mov.w	r8, #3
 800b98c:	2600      	movs	r6, #0
 800b98e:	2700      	movs	r7, #0
 800b990:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b994:	4632      	mov	r2, r6
 800b996:	463b      	mov	r3, r7
 800b998:	46c2      	mov	sl, r8
 800b99a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b99e:	f7f5 f8b3 	bl	8000b08 <__aeabi_dcmpeq>
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	d1f4      	bne.n	800b990 <__ieee754_rem_pio2+0x3a0>
 800b9a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b9e4 <__ieee754_rem_pio2+0x3f4>)
 800b9a8:	9301      	str	r3, [sp, #4]
 800b9aa:	2302      	movs	r3, #2
 800b9ac:	9300      	str	r3, [sp, #0]
 800b9ae:	462a      	mov	r2, r5
 800b9b0:	4653      	mov	r3, sl
 800b9b2:	4621      	mov	r1, r4
 800b9b4:	a806      	add	r0, sp, #24
 800b9b6:	f000 fa6f 	bl	800be98 <__kernel_rem_pio2>
 800b9ba:	9b04      	ldr	r3, [sp, #16]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	4605      	mov	r5, r0
 800b9c0:	f6bf ae53 	bge.w	800b66a <__ieee754_rem_pio2+0x7a>
 800b9c4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800b9c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b9cc:	e9c4 2300 	strd	r2, r3, [r4]
 800b9d0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800b9d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b9d8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b9dc:	e740      	b.n	800b860 <__ieee754_rem_pio2+0x270>
 800b9de:	bf00      	nop
 800b9e0:	41700000 	.word	0x41700000
 800b9e4:	0800cb68 	.word	0x0800cb68

0800b9e8 <atan>:
 800b9e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ec:	ec55 4b10 	vmov	r4, r5, d0
 800b9f0:	4bbf      	ldr	r3, [pc, #764]	@ (800bcf0 <atan+0x308>)
 800b9f2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800b9f6:	429e      	cmp	r6, r3
 800b9f8:	46ab      	mov	fp, r5
 800b9fa:	d918      	bls.n	800ba2e <atan+0x46>
 800b9fc:	4bbd      	ldr	r3, [pc, #756]	@ (800bcf4 <atan+0x30c>)
 800b9fe:	429e      	cmp	r6, r3
 800ba00:	d801      	bhi.n	800ba06 <atan+0x1e>
 800ba02:	d109      	bne.n	800ba18 <atan+0x30>
 800ba04:	b144      	cbz	r4, 800ba18 <atan+0x30>
 800ba06:	4622      	mov	r2, r4
 800ba08:	462b      	mov	r3, r5
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	4629      	mov	r1, r5
 800ba0e:	f7f4 fc5d 	bl	80002cc <__adddf3>
 800ba12:	4604      	mov	r4, r0
 800ba14:	460d      	mov	r5, r1
 800ba16:	e006      	b.n	800ba26 <atan+0x3e>
 800ba18:	f1bb 0f00 	cmp.w	fp, #0
 800ba1c:	f340 812b 	ble.w	800bc76 <atan+0x28e>
 800ba20:	a597      	add	r5, pc, #604	@ (adr r5, 800bc80 <atan+0x298>)
 800ba22:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ba26:	ec45 4b10 	vmov	d0, r4, r5
 800ba2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba2e:	4bb2      	ldr	r3, [pc, #712]	@ (800bcf8 <atan+0x310>)
 800ba30:	429e      	cmp	r6, r3
 800ba32:	d813      	bhi.n	800ba5c <atan+0x74>
 800ba34:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800ba38:	429e      	cmp	r6, r3
 800ba3a:	d80c      	bhi.n	800ba56 <atan+0x6e>
 800ba3c:	a392      	add	r3, pc, #584	@ (adr r3, 800bc88 <atan+0x2a0>)
 800ba3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba42:	4620      	mov	r0, r4
 800ba44:	4629      	mov	r1, r5
 800ba46:	f7f4 fc41 	bl	80002cc <__adddf3>
 800ba4a:	4bac      	ldr	r3, [pc, #688]	@ (800bcfc <atan+0x314>)
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f7f5 f883 	bl	8000b58 <__aeabi_dcmpgt>
 800ba52:	2800      	cmp	r0, #0
 800ba54:	d1e7      	bne.n	800ba26 <atan+0x3e>
 800ba56:	f04f 3aff 	mov.w	sl, #4294967295
 800ba5a:	e029      	b.n	800bab0 <atan+0xc8>
 800ba5c:	f000 f95c 	bl	800bd18 <fabs>
 800ba60:	4ba7      	ldr	r3, [pc, #668]	@ (800bd00 <atan+0x318>)
 800ba62:	429e      	cmp	r6, r3
 800ba64:	ec55 4b10 	vmov	r4, r5, d0
 800ba68:	f200 80bc 	bhi.w	800bbe4 <atan+0x1fc>
 800ba6c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800ba70:	429e      	cmp	r6, r3
 800ba72:	f200 809e 	bhi.w	800bbb2 <atan+0x1ca>
 800ba76:	4622      	mov	r2, r4
 800ba78:	462b      	mov	r3, r5
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	f7f4 fc25 	bl	80002cc <__adddf3>
 800ba82:	4b9e      	ldr	r3, [pc, #632]	@ (800bcfc <atan+0x314>)
 800ba84:	2200      	movs	r2, #0
 800ba86:	f7f4 fc1f 	bl	80002c8 <__aeabi_dsub>
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	4606      	mov	r6, r0
 800ba8e:	460f      	mov	r7, r1
 800ba90:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ba94:	4620      	mov	r0, r4
 800ba96:	4629      	mov	r1, r5
 800ba98:	f7f4 fc18 	bl	80002cc <__adddf3>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	460b      	mov	r3, r1
 800baa0:	4630      	mov	r0, r6
 800baa2:	4639      	mov	r1, r7
 800baa4:	f7f4 fef2 	bl	800088c <__aeabi_ddiv>
 800baa8:	f04f 0a00 	mov.w	sl, #0
 800baac:	4604      	mov	r4, r0
 800baae:	460d      	mov	r5, r1
 800bab0:	4622      	mov	r2, r4
 800bab2:	462b      	mov	r3, r5
 800bab4:	4620      	mov	r0, r4
 800bab6:	4629      	mov	r1, r5
 800bab8:	f7f4 fdbe 	bl	8000638 <__aeabi_dmul>
 800babc:	4602      	mov	r2, r0
 800babe:	460b      	mov	r3, r1
 800bac0:	4680      	mov	r8, r0
 800bac2:	4689      	mov	r9, r1
 800bac4:	f7f4 fdb8 	bl	8000638 <__aeabi_dmul>
 800bac8:	a371      	add	r3, pc, #452	@ (adr r3, 800bc90 <atan+0x2a8>)
 800baca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bace:	4606      	mov	r6, r0
 800bad0:	460f      	mov	r7, r1
 800bad2:	f7f4 fdb1 	bl	8000638 <__aeabi_dmul>
 800bad6:	a370      	add	r3, pc, #448	@ (adr r3, 800bc98 <atan+0x2b0>)
 800bad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800badc:	f7f4 fbf6 	bl	80002cc <__adddf3>
 800bae0:	4632      	mov	r2, r6
 800bae2:	463b      	mov	r3, r7
 800bae4:	f7f4 fda8 	bl	8000638 <__aeabi_dmul>
 800bae8:	a36d      	add	r3, pc, #436	@ (adr r3, 800bca0 <atan+0x2b8>)
 800baea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baee:	f7f4 fbed 	bl	80002cc <__adddf3>
 800baf2:	4632      	mov	r2, r6
 800baf4:	463b      	mov	r3, r7
 800baf6:	f7f4 fd9f 	bl	8000638 <__aeabi_dmul>
 800bafa:	a36b      	add	r3, pc, #428	@ (adr r3, 800bca8 <atan+0x2c0>)
 800bafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb00:	f7f4 fbe4 	bl	80002cc <__adddf3>
 800bb04:	4632      	mov	r2, r6
 800bb06:	463b      	mov	r3, r7
 800bb08:	f7f4 fd96 	bl	8000638 <__aeabi_dmul>
 800bb0c:	a368      	add	r3, pc, #416	@ (adr r3, 800bcb0 <atan+0x2c8>)
 800bb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb12:	f7f4 fbdb 	bl	80002cc <__adddf3>
 800bb16:	4632      	mov	r2, r6
 800bb18:	463b      	mov	r3, r7
 800bb1a:	f7f4 fd8d 	bl	8000638 <__aeabi_dmul>
 800bb1e:	a366      	add	r3, pc, #408	@ (adr r3, 800bcb8 <atan+0x2d0>)
 800bb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb24:	f7f4 fbd2 	bl	80002cc <__adddf3>
 800bb28:	4642      	mov	r2, r8
 800bb2a:	464b      	mov	r3, r9
 800bb2c:	f7f4 fd84 	bl	8000638 <__aeabi_dmul>
 800bb30:	a363      	add	r3, pc, #396	@ (adr r3, 800bcc0 <atan+0x2d8>)
 800bb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb36:	4680      	mov	r8, r0
 800bb38:	4689      	mov	r9, r1
 800bb3a:	4630      	mov	r0, r6
 800bb3c:	4639      	mov	r1, r7
 800bb3e:	f7f4 fd7b 	bl	8000638 <__aeabi_dmul>
 800bb42:	a361      	add	r3, pc, #388	@ (adr r3, 800bcc8 <atan+0x2e0>)
 800bb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb48:	f7f4 fbbe 	bl	80002c8 <__aeabi_dsub>
 800bb4c:	4632      	mov	r2, r6
 800bb4e:	463b      	mov	r3, r7
 800bb50:	f7f4 fd72 	bl	8000638 <__aeabi_dmul>
 800bb54:	a35e      	add	r3, pc, #376	@ (adr r3, 800bcd0 <atan+0x2e8>)
 800bb56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5a:	f7f4 fbb5 	bl	80002c8 <__aeabi_dsub>
 800bb5e:	4632      	mov	r2, r6
 800bb60:	463b      	mov	r3, r7
 800bb62:	f7f4 fd69 	bl	8000638 <__aeabi_dmul>
 800bb66:	a35c      	add	r3, pc, #368	@ (adr r3, 800bcd8 <atan+0x2f0>)
 800bb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6c:	f7f4 fbac 	bl	80002c8 <__aeabi_dsub>
 800bb70:	4632      	mov	r2, r6
 800bb72:	463b      	mov	r3, r7
 800bb74:	f7f4 fd60 	bl	8000638 <__aeabi_dmul>
 800bb78:	a359      	add	r3, pc, #356	@ (adr r3, 800bce0 <atan+0x2f8>)
 800bb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7e:	f7f4 fba3 	bl	80002c8 <__aeabi_dsub>
 800bb82:	4632      	mov	r2, r6
 800bb84:	463b      	mov	r3, r7
 800bb86:	f7f4 fd57 	bl	8000638 <__aeabi_dmul>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	4640      	mov	r0, r8
 800bb90:	4649      	mov	r1, r9
 800bb92:	f7f4 fb9b 	bl	80002cc <__adddf3>
 800bb96:	4622      	mov	r2, r4
 800bb98:	462b      	mov	r3, r5
 800bb9a:	f7f4 fd4d 	bl	8000638 <__aeabi_dmul>
 800bb9e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bba2:	4602      	mov	r2, r0
 800bba4:	460b      	mov	r3, r1
 800bba6:	d148      	bne.n	800bc3a <atan+0x252>
 800bba8:	4620      	mov	r0, r4
 800bbaa:	4629      	mov	r1, r5
 800bbac:	f7f4 fb8c 	bl	80002c8 <__aeabi_dsub>
 800bbb0:	e72f      	b.n	800ba12 <atan+0x2a>
 800bbb2:	4b52      	ldr	r3, [pc, #328]	@ (800bcfc <atan+0x314>)
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	4629      	mov	r1, r5
 800bbba:	f7f4 fb85 	bl	80002c8 <__aeabi_dsub>
 800bbbe:	4b4f      	ldr	r3, [pc, #316]	@ (800bcfc <atan+0x314>)
 800bbc0:	4606      	mov	r6, r0
 800bbc2:	460f      	mov	r7, r1
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	4629      	mov	r1, r5
 800bbca:	f7f4 fb7f 	bl	80002cc <__adddf3>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	4630      	mov	r0, r6
 800bbd4:	4639      	mov	r1, r7
 800bbd6:	f7f4 fe59 	bl	800088c <__aeabi_ddiv>
 800bbda:	f04f 0a01 	mov.w	sl, #1
 800bbde:	4604      	mov	r4, r0
 800bbe0:	460d      	mov	r5, r1
 800bbe2:	e765      	b.n	800bab0 <atan+0xc8>
 800bbe4:	4b47      	ldr	r3, [pc, #284]	@ (800bd04 <atan+0x31c>)
 800bbe6:	429e      	cmp	r6, r3
 800bbe8:	d21c      	bcs.n	800bc24 <atan+0x23c>
 800bbea:	4b47      	ldr	r3, [pc, #284]	@ (800bd08 <atan+0x320>)
 800bbec:	2200      	movs	r2, #0
 800bbee:	4620      	mov	r0, r4
 800bbf0:	4629      	mov	r1, r5
 800bbf2:	f7f4 fb69 	bl	80002c8 <__aeabi_dsub>
 800bbf6:	4b44      	ldr	r3, [pc, #272]	@ (800bd08 <atan+0x320>)
 800bbf8:	4606      	mov	r6, r0
 800bbfa:	460f      	mov	r7, r1
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	4620      	mov	r0, r4
 800bc00:	4629      	mov	r1, r5
 800bc02:	f7f4 fd19 	bl	8000638 <__aeabi_dmul>
 800bc06:	4b3d      	ldr	r3, [pc, #244]	@ (800bcfc <atan+0x314>)
 800bc08:	2200      	movs	r2, #0
 800bc0a:	f7f4 fb5f 	bl	80002cc <__adddf3>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	460b      	mov	r3, r1
 800bc12:	4630      	mov	r0, r6
 800bc14:	4639      	mov	r1, r7
 800bc16:	f7f4 fe39 	bl	800088c <__aeabi_ddiv>
 800bc1a:	f04f 0a02 	mov.w	sl, #2
 800bc1e:	4604      	mov	r4, r0
 800bc20:	460d      	mov	r5, r1
 800bc22:	e745      	b.n	800bab0 <atan+0xc8>
 800bc24:	4622      	mov	r2, r4
 800bc26:	462b      	mov	r3, r5
 800bc28:	4938      	ldr	r1, [pc, #224]	@ (800bd0c <atan+0x324>)
 800bc2a:	2000      	movs	r0, #0
 800bc2c:	f7f4 fe2e 	bl	800088c <__aeabi_ddiv>
 800bc30:	f04f 0a03 	mov.w	sl, #3
 800bc34:	4604      	mov	r4, r0
 800bc36:	460d      	mov	r5, r1
 800bc38:	e73a      	b.n	800bab0 <atan+0xc8>
 800bc3a:	4b35      	ldr	r3, [pc, #212]	@ (800bd10 <atan+0x328>)
 800bc3c:	4e35      	ldr	r6, [pc, #212]	@ (800bd14 <atan+0x32c>)
 800bc3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bc42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc46:	f7f4 fb3f 	bl	80002c8 <__aeabi_dsub>
 800bc4a:	4622      	mov	r2, r4
 800bc4c:	462b      	mov	r3, r5
 800bc4e:	f7f4 fb3b 	bl	80002c8 <__aeabi_dsub>
 800bc52:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bc56:	4602      	mov	r2, r0
 800bc58:	460b      	mov	r3, r1
 800bc5a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bc5e:	f7f4 fb33 	bl	80002c8 <__aeabi_dsub>
 800bc62:	f1bb 0f00 	cmp.w	fp, #0
 800bc66:	4604      	mov	r4, r0
 800bc68:	460d      	mov	r5, r1
 800bc6a:	f6bf aedc 	bge.w	800ba26 <atan+0x3e>
 800bc6e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bc72:	461d      	mov	r5, r3
 800bc74:	e6d7      	b.n	800ba26 <atan+0x3e>
 800bc76:	a51c      	add	r5, pc, #112	@ (adr r5, 800bce8 <atan+0x300>)
 800bc78:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc7c:	e6d3      	b.n	800ba26 <atan+0x3e>
 800bc7e:	bf00      	nop
 800bc80:	54442d18 	.word	0x54442d18
 800bc84:	3ff921fb 	.word	0x3ff921fb
 800bc88:	8800759c 	.word	0x8800759c
 800bc8c:	7e37e43c 	.word	0x7e37e43c
 800bc90:	e322da11 	.word	0xe322da11
 800bc94:	3f90ad3a 	.word	0x3f90ad3a
 800bc98:	24760deb 	.word	0x24760deb
 800bc9c:	3fa97b4b 	.word	0x3fa97b4b
 800bca0:	a0d03d51 	.word	0xa0d03d51
 800bca4:	3fb10d66 	.word	0x3fb10d66
 800bca8:	c54c206e 	.word	0xc54c206e
 800bcac:	3fb745cd 	.word	0x3fb745cd
 800bcb0:	920083ff 	.word	0x920083ff
 800bcb4:	3fc24924 	.word	0x3fc24924
 800bcb8:	5555550d 	.word	0x5555550d
 800bcbc:	3fd55555 	.word	0x3fd55555
 800bcc0:	2c6a6c2f 	.word	0x2c6a6c2f
 800bcc4:	bfa2b444 	.word	0xbfa2b444
 800bcc8:	52defd9a 	.word	0x52defd9a
 800bccc:	3fadde2d 	.word	0x3fadde2d
 800bcd0:	af749a6d 	.word	0xaf749a6d
 800bcd4:	3fb3b0f2 	.word	0x3fb3b0f2
 800bcd8:	fe231671 	.word	0xfe231671
 800bcdc:	3fbc71c6 	.word	0x3fbc71c6
 800bce0:	9998ebc4 	.word	0x9998ebc4
 800bce4:	3fc99999 	.word	0x3fc99999
 800bce8:	54442d18 	.word	0x54442d18
 800bcec:	bff921fb 	.word	0xbff921fb
 800bcf0:	440fffff 	.word	0x440fffff
 800bcf4:	7ff00000 	.word	0x7ff00000
 800bcf8:	3fdbffff 	.word	0x3fdbffff
 800bcfc:	3ff00000 	.word	0x3ff00000
 800bd00:	3ff2ffff 	.word	0x3ff2ffff
 800bd04:	40038000 	.word	0x40038000
 800bd08:	3ff80000 	.word	0x3ff80000
 800bd0c:	bff00000 	.word	0xbff00000
 800bd10:	0800cc70 	.word	0x0800cc70
 800bd14:	0800cc90 	.word	0x0800cc90

0800bd18 <fabs>:
 800bd18:	ec51 0b10 	vmov	r0, r1, d0
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bd22:	ec43 2b10 	vmov	d0, r2, r3
 800bd26:	4770      	bx	lr

0800bd28 <scalbn>:
 800bd28:	b570      	push	{r4, r5, r6, lr}
 800bd2a:	ec55 4b10 	vmov	r4, r5, d0
 800bd2e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800bd32:	4606      	mov	r6, r0
 800bd34:	462b      	mov	r3, r5
 800bd36:	b991      	cbnz	r1, 800bd5e <scalbn+0x36>
 800bd38:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800bd3c:	4323      	orrs	r3, r4
 800bd3e:	d03b      	beq.n	800bdb8 <scalbn+0x90>
 800bd40:	4b33      	ldr	r3, [pc, #204]	@ (800be10 <scalbn+0xe8>)
 800bd42:	4620      	mov	r0, r4
 800bd44:	4629      	mov	r1, r5
 800bd46:	2200      	movs	r2, #0
 800bd48:	f7f4 fc76 	bl	8000638 <__aeabi_dmul>
 800bd4c:	4b31      	ldr	r3, [pc, #196]	@ (800be14 <scalbn+0xec>)
 800bd4e:	429e      	cmp	r6, r3
 800bd50:	4604      	mov	r4, r0
 800bd52:	460d      	mov	r5, r1
 800bd54:	da0f      	bge.n	800bd76 <scalbn+0x4e>
 800bd56:	a326      	add	r3, pc, #152	@ (adr r3, 800bdf0 <scalbn+0xc8>)
 800bd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5c:	e01e      	b.n	800bd9c <scalbn+0x74>
 800bd5e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800bd62:	4291      	cmp	r1, r2
 800bd64:	d10b      	bne.n	800bd7e <scalbn+0x56>
 800bd66:	4622      	mov	r2, r4
 800bd68:	4620      	mov	r0, r4
 800bd6a:	4629      	mov	r1, r5
 800bd6c:	f7f4 faae 	bl	80002cc <__adddf3>
 800bd70:	4604      	mov	r4, r0
 800bd72:	460d      	mov	r5, r1
 800bd74:	e020      	b.n	800bdb8 <scalbn+0x90>
 800bd76:	460b      	mov	r3, r1
 800bd78:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bd7c:	3936      	subs	r1, #54	@ 0x36
 800bd7e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800bd82:	4296      	cmp	r6, r2
 800bd84:	dd0d      	ble.n	800bda2 <scalbn+0x7a>
 800bd86:	2d00      	cmp	r5, #0
 800bd88:	a11b      	add	r1, pc, #108	@ (adr r1, 800bdf8 <scalbn+0xd0>)
 800bd8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd8e:	da02      	bge.n	800bd96 <scalbn+0x6e>
 800bd90:	a11b      	add	r1, pc, #108	@ (adr r1, 800be00 <scalbn+0xd8>)
 800bd92:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd96:	a318      	add	r3, pc, #96	@ (adr r3, 800bdf8 <scalbn+0xd0>)
 800bd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9c:	f7f4 fc4c 	bl	8000638 <__aeabi_dmul>
 800bda0:	e7e6      	b.n	800bd70 <scalbn+0x48>
 800bda2:	1872      	adds	r2, r6, r1
 800bda4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800bda8:	428a      	cmp	r2, r1
 800bdaa:	dcec      	bgt.n	800bd86 <scalbn+0x5e>
 800bdac:	2a00      	cmp	r2, #0
 800bdae:	dd06      	ble.n	800bdbe <scalbn+0x96>
 800bdb0:	f36f 531e 	bfc	r3, #20, #11
 800bdb4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bdb8:	ec45 4b10 	vmov	d0, r4, r5
 800bdbc:	bd70      	pop	{r4, r5, r6, pc}
 800bdbe:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800bdc2:	da08      	bge.n	800bdd6 <scalbn+0xae>
 800bdc4:	2d00      	cmp	r5, #0
 800bdc6:	a10a      	add	r1, pc, #40	@ (adr r1, 800bdf0 <scalbn+0xc8>)
 800bdc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdcc:	dac3      	bge.n	800bd56 <scalbn+0x2e>
 800bdce:	a10e      	add	r1, pc, #56	@ (adr r1, 800be08 <scalbn+0xe0>)
 800bdd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdd4:	e7bf      	b.n	800bd56 <scalbn+0x2e>
 800bdd6:	3236      	adds	r2, #54	@ 0x36
 800bdd8:	f36f 531e 	bfc	r3, #20, #11
 800bddc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bde0:	4620      	mov	r0, r4
 800bde2:	4b0d      	ldr	r3, [pc, #52]	@ (800be18 <scalbn+0xf0>)
 800bde4:	4629      	mov	r1, r5
 800bde6:	2200      	movs	r2, #0
 800bde8:	e7d8      	b.n	800bd9c <scalbn+0x74>
 800bdea:	bf00      	nop
 800bdec:	f3af 8000 	nop.w
 800bdf0:	c2f8f359 	.word	0xc2f8f359
 800bdf4:	01a56e1f 	.word	0x01a56e1f
 800bdf8:	8800759c 	.word	0x8800759c
 800bdfc:	7e37e43c 	.word	0x7e37e43c
 800be00:	8800759c 	.word	0x8800759c
 800be04:	fe37e43c 	.word	0xfe37e43c
 800be08:	c2f8f359 	.word	0xc2f8f359
 800be0c:	81a56e1f 	.word	0x81a56e1f
 800be10:	43500000 	.word	0x43500000
 800be14:	ffff3cb0 	.word	0xffff3cb0
 800be18:	3c900000 	.word	0x3c900000

0800be1c <with_errno>:
 800be1c:	b510      	push	{r4, lr}
 800be1e:	ed2d 8b02 	vpush	{d8}
 800be22:	eeb0 8a40 	vmov.f32	s16, s0
 800be26:	eef0 8a60 	vmov.f32	s17, s1
 800be2a:	4604      	mov	r4, r0
 800be2c:	f7fd f97a 	bl	8009124 <__errno>
 800be30:	eeb0 0a48 	vmov.f32	s0, s16
 800be34:	eef0 0a68 	vmov.f32	s1, s17
 800be38:	ecbd 8b02 	vpop	{d8}
 800be3c:	6004      	str	r4, [r0, #0]
 800be3e:	bd10      	pop	{r4, pc}

0800be40 <xflow>:
 800be40:	4603      	mov	r3, r0
 800be42:	b507      	push	{r0, r1, r2, lr}
 800be44:	ec51 0b10 	vmov	r0, r1, d0
 800be48:	b183      	cbz	r3, 800be6c <xflow+0x2c>
 800be4a:	4602      	mov	r2, r0
 800be4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800be50:	e9cd 2300 	strd	r2, r3, [sp]
 800be54:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be58:	f7f4 fbee 	bl	8000638 <__aeabi_dmul>
 800be5c:	ec41 0b10 	vmov	d0, r0, r1
 800be60:	2022      	movs	r0, #34	@ 0x22
 800be62:	b003      	add	sp, #12
 800be64:	f85d eb04 	ldr.w	lr, [sp], #4
 800be68:	f7ff bfd8 	b.w	800be1c <with_errno>
 800be6c:	4602      	mov	r2, r0
 800be6e:	460b      	mov	r3, r1
 800be70:	e7ee      	b.n	800be50 <xflow+0x10>
 800be72:	0000      	movs	r0, r0
 800be74:	0000      	movs	r0, r0
	...

0800be78 <__math_uflow>:
 800be78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800be80 <__math_uflow+0x8>
 800be7c:	f7ff bfe0 	b.w	800be40 <xflow>
 800be80:	00000000 	.word	0x00000000
 800be84:	10000000 	.word	0x10000000

0800be88 <__math_oflow>:
 800be88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800be90 <__math_oflow+0x8>
 800be8c:	f7ff bfd8 	b.w	800be40 <xflow>
 800be90:	00000000 	.word	0x00000000
 800be94:	70000000 	.word	0x70000000

0800be98 <__kernel_rem_pio2>:
 800be98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be9c:	ed2d 8b02 	vpush	{d8}
 800bea0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800bea4:	f112 0f14 	cmn.w	r2, #20
 800bea8:	9306      	str	r3, [sp, #24]
 800beaa:	9104      	str	r1, [sp, #16]
 800beac:	4bc2      	ldr	r3, [pc, #776]	@ (800c1b8 <__kernel_rem_pio2+0x320>)
 800beae:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800beb0:	9008      	str	r0, [sp, #32]
 800beb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800beb6:	9300      	str	r3, [sp, #0]
 800beb8:	9b06      	ldr	r3, [sp, #24]
 800beba:	f103 33ff 	add.w	r3, r3, #4294967295
 800bebe:	bfa8      	it	ge
 800bec0:	1ed4      	subge	r4, r2, #3
 800bec2:	9305      	str	r3, [sp, #20]
 800bec4:	bfb2      	itee	lt
 800bec6:	2400      	movlt	r4, #0
 800bec8:	2318      	movge	r3, #24
 800beca:	fb94 f4f3 	sdivge	r4, r4, r3
 800bece:	f06f 0317 	mvn.w	r3, #23
 800bed2:	fb04 3303 	mla	r3, r4, r3, r3
 800bed6:	eb03 0b02 	add.w	fp, r3, r2
 800beda:	9b00      	ldr	r3, [sp, #0]
 800bedc:	9a05      	ldr	r2, [sp, #20]
 800bede:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800c1a8 <__kernel_rem_pio2+0x310>
 800bee2:	eb03 0802 	add.w	r8, r3, r2
 800bee6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800bee8:	1aa7      	subs	r7, r4, r2
 800beea:	ae20      	add	r6, sp, #128	@ 0x80
 800beec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bef0:	2500      	movs	r5, #0
 800bef2:	4545      	cmp	r5, r8
 800bef4:	dd12      	ble.n	800bf1c <__kernel_rem_pio2+0x84>
 800bef6:	9b06      	ldr	r3, [sp, #24]
 800bef8:	aa20      	add	r2, sp, #128	@ 0x80
 800befa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800befe:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800bf02:	2700      	movs	r7, #0
 800bf04:	9b00      	ldr	r3, [sp, #0]
 800bf06:	429f      	cmp	r7, r3
 800bf08:	dc2e      	bgt.n	800bf68 <__kernel_rem_pio2+0xd0>
 800bf0a:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800c1a8 <__kernel_rem_pio2+0x310>
 800bf0e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf12:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bf16:	46a8      	mov	r8, r5
 800bf18:	2600      	movs	r6, #0
 800bf1a:	e01b      	b.n	800bf54 <__kernel_rem_pio2+0xbc>
 800bf1c:	42ef      	cmn	r7, r5
 800bf1e:	d407      	bmi.n	800bf30 <__kernel_rem_pio2+0x98>
 800bf20:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bf24:	f7f4 fb1e 	bl	8000564 <__aeabi_i2d>
 800bf28:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bf2c:	3501      	adds	r5, #1
 800bf2e:	e7e0      	b.n	800bef2 <__kernel_rem_pio2+0x5a>
 800bf30:	ec51 0b18 	vmov	r0, r1, d8
 800bf34:	e7f8      	b.n	800bf28 <__kernel_rem_pio2+0x90>
 800bf36:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800bf3a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bf3e:	f7f4 fb7b 	bl	8000638 <__aeabi_dmul>
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf4a:	f7f4 f9bf 	bl	80002cc <__adddf3>
 800bf4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf52:	3601      	adds	r6, #1
 800bf54:	9b05      	ldr	r3, [sp, #20]
 800bf56:	429e      	cmp	r6, r3
 800bf58:	dded      	ble.n	800bf36 <__kernel_rem_pio2+0x9e>
 800bf5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf5e:	3701      	adds	r7, #1
 800bf60:	ecaa 7b02 	vstmia	sl!, {d7}
 800bf64:	3508      	adds	r5, #8
 800bf66:	e7cd      	b.n	800bf04 <__kernel_rem_pio2+0x6c>
 800bf68:	9b00      	ldr	r3, [sp, #0]
 800bf6a:	f8dd 8000 	ldr.w	r8, [sp]
 800bf6e:	aa0c      	add	r2, sp, #48	@ 0x30
 800bf70:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bf74:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf76:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800bf78:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bf7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf7e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800bf82:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf84:	ab98      	add	r3, sp, #608	@ 0x260
 800bf86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bf8a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800bf8e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bf92:	ac0c      	add	r4, sp, #48	@ 0x30
 800bf94:	ab70      	add	r3, sp, #448	@ 0x1c0
 800bf96:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800bf9a:	46a1      	mov	r9, r4
 800bf9c:	46c2      	mov	sl, r8
 800bf9e:	f1ba 0f00 	cmp.w	sl, #0
 800bfa2:	dc77      	bgt.n	800c094 <__kernel_rem_pio2+0x1fc>
 800bfa4:	4658      	mov	r0, fp
 800bfa6:	ed9d 0b02 	vldr	d0, [sp, #8]
 800bfaa:	f7ff febd 	bl	800bd28 <scalbn>
 800bfae:	ec57 6b10 	vmov	r6, r7, d0
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800bfb8:	4630      	mov	r0, r6
 800bfba:	4639      	mov	r1, r7
 800bfbc:	f7f4 fb3c 	bl	8000638 <__aeabi_dmul>
 800bfc0:	ec41 0b10 	vmov	d0, r0, r1
 800bfc4:	f000 fab8 	bl	800c538 <floor>
 800bfc8:	4b7c      	ldr	r3, [pc, #496]	@ (800c1bc <__kernel_rem_pio2+0x324>)
 800bfca:	ec51 0b10 	vmov	r0, r1, d0
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f7f4 fb32 	bl	8000638 <__aeabi_dmul>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	460b      	mov	r3, r1
 800bfd8:	4630      	mov	r0, r6
 800bfda:	4639      	mov	r1, r7
 800bfdc:	f7f4 f974 	bl	80002c8 <__aeabi_dsub>
 800bfe0:	460f      	mov	r7, r1
 800bfe2:	4606      	mov	r6, r0
 800bfe4:	f7f4 fdd8 	bl	8000b98 <__aeabi_d2iz>
 800bfe8:	9002      	str	r0, [sp, #8]
 800bfea:	f7f4 fabb 	bl	8000564 <__aeabi_i2d>
 800bfee:	4602      	mov	r2, r0
 800bff0:	460b      	mov	r3, r1
 800bff2:	4630      	mov	r0, r6
 800bff4:	4639      	mov	r1, r7
 800bff6:	f7f4 f967 	bl	80002c8 <__aeabi_dsub>
 800bffa:	f1bb 0f00 	cmp.w	fp, #0
 800bffe:	4606      	mov	r6, r0
 800c000:	460f      	mov	r7, r1
 800c002:	dd6c      	ble.n	800c0de <__kernel_rem_pio2+0x246>
 800c004:	f108 31ff 	add.w	r1, r8, #4294967295
 800c008:	ab0c      	add	r3, sp, #48	@ 0x30
 800c00a:	9d02      	ldr	r5, [sp, #8]
 800c00c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c010:	f1cb 0018 	rsb	r0, fp, #24
 800c014:	fa43 f200 	asr.w	r2, r3, r0
 800c018:	4415      	add	r5, r2
 800c01a:	4082      	lsls	r2, r0
 800c01c:	1a9b      	subs	r3, r3, r2
 800c01e:	aa0c      	add	r2, sp, #48	@ 0x30
 800c020:	9502      	str	r5, [sp, #8]
 800c022:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c026:	f1cb 0217 	rsb	r2, fp, #23
 800c02a:	fa43 f902 	asr.w	r9, r3, r2
 800c02e:	f1b9 0f00 	cmp.w	r9, #0
 800c032:	dd64      	ble.n	800c0fe <__kernel_rem_pio2+0x266>
 800c034:	9b02      	ldr	r3, [sp, #8]
 800c036:	2200      	movs	r2, #0
 800c038:	3301      	adds	r3, #1
 800c03a:	9302      	str	r3, [sp, #8]
 800c03c:	4615      	mov	r5, r2
 800c03e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800c042:	4590      	cmp	r8, r2
 800c044:	f300 80a1 	bgt.w	800c18a <__kernel_rem_pio2+0x2f2>
 800c048:	f1bb 0f00 	cmp.w	fp, #0
 800c04c:	dd07      	ble.n	800c05e <__kernel_rem_pio2+0x1c6>
 800c04e:	f1bb 0f01 	cmp.w	fp, #1
 800c052:	f000 80c1 	beq.w	800c1d8 <__kernel_rem_pio2+0x340>
 800c056:	f1bb 0f02 	cmp.w	fp, #2
 800c05a:	f000 80c8 	beq.w	800c1ee <__kernel_rem_pio2+0x356>
 800c05e:	f1b9 0f02 	cmp.w	r9, #2
 800c062:	d14c      	bne.n	800c0fe <__kernel_rem_pio2+0x266>
 800c064:	4632      	mov	r2, r6
 800c066:	463b      	mov	r3, r7
 800c068:	4955      	ldr	r1, [pc, #340]	@ (800c1c0 <__kernel_rem_pio2+0x328>)
 800c06a:	2000      	movs	r0, #0
 800c06c:	f7f4 f92c 	bl	80002c8 <__aeabi_dsub>
 800c070:	4606      	mov	r6, r0
 800c072:	460f      	mov	r7, r1
 800c074:	2d00      	cmp	r5, #0
 800c076:	d042      	beq.n	800c0fe <__kernel_rem_pio2+0x266>
 800c078:	4658      	mov	r0, fp
 800c07a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800c1b0 <__kernel_rem_pio2+0x318>
 800c07e:	f7ff fe53 	bl	800bd28 <scalbn>
 800c082:	4630      	mov	r0, r6
 800c084:	4639      	mov	r1, r7
 800c086:	ec53 2b10 	vmov	r2, r3, d0
 800c08a:	f7f4 f91d 	bl	80002c8 <__aeabi_dsub>
 800c08e:	4606      	mov	r6, r0
 800c090:	460f      	mov	r7, r1
 800c092:	e034      	b.n	800c0fe <__kernel_rem_pio2+0x266>
 800c094:	4b4b      	ldr	r3, [pc, #300]	@ (800c1c4 <__kernel_rem_pio2+0x32c>)
 800c096:	2200      	movs	r2, #0
 800c098:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c09c:	f7f4 facc 	bl	8000638 <__aeabi_dmul>
 800c0a0:	f7f4 fd7a 	bl	8000b98 <__aeabi_d2iz>
 800c0a4:	f7f4 fa5e 	bl	8000564 <__aeabi_i2d>
 800c0a8:	4b47      	ldr	r3, [pc, #284]	@ (800c1c8 <__kernel_rem_pio2+0x330>)
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	4606      	mov	r6, r0
 800c0ae:	460f      	mov	r7, r1
 800c0b0:	f7f4 fac2 	bl	8000638 <__aeabi_dmul>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0bc:	f7f4 f904 	bl	80002c8 <__aeabi_dsub>
 800c0c0:	f7f4 fd6a 	bl	8000b98 <__aeabi_d2iz>
 800c0c4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c0c8:	f849 0b04 	str.w	r0, [r9], #4
 800c0cc:	4639      	mov	r1, r7
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	f7f4 f8fc 	bl	80002cc <__adddf3>
 800c0d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0dc:	e75f      	b.n	800bf9e <__kernel_rem_pio2+0x106>
 800c0de:	d107      	bne.n	800c0f0 <__kernel_rem_pio2+0x258>
 800c0e0:	f108 33ff 	add.w	r3, r8, #4294967295
 800c0e4:	aa0c      	add	r2, sp, #48	@ 0x30
 800c0e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0ea:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800c0ee:	e79e      	b.n	800c02e <__kernel_rem_pio2+0x196>
 800c0f0:	4b36      	ldr	r3, [pc, #216]	@ (800c1cc <__kernel_rem_pio2+0x334>)
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	f7f4 fd26 	bl	8000b44 <__aeabi_dcmpge>
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	d143      	bne.n	800c184 <__kernel_rem_pio2+0x2ec>
 800c0fc:	4681      	mov	r9, r0
 800c0fe:	2200      	movs	r2, #0
 800c100:	2300      	movs	r3, #0
 800c102:	4630      	mov	r0, r6
 800c104:	4639      	mov	r1, r7
 800c106:	f7f4 fcff 	bl	8000b08 <__aeabi_dcmpeq>
 800c10a:	2800      	cmp	r0, #0
 800c10c:	f000 80c1 	beq.w	800c292 <__kernel_rem_pio2+0x3fa>
 800c110:	f108 33ff 	add.w	r3, r8, #4294967295
 800c114:	2200      	movs	r2, #0
 800c116:	9900      	ldr	r1, [sp, #0]
 800c118:	428b      	cmp	r3, r1
 800c11a:	da70      	bge.n	800c1fe <__kernel_rem_pio2+0x366>
 800c11c:	2a00      	cmp	r2, #0
 800c11e:	f000 808b 	beq.w	800c238 <__kernel_rem_pio2+0x3a0>
 800c122:	f108 38ff 	add.w	r8, r8, #4294967295
 800c126:	ab0c      	add	r3, sp, #48	@ 0x30
 800c128:	f1ab 0b18 	sub.w	fp, fp, #24
 800c12c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d0f6      	beq.n	800c122 <__kernel_rem_pio2+0x28a>
 800c134:	4658      	mov	r0, fp
 800c136:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800c1b0 <__kernel_rem_pio2+0x318>
 800c13a:	f7ff fdf5 	bl	800bd28 <scalbn>
 800c13e:	f108 0301 	add.w	r3, r8, #1
 800c142:	00da      	lsls	r2, r3, #3
 800c144:	9205      	str	r2, [sp, #20]
 800c146:	ec55 4b10 	vmov	r4, r5, d0
 800c14a:	aa70      	add	r2, sp, #448	@ 0x1c0
 800c14c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800c1c4 <__kernel_rem_pio2+0x32c>
 800c150:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800c154:	4646      	mov	r6, r8
 800c156:	f04f 0a00 	mov.w	sl, #0
 800c15a:	2e00      	cmp	r6, #0
 800c15c:	f280 80d1 	bge.w	800c302 <__kernel_rem_pio2+0x46a>
 800c160:	4644      	mov	r4, r8
 800c162:	2c00      	cmp	r4, #0
 800c164:	f2c0 80ff 	blt.w	800c366 <__kernel_rem_pio2+0x4ce>
 800c168:	4b19      	ldr	r3, [pc, #100]	@ (800c1d0 <__kernel_rem_pio2+0x338>)
 800c16a:	461f      	mov	r7, r3
 800c16c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c16e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c172:	9306      	str	r3, [sp, #24]
 800c174:	f04f 0a00 	mov.w	sl, #0
 800c178:	f04f 0b00 	mov.w	fp, #0
 800c17c:	2600      	movs	r6, #0
 800c17e:	eba8 0504 	sub.w	r5, r8, r4
 800c182:	e0e4      	b.n	800c34e <__kernel_rem_pio2+0x4b6>
 800c184:	f04f 0902 	mov.w	r9, #2
 800c188:	e754      	b.n	800c034 <__kernel_rem_pio2+0x19c>
 800c18a:	f854 3b04 	ldr.w	r3, [r4], #4
 800c18e:	bb0d      	cbnz	r5, 800c1d4 <__kernel_rem_pio2+0x33c>
 800c190:	b123      	cbz	r3, 800c19c <__kernel_rem_pio2+0x304>
 800c192:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800c196:	f844 3c04 	str.w	r3, [r4, #-4]
 800c19a:	2301      	movs	r3, #1
 800c19c:	3201      	adds	r2, #1
 800c19e:	461d      	mov	r5, r3
 800c1a0:	e74f      	b.n	800c042 <__kernel_rem_pio2+0x1aa>
 800c1a2:	bf00      	nop
 800c1a4:	f3af 8000 	nop.w
	...
 800c1b4:	3ff00000 	.word	0x3ff00000
 800c1b8:	0800ccf0 	.word	0x0800ccf0
 800c1bc:	40200000 	.word	0x40200000
 800c1c0:	3ff00000 	.word	0x3ff00000
 800c1c4:	3e700000 	.word	0x3e700000
 800c1c8:	41700000 	.word	0x41700000
 800c1cc:	3fe00000 	.word	0x3fe00000
 800c1d0:	0800ccb0 	.word	0x0800ccb0
 800c1d4:	1acb      	subs	r3, r1, r3
 800c1d6:	e7de      	b.n	800c196 <__kernel_rem_pio2+0x2fe>
 800c1d8:	f108 32ff 	add.w	r2, r8, #4294967295
 800c1dc:	ab0c      	add	r3, sp, #48	@ 0x30
 800c1de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1e2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c1e6:	a90c      	add	r1, sp, #48	@ 0x30
 800c1e8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c1ec:	e737      	b.n	800c05e <__kernel_rem_pio2+0x1c6>
 800c1ee:	f108 32ff 	add.w	r2, r8, #4294967295
 800c1f2:	ab0c      	add	r3, sp, #48	@ 0x30
 800c1f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c1fc:	e7f3      	b.n	800c1e6 <__kernel_rem_pio2+0x34e>
 800c1fe:	a90c      	add	r1, sp, #48	@ 0x30
 800c200:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c204:	3b01      	subs	r3, #1
 800c206:	430a      	orrs	r2, r1
 800c208:	e785      	b.n	800c116 <__kernel_rem_pio2+0x27e>
 800c20a:	3401      	adds	r4, #1
 800c20c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c210:	2a00      	cmp	r2, #0
 800c212:	d0fa      	beq.n	800c20a <__kernel_rem_pio2+0x372>
 800c214:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c216:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c21a:	eb0d 0503 	add.w	r5, sp, r3
 800c21e:	9b06      	ldr	r3, [sp, #24]
 800c220:	aa20      	add	r2, sp, #128	@ 0x80
 800c222:	4443      	add	r3, r8
 800c224:	f108 0701 	add.w	r7, r8, #1
 800c228:	3d98      	subs	r5, #152	@ 0x98
 800c22a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800c22e:	4444      	add	r4, r8
 800c230:	42bc      	cmp	r4, r7
 800c232:	da04      	bge.n	800c23e <__kernel_rem_pio2+0x3a6>
 800c234:	46a0      	mov	r8, r4
 800c236:	e6a2      	b.n	800bf7e <__kernel_rem_pio2+0xe6>
 800c238:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c23a:	2401      	movs	r4, #1
 800c23c:	e7e6      	b.n	800c20c <__kernel_rem_pio2+0x374>
 800c23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c240:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800c244:	f7f4 f98e 	bl	8000564 <__aeabi_i2d>
 800c248:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800c508 <__kernel_rem_pio2+0x670>
 800c24c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c250:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c254:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c258:	46b2      	mov	sl, r6
 800c25a:	f04f 0800 	mov.w	r8, #0
 800c25e:	9b05      	ldr	r3, [sp, #20]
 800c260:	4598      	cmp	r8, r3
 800c262:	dd05      	ble.n	800c270 <__kernel_rem_pio2+0x3d8>
 800c264:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c268:	3701      	adds	r7, #1
 800c26a:	eca5 7b02 	vstmia	r5!, {d7}
 800c26e:	e7df      	b.n	800c230 <__kernel_rem_pio2+0x398>
 800c270:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800c274:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c278:	f7f4 f9de 	bl	8000638 <__aeabi_dmul>
 800c27c:	4602      	mov	r2, r0
 800c27e:	460b      	mov	r3, r1
 800c280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c284:	f7f4 f822 	bl	80002cc <__adddf3>
 800c288:	f108 0801 	add.w	r8, r8, #1
 800c28c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c290:	e7e5      	b.n	800c25e <__kernel_rem_pio2+0x3c6>
 800c292:	f1cb 0000 	rsb	r0, fp, #0
 800c296:	ec47 6b10 	vmov	d0, r6, r7
 800c29a:	f7ff fd45 	bl	800bd28 <scalbn>
 800c29e:	ec55 4b10 	vmov	r4, r5, d0
 800c2a2:	4b9b      	ldr	r3, [pc, #620]	@ (800c510 <__kernel_rem_pio2+0x678>)
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	4629      	mov	r1, r5
 800c2aa:	f7f4 fc4b 	bl	8000b44 <__aeabi_dcmpge>
 800c2ae:	b300      	cbz	r0, 800c2f2 <__kernel_rem_pio2+0x45a>
 800c2b0:	4b98      	ldr	r3, [pc, #608]	@ (800c514 <__kernel_rem_pio2+0x67c>)
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	4629      	mov	r1, r5
 800c2b8:	f7f4 f9be 	bl	8000638 <__aeabi_dmul>
 800c2bc:	f7f4 fc6c 	bl	8000b98 <__aeabi_d2iz>
 800c2c0:	4606      	mov	r6, r0
 800c2c2:	f7f4 f94f 	bl	8000564 <__aeabi_i2d>
 800c2c6:	4b92      	ldr	r3, [pc, #584]	@ (800c510 <__kernel_rem_pio2+0x678>)
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	f7f4 f9b5 	bl	8000638 <__aeabi_dmul>
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	4629      	mov	r1, r5
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	f7f3 fff7 	bl	80002c8 <__aeabi_dsub>
 800c2da:	f7f4 fc5d 	bl	8000b98 <__aeabi_d2iz>
 800c2de:	ab0c      	add	r3, sp, #48	@ 0x30
 800c2e0:	f10b 0b18 	add.w	fp, fp, #24
 800c2e4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c2e8:	f108 0801 	add.w	r8, r8, #1
 800c2ec:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800c2f0:	e720      	b.n	800c134 <__kernel_rem_pio2+0x29c>
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	4629      	mov	r1, r5
 800c2f6:	f7f4 fc4f 	bl	8000b98 <__aeabi_d2iz>
 800c2fa:	ab0c      	add	r3, sp, #48	@ 0x30
 800c2fc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c300:	e718      	b.n	800c134 <__kernel_rem_pio2+0x29c>
 800c302:	ab0c      	add	r3, sp, #48	@ 0x30
 800c304:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c308:	f7f4 f92c 	bl	8000564 <__aeabi_i2d>
 800c30c:	4622      	mov	r2, r4
 800c30e:	462b      	mov	r3, r5
 800c310:	f7f4 f992 	bl	8000638 <__aeabi_dmul>
 800c314:	4652      	mov	r2, sl
 800c316:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800c31a:	465b      	mov	r3, fp
 800c31c:	4620      	mov	r0, r4
 800c31e:	4629      	mov	r1, r5
 800c320:	f7f4 f98a 	bl	8000638 <__aeabi_dmul>
 800c324:	3e01      	subs	r6, #1
 800c326:	4604      	mov	r4, r0
 800c328:	460d      	mov	r5, r1
 800c32a:	e716      	b.n	800c15a <__kernel_rem_pio2+0x2c2>
 800c32c:	9906      	ldr	r1, [sp, #24]
 800c32e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800c332:	9106      	str	r1, [sp, #24]
 800c334:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800c338:	f7f4 f97e 	bl	8000638 <__aeabi_dmul>
 800c33c:	4602      	mov	r2, r0
 800c33e:	460b      	mov	r3, r1
 800c340:	4650      	mov	r0, sl
 800c342:	4659      	mov	r1, fp
 800c344:	f7f3 ffc2 	bl	80002cc <__adddf3>
 800c348:	3601      	adds	r6, #1
 800c34a:	4682      	mov	sl, r0
 800c34c:	468b      	mov	fp, r1
 800c34e:	9b00      	ldr	r3, [sp, #0]
 800c350:	429e      	cmp	r6, r3
 800c352:	dc01      	bgt.n	800c358 <__kernel_rem_pio2+0x4c0>
 800c354:	42ae      	cmp	r6, r5
 800c356:	dde9      	ble.n	800c32c <__kernel_rem_pio2+0x494>
 800c358:	ab48      	add	r3, sp, #288	@ 0x120
 800c35a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c35e:	e9c5 ab00 	strd	sl, fp, [r5]
 800c362:	3c01      	subs	r4, #1
 800c364:	e6fd      	b.n	800c162 <__kernel_rem_pio2+0x2ca>
 800c366:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c368:	2b02      	cmp	r3, #2
 800c36a:	dc0b      	bgt.n	800c384 <__kernel_rem_pio2+0x4ec>
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	dc35      	bgt.n	800c3dc <__kernel_rem_pio2+0x544>
 800c370:	d059      	beq.n	800c426 <__kernel_rem_pio2+0x58e>
 800c372:	9b02      	ldr	r3, [sp, #8]
 800c374:	f003 0007 	and.w	r0, r3, #7
 800c378:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800c37c:	ecbd 8b02 	vpop	{d8}
 800c380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c384:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c386:	2b03      	cmp	r3, #3
 800c388:	d1f3      	bne.n	800c372 <__kernel_rem_pio2+0x4da>
 800c38a:	9b05      	ldr	r3, [sp, #20]
 800c38c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c390:	eb0d 0403 	add.w	r4, sp, r3
 800c394:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800c398:	4625      	mov	r5, r4
 800c39a:	46c2      	mov	sl, r8
 800c39c:	f1ba 0f00 	cmp.w	sl, #0
 800c3a0:	dc69      	bgt.n	800c476 <__kernel_rem_pio2+0x5de>
 800c3a2:	4645      	mov	r5, r8
 800c3a4:	2d01      	cmp	r5, #1
 800c3a6:	f300 8087 	bgt.w	800c4b8 <__kernel_rem_pio2+0x620>
 800c3aa:	9c05      	ldr	r4, [sp, #20]
 800c3ac:	ab48      	add	r3, sp, #288	@ 0x120
 800c3ae:	441c      	add	r4, r3
 800c3b0:	2000      	movs	r0, #0
 800c3b2:	2100      	movs	r1, #0
 800c3b4:	f1b8 0f01 	cmp.w	r8, #1
 800c3b8:	f300 809c 	bgt.w	800c4f4 <__kernel_rem_pio2+0x65c>
 800c3bc:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800c3c0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800c3c4:	f1b9 0f00 	cmp.w	r9, #0
 800c3c8:	f040 80a6 	bne.w	800c518 <__kernel_rem_pio2+0x680>
 800c3cc:	9b04      	ldr	r3, [sp, #16]
 800c3ce:	e9c3 5600 	strd	r5, r6, [r3]
 800c3d2:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c3d6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c3da:	e7ca      	b.n	800c372 <__kernel_rem_pio2+0x4da>
 800c3dc:	9d05      	ldr	r5, [sp, #20]
 800c3de:	ab48      	add	r3, sp, #288	@ 0x120
 800c3e0:	441d      	add	r5, r3
 800c3e2:	4644      	mov	r4, r8
 800c3e4:	2000      	movs	r0, #0
 800c3e6:	2100      	movs	r1, #0
 800c3e8:	2c00      	cmp	r4, #0
 800c3ea:	da35      	bge.n	800c458 <__kernel_rem_pio2+0x5c0>
 800c3ec:	f1b9 0f00 	cmp.w	r9, #0
 800c3f0:	d038      	beq.n	800c464 <__kernel_rem_pio2+0x5cc>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c3f8:	9c04      	ldr	r4, [sp, #16]
 800c3fa:	e9c4 2300 	strd	r2, r3, [r4]
 800c3fe:	4602      	mov	r2, r0
 800c400:	460b      	mov	r3, r1
 800c402:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800c406:	f7f3 ff5f 	bl	80002c8 <__aeabi_dsub>
 800c40a:	ad4a      	add	r5, sp, #296	@ 0x128
 800c40c:	2401      	movs	r4, #1
 800c40e:	45a0      	cmp	r8, r4
 800c410:	da2b      	bge.n	800c46a <__kernel_rem_pio2+0x5d2>
 800c412:	f1b9 0f00 	cmp.w	r9, #0
 800c416:	d002      	beq.n	800c41e <__kernel_rem_pio2+0x586>
 800c418:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c41c:	4619      	mov	r1, r3
 800c41e:	9b04      	ldr	r3, [sp, #16]
 800c420:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c424:	e7a5      	b.n	800c372 <__kernel_rem_pio2+0x4da>
 800c426:	9c05      	ldr	r4, [sp, #20]
 800c428:	ab48      	add	r3, sp, #288	@ 0x120
 800c42a:	441c      	add	r4, r3
 800c42c:	2000      	movs	r0, #0
 800c42e:	2100      	movs	r1, #0
 800c430:	f1b8 0f00 	cmp.w	r8, #0
 800c434:	da09      	bge.n	800c44a <__kernel_rem_pio2+0x5b2>
 800c436:	f1b9 0f00 	cmp.w	r9, #0
 800c43a:	d002      	beq.n	800c442 <__kernel_rem_pio2+0x5aa>
 800c43c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c440:	4619      	mov	r1, r3
 800c442:	9b04      	ldr	r3, [sp, #16]
 800c444:	e9c3 0100 	strd	r0, r1, [r3]
 800c448:	e793      	b.n	800c372 <__kernel_rem_pio2+0x4da>
 800c44a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c44e:	f7f3 ff3d 	bl	80002cc <__adddf3>
 800c452:	f108 38ff 	add.w	r8, r8, #4294967295
 800c456:	e7eb      	b.n	800c430 <__kernel_rem_pio2+0x598>
 800c458:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c45c:	f7f3 ff36 	bl	80002cc <__adddf3>
 800c460:	3c01      	subs	r4, #1
 800c462:	e7c1      	b.n	800c3e8 <__kernel_rem_pio2+0x550>
 800c464:	4602      	mov	r2, r0
 800c466:	460b      	mov	r3, r1
 800c468:	e7c6      	b.n	800c3f8 <__kernel_rem_pio2+0x560>
 800c46a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c46e:	f7f3 ff2d 	bl	80002cc <__adddf3>
 800c472:	3401      	adds	r4, #1
 800c474:	e7cb      	b.n	800c40e <__kernel_rem_pio2+0x576>
 800c476:	ed35 7b02 	vldmdb	r5!, {d7}
 800c47a:	ed8d 7b00 	vstr	d7, [sp]
 800c47e:	ed95 7b02 	vldr	d7, [r5, #8]
 800c482:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c486:	ec53 2b17 	vmov	r2, r3, d7
 800c48a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c48e:	f7f3 ff1d 	bl	80002cc <__adddf3>
 800c492:	4602      	mov	r2, r0
 800c494:	460b      	mov	r3, r1
 800c496:	4606      	mov	r6, r0
 800c498:	460f      	mov	r7, r1
 800c49a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c49e:	f7f3 ff13 	bl	80002c8 <__aeabi_dsub>
 800c4a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c4a6:	f7f3 ff11 	bl	80002cc <__adddf3>
 800c4aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c4ae:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c4b2:	e9c5 6700 	strd	r6, r7, [r5]
 800c4b6:	e771      	b.n	800c39c <__kernel_rem_pio2+0x504>
 800c4b8:	ed34 7b02 	vldmdb	r4!, {d7}
 800c4bc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800c4c0:	ec51 0b17 	vmov	r0, r1, d7
 800c4c4:	4652      	mov	r2, sl
 800c4c6:	465b      	mov	r3, fp
 800c4c8:	ed8d 7b00 	vstr	d7, [sp]
 800c4cc:	f7f3 fefe 	bl	80002cc <__adddf3>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	4606      	mov	r6, r0
 800c4d6:	460f      	mov	r7, r1
 800c4d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4dc:	f7f3 fef4 	bl	80002c8 <__aeabi_dsub>
 800c4e0:	4652      	mov	r2, sl
 800c4e2:	465b      	mov	r3, fp
 800c4e4:	f7f3 fef2 	bl	80002cc <__adddf3>
 800c4e8:	3d01      	subs	r5, #1
 800c4ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c4ee:	e9c4 6700 	strd	r6, r7, [r4]
 800c4f2:	e757      	b.n	800c3a4 <__kernel_rem_pio2+0x50c>
 800c4f4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c4f8:	f7f3 fee8 	bl	80002cc <__adddf3>
 800c4fc:	f108 38ff 	add.w	r8, r8, #4294967295
 800c500:	e758      	b.n	800c3b4 <__kernel_rem_pio2+0x51c>
 800c502:	bf00      	nop
 800c504:	f3af 8000 	nop.w
	...
 800c510:	41700000 	.word	0x41700000
 800c514:	3e700000 	.word	0x3e700000
 800c518:	9b04      	ldr	r3, [sp, #16]
 800c51a:	9a04      	ldr	r2, [sp, #16]
 800c51c:	601d      	str	r5, [r3, #0]
 800c51e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800c522:	605c      	str	r4, [r3, #4]
 800c524:	609f      	str	r7, [r3, #8]
 800c526:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800c52a:	60d3      	str	r3, [r2, #12]
 800c52c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c530:	6110      	str	r0, [r2, #16]
 800c532:	6153      	str	r3, [r2, #20]
 800c534:	e71d      	b.n	800c372 <__kernel_rem_pio2+0x4da>
 800c536:	bf00      	nop

0800c538 <floor>:
 800c538:	ec51 0b10 	vmov	r0, r1, d0
 800c53c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c544:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800c548:	2e13      	cmp	r6, #19
 800c54a:	460c      	mov	r4, r1
 800c54c:	4605      	mov	r5, r0
 800c54e:	4680      	mov	r8, r0
 800c550:	dc34      	bgt.n	800c5bc <floor+0x84>
 800c552:	2e00      	cmp	r6, #0
 800c554:	da17      	bge.n	800c586 <floor+0x4e>
 800c556:	a332      	add	r3, pc, #200	@ (adr r3, 800c620 <floor+0xe8>)
 800c558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55c:	f7f3 feb6 	bl	80002cc <__adddf3>
 800c560:	2200      	movs	r2, #0
 800c562:	2300      	movs	r3, #0
 800c564:	f7f4 faf8 	bl	8000b58 <__aeabi_dcmpgt>
 800c568:	b150      	cbz	r0, 800c580 <floor+0x48>
 800c56a:	2c00      	cmp	r4, #0
 800c56c:	da55      	bge.n	800c61a <floor+0xe2>
 800c56e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c572:	432c      	orrs	r4, r5
 800c574:	2500      	movs	r5, #0
 800c576:	42ac      	cmp	r4, r5
 800c578:	4c2b      	ldr	r4, [pc, #172]	@ (800c628 <floor+0xf0>)
 800c57a:	bf08      	it	eq
 800c57c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c580:	4621      	mov	r1, r4
 800c582:	4628      	mov	r0, r5
 800c584:	e023      	b.n	800c5ce <floor+0x96>
 800c586:	4f29      	ldr	r7, [pc, #164]	@ (800c62c <floor+0xf4>)
 800c588:	4137      	asrs	r7, r6
 800c58a:	ea01 0307 	and.w	r3, r1, r7
 800c58e:	4303      	orrs	r3, r0
 800c590:	d01d      	beq.n	800c5ce <floor+0x96>
 800c592:	a323      	add	r3, pc, #140	@ (adr r3, 800c620 <floor+0xe8>)
 800c594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c598:	f7f3 fe98 	bl	80002cc <__adddf3>
 800c59c:	2200      	movs	r2, #0
 800c59e:	2300      	movs	r3, #0
 800c5a0:	f7f4 fada 	bl	8000b58 <__aeabi_dcmpgt>
 800c5a4:	2800      	cmp	r0, #0
 800c5a6:	d0eb      	beq.n	800c580 <floor+0x48>
 800c5a8:	2c00      	cmp	r4, #0
 800c5aa:	bfbe      	ittt	lt
 800c5ac:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c5b0:	4133      	asrlt	r3, r6
 800c5b2:	18e4      	addlt	r4, r4, r3
 800c5b4:	ea24 0407 	bic.w	r4, r4, r7
 800c5b8:	2500      	movs	r5, #0
 800c5ba:	e7e1      	b.n	800c580 <floor+0x48>
 800c5bc:	2e33      	cmp	r6, #51	@ 0x33
 800c5be:	dd0a      	ble.n	800c5d6 <floor+0x9e>
 800c5c0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c5c4:	d103      	bne.n	800c5ce <floor+0x96>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	460b      	mov	r3, r1
 800c5ca:	f7f3 fe7f 	bl	80002cc <__adddf3>
 800c5ce:	ec41 0b10 	vmov	d0, r0, r1
 800c5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5d6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c5da:	f04f 37ff 	mov.w	r7, #4294967295
 800c5de:	40df      	lsrs	r7, r3
 800c5e0:	4207      	tst	r7, r0
 800c5e2:	d0f4      	beq.n	800c5ce <floor+0x96>
 800c5e4:	a30e      	add	r3, pc, #56	@ (adr r3, 800c620 <floor+0xe8>)
 800c5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ea:	f7f3 fe6f 	bl	80002cc <__adddf3>
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	f7f4 fab1 	bl	8000b58 <__aeabi_dcmpgt>
 800c5f6:	2800      	cmp	r0, #0
 800c5f8:	d0c2      	beq.n	800c580 <floor+0x48>
 800c5fa:	2c00      	cmp	r4, #0
 800c5fc:	da0a      	bge.n	800c614 <floor+0xdc>
 800c5fe:	2e14      	cmp	r6, #20
 800c600:	d101      	bne.n	800c606 <floor+0xce>
 800c602:	3401      	adds	r4, #1
 800c604:	e006      	b.n	800c614 <floor+0xdc>
 800c606:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c60a:	2301      	movs	r3, #1
 800c60c:	40b3      	lsls	r3, r6
 800c60e:	441d      	add	r5, r3
 800c610:	4545      	cmp	r5, r8
 800c612:	d3f6      	bcc.n	800c602 <floor+0xca>
 800c614:	ea25 0507 	bic.w	r5, r5, r7
 800c618:	e7b2      	b.n	800c580 <floor+0x48>
 800c61a:	2500      	movs	r5, #0
 800c61c:	462c      	mov	r4, r5
 800c61e:	e7af      	b.n	800c580 <floor+0x48>
 800c620:	8800759c 	.word	0x8800759c
 800c624:	7e37e43c 	.word	0x7e37e43c
 800c628:	bff00000 	.word	0xbff00000
 800c62c:	000fffff 	.word	0x000fffff

0800c630 <_init>:
 800c630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c632:	bf00      	nop
 800c634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c636:	bc08      	pop	{r3}
 800c638:	469e      	mov	lr, r3
 800c63a:	4770      	bx	lr

0800c63c <_fini>:
 800c63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c63e:	bf00      	nop
 800c640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c642:	bc08      	pop	{r3}
 800c644:	469e      	mov	lr, r3
 800c646:	4770      	bx	lr
